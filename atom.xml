<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟猿笔记</title>
  
  <subtitle>平凡的每一天。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.yuanlife.cn/"/>
  <updated>2020-06-13T12:43:12.141Z</updated>
  <id>https://blog.yuanlife.cn/</id>
  
  <author>
    <name>菜鸟猿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 核心之自动装配实现</title>
    <link href="https://blog.yuanlife.cn/2020/06/01/2020-06-01%20Spring%20Boot%20%E6%A0%B8%E5%BF%83%E4%B9%8B%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%AE%9E%E7%8E%B0/"/>
    <id>https://blog.yuanlife.cn/2020/06/01/2020-06-01 Spring Boot 核心之自动装配实现/</id>
    <published>2020-06-01T12:30:12.000Z</published>
    <updated>2020-06-13T12:43:12.141Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、简介和目标"><a href="#一、简介和目标" class="headerlink" title="一、简介和目标"></a>一、简介和目标</h4><ul><li><p>简介：在 Spring Boot 场景下，基于约定大于配置的原则，实现 Spring 组件自动装配的目的。</p></li><li><p>目标：完成一个可通过配置和@EnableXXX 来控制的是否装配的Bean</p><a id="more"></a></li></ul><h4 id="二、底层装配技术简述"><a href="#二、底层装配技术简述" class="headerlink" title="二、底层装配技术简述"></a>二、底层装配技术简述</h4><ul><li>Spring 模式注解装配</li><li><p>Spring @Enable 模块装配</p><ul><li><p>注解驱动方式 eg:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE) <span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration.class) </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>接口编程方式 eg:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE) </span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) </span><br><span class="line"><span class="meta">@Documented</span> </span><br><span class="line"><span class="meta">@Import</span>(CachingConfigurationSelector.class) </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableCaching &#123; </span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingConfigurationSelector</span> <span class="keyword">extends</span> <span class="title">AdviceModeImportSelector</span>&lt;<span class="title">EnableCaching</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(adviceMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> PROXY:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getProxyImports();</span><br><span class="line">        <span class="keyword">case</span> ASPECTJ:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getAspectJImports();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Spring 条件装配</p><ul><li>配置方式 - <code>@Profile</code>，根据不同环境进行装配</li><li>编程方式 - <code>@Conditional</code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(&#123;OnClassCondition.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnClass &#123;</span><br><span class="line">    Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Spring 工厂加载机制</p><ul><li>实现类： SpringFactoriesLoader<ul><li>配置资源： META-INF/spring.factories<h4 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h4><h5 id="1、激活自动装配-EnableAutoConfiguration"><a href="#1、激活自动装配-EnableAutoConfiguration" class="headerlink" title="1、激活自动装配   @EnableAutoConfiguration"></a>1、激活自动装配   @EnableAutoConfiguration</h5><strong>项目结构如下</strong><br><img src="https://img-blog.csdnimg.cn/20191124205214381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>添加核心Bean=&gt;HelloWorld,只有一个hello方法用于测试输出结果</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public void <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">        log.info(<span class="string">"hello world 2019!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><strong>添加HelloWorldConfiguration用于注册HelloWorld</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class HelloWorldConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public HelloWorld <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">        log.info(<span class="string">"Load HelloWorld"</span>);</span><br><span class="line">        <span class="built_in">return</span> new HelloWorld();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加HelloWorldImportSelector实现ImportSelector，通过接口编程方式实现@Enable功能</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class HelloWorldImportSelector implements ImportSelector &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        log.info(<span class="string">"annotationMetadata.getAnnotationTypes():&#123;&#125;"</span>,annotationMetadata.getAnnotationTypes());</span><br><span class="line">        // 此处可写分支条件，根据指定条件选择性注册某些类 或者返回null</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> new String[]&#123;HelloWorldConfiguration.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加@EnableHelloWorld用于控制是否装配HelloWorld</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Documented</span><br><span class="line">//@Import(HelloWorldConfiguration.class) // 基于注解驱动实现Sprig @Enable模块</span><br><span class="line">@Import(HelloWorldImportSelector.class) // 基于接口驱动实现Spring @Enable模块</span><br><span class="line">public @interface EnableHelloWorld &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注:如果直接使用@Import(HelloWorldConfiguration.class)注解方式实现，则不需要HelloWorldImportSelector类，但是注解方式无法添加分支判断，只能指定加载指定类</code></p><h5 id="2、实现自动装配配置类-HelloWorldAutoConfiguration"><a href="#2、实现自动装配配置类-HelloWorldAutoConfiguration" class="headerlink" title="2、实现自动装配配置类  HelloWorldAutoConfiguration"></a>2、实现自动装配配置类  HelloWorldAutoConfiguration</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Configuration // 模式注解，声明是一个bean</span><br><span class="line">@ConditionalOnSystemProperty(name = <span class="string">"user.name"</span>, value = <span class="string">"Administrator"</span>) // 正确的条件装配</span><br><span class="line">//@ConditionalOnSystemProperty(name = <span class="string">"user.name"</span>, value = <span class="string">"lxt"</span>) // 错误的条件装配</span><br><span class="line">@EnableHelloWorld // Spring @Enable 模块装配</span><br><span class="line">public class HelloWorldAutoConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先根据条件注解@ConditionalOnSystemProperty判断是否满足</li><li>满足则执行@EnableHelloWorld，加载HelloWorldImportSelector，注册HelloWorldConfiguration进而注册HelloWorld<h5 id="3、配置自动装配实现-META-INF-spring-factories"><a href="#3、配置自动装配实现-META-INF-spring-factories" class="headerlink" title="3、配置自动装配实现 META-INF/spring.factories"></a>3、配置自动装配实现 META-INF/spring.factories</h5><strong>在resources下添加META-INF/spring.factories配置文件，用于启动是通过工厂机制（SpringFactoriesLoader）加载</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动装配</span></span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.lxt.springboot.autoconfigure.configuration.HelloWorldAutoConfiguration</span><br></pre></td></tr></table></figure></li></ul><h5 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h5><p><strong>添加测试类HelloWorldService</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class HelloWorldService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private HelloWorld helloWorld;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void <span class="function"><span class="title">init</span></span>()&#123;</span><br><span class="line">        helloWorld.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动项目，控制台输出如下，测试开启情况成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-11-24 21:25:02.299  INFO 13880 --- [           main] c.l.s.a.a.HelloWorldImportSelector       : annotationMetadata.getAnnotationTypes():[com.lxt.springboot.autoconfigure.condition.ConditionalOnSystemProperty, com.lxt.springboot.autoconfigure.annotation.EnableHelloWorld]</span><br><span class="line">2019-11-24 21:25:02.710  INFO 13880 --- [           main] c.l.s.a.c.HelloWorldConfiguration        : Load HelloWorld</span><br><span class="line">2019-11-24 21:25:02.712  INFO 13880 --- [           main] c.l.s.autoconfigure.entity.HelloWorld    : hello world 2019!</span><br></pre></td></tr></table></figure><p><strong>去掉@EnableHelloWorld 注解或者条件注解修改为ConditionalOnSystemProperty(name = “user.name”, value = “lxt”)，分别重启，控制台输出如下，测试关闭情况成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Field helloWorld <span class="keyword">in</span> com.lxt.springboot.autoconfigure.service.HelloWorldService required a bean of <span class="built_in">type</span> <span class="string">'com.lxt.springboot.autoconfigure.entity.HelloWorld'</span> that could not be found.</span><br><span class="line"></span><br><span class="line">The injection point has the following annotations:</span><br><span class="line">- @org.springframework.beans.factory.annotation.Autowired(required=<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider defining a bean of <span class="built_in">type</span> <span class="string">'com.lxt.springboot.autoconfigure.entity.HelloWorld'</span> <span class="keyword">in</span> your configuration.</span><br></pre></td></tr></table></figure><h4 id="五、源码"><a href="#五、源码" class="headerlink" title="五、源码"></a>五、源码</h4><ul><li><a href="https://github.com/hdlxt/dive-in-spring-boot" target="_blank" rel="noopener">https://github.com/hdlxt/dive-in-spring-boot</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、简介和目标&quot;&gt;&lt;a href=&quot;#一、简介和目标&quot; class=&quot;headerlink&quot; title=&quot;一、简介和目标&quot;&gt;&lt;/a&gt;一、简介和目标&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简介：在 Spring Boot 场景下，基于约定大于配置的原则，实现 Spring 组件自动装配的目的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标：完成一个可通过配置和@EnableXXX 来控制的是否装配的Bean&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Boot" scheme="https://blog.yuanlife.cn/categories/Spring/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="自动装备" scheme="https://blog.yuanlife.cn/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E5%A4%87/"/>
    
      <category term="核心" scheme="https://blog.yuanlife.cn/tags/%E6%A0%B8%E5%BF%83/"/>
    
  </entry>
  
</feed>
