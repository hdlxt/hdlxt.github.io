<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>九州无尘</title>
  
  <subtitle>Just do it!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yuanlife.cn/"/>
  <updated>2020-06-13T09:07:46.531Z</updated>
  <id>http://blog.yuanlife.cn/</id>
  
  <author>
    <name>九州无尘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一、Spring Boot 核心之自动装配实现</title>
    <link href="http://blog.yuanlife.cn/2019/11/24/2019-11-24-%20%20%E4%B8%80%E3%80%81Spring%20Boot%20%E6%A0%B8%E5%BF%83%E4%B9%8B%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%AE%9E%E7%8E%B0/"/>
    <id>http://blog.yuanlife.cn/2019/11/24/2019-11-24-  一、Spring Boot 核心之自动装配实现/</id>
    <published>2019-11-24T14:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.531Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、简介和目标"><a href="#一、简介和目标" class="headerlink" title="一、简介和目标"></a>一、简介和目标</h4><ul><li><p>简介：在 Spring Boot 场景下，基于约定大于配置的原则，实现 Spring 组件自动装配的目的。</p></li><li><p>目标：完成一个可通过配置和@EnableXXX 来控制的是否装配的Bean</p><a id="more"></a></li></ul><h4 id="二、底层装配技术简述"><a href="#二、底层装配技术简述" class="headerlink" title="二、底层装配技术简述"></a>二、底层装配技术简述</h4><ul><li>Spring 模式注解装配</li><li><p>Spring @Enable 模块装配</p><ul><li><p>注解驱动方式 eg:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE) <span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration.class) </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>接口编程方式 eg:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE) </span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) </span><br><span class="line"><span class="meta">@Documented</span> </span><br><span class="line"><span class="meta">@Import</span>(CachingConfigurationSelector.class) </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableCaching &#123; </span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingConfigurationSelector</span> <span class="keyword">extends</span> <span class="title">AdviceModeImportSelector</span>&lt;<span class="title">EnableCaching</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(adviceMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> PROXY:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getProxyImports();</span><br><span class="line">        <span class="keyword">case</span> ASPECTJ:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getAspectJImports();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Spring 条件装配</p><ul><li>配置方式 - <code>@Profile</code>，根据不同环境进行装配</li><li>编程方式 - <code>@Conditional</code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(&#123;OnClassCondition.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnClass &#123;</span><br><span class="line">    Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Spring 工厂加载机制</p><ul><li>实现类： SpringFactoriesLoader<ul><li>配置资源： META-INF/spring.factories<h4 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h4><h5 id="1、激活自动装配-EnableAutoConfiguration"><a href="#1、激活自动装配-EnableAutoConfiguration" class="headerlink" title="1、激活自动装配   @EnableAutoConfiguration"></a>1、激活自动装配   @EnableAutoConfiguration</h5><strong>项目结构如下</strong><br><img src="https://img-blog.csdnimg.cn/20191124205214381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>添加核心Bean=&gt;HelloWorld,只有一个hello方法用于测试输出结果</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public void <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">        log.info(<span class="string">"hello world 2019!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><strong>添加HelloWorldConfiguration用于注册HelloWorld</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class HelloWorldConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public HelloWorld <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">        log.info(<span class="string">"Load HelloWorld"</span>);</span><br><span class="line">        <span class="built_in">return</span> new HelloWorld();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加HelloWorldImportSelector实现ImportSelector，通过接口编程方式实现@Enable功能</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class HelloWorldImportSelector implements ImportSelector &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        log.info(<span class="string">"annotationMetadata.getAnnotationTypes():&#123;&#125;"</span>,annotationMetadata.getAnnotationTypes());</span><br><span class="line">        // 此处可写分支条件，根据指定条件选择性注册某些类 或者返回null</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> new String[]&#123;HelloWorldConfiguration.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加@EnableHelloWorld用于控制是否装配HelloWorld</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Documented</span><br><span class="line">//@Import(HelloWorldConfiguration.class) // 基于注解驱动实现Sprig @Enable模块</span><br><span class="line">@Import(HelloWorldImportSelector.class) // 基于接口驱动实现Spring @Enable模块</span><br><span class="line">public @interface EnableHelloWorld &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注:如果直接使用@Import(HelloWorldConfiguration.class)注解方式实现，则不需要HelloWorldImportSelector类，但是注解方式无法添加分支判断，只能指定加载指定类</code></p><h5 id="2、实现自动装配配置类-HelloWorldAutoConfiguration"><a href="#2、实现自动装配配置类-HelloWorldAutoConfiguration" class="headerlink" title="2、实现自动装配配置类  HelloWorldAutoConfiguration"></a>2、实现自动装配配置类  HelloWorldAutoConfiguration</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Configuration // 模式注解，声明是一个bean</span><br><span class="line">@ConditionalOnSystemProperty(name = <span class="string">"user.name"</span>, value = <span class="string">"Administrator"</span>) // 正确的条件装配</span><br><span class="line">//@ConditionalOnSystemProperty(name = <span class="string">"user.name"</span>, value = <span class="string">"lxt"</span>) // 错误的条件装配</span><br><span class="line">@EnableHelloWorld // Spring @Enable 模块装配</span><br><span class="line">public class HelloWorldAutoConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先根据条件注解@ConditionalOnSystemProperty判断是否满足</li><li>满足则执行@EnableHelloWorld，加载HelloWorldImportSelector，注册HelloWorldConfiguration进而注册HelloWorld<h5 id="3、配置自动装配实现-META-INF-spring-factories"><a href="#3、配置自动装配实现-META-INF-spring-factories" class="headerlink" title="3、配置自动装配实现 META-INF/spring.factories"></a>3、配置自动装配实现 META-INF/spring.factories</h5><strong>在resources下添加META-INF/spring.factories配置文件，用于启动是通过工厂机制（SpringFactoriesLoader）加载</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动装配</span></span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.lxt.springboot.autoconfigure.configuration.HelloWorldAutoConfiguration</span><br></pre></td></tr></table></figure></li></ul><h5 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h5><p><strong>添加测试类HelloWorldService</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class HelloWorldService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private HelloWorld helloWorld;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void <span class="function"><span class="title">init</span></span>()&#123;</span><br><span class="line">        helloWorld.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动项目，控制台输出如下，测试开启情况成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-11-24 21:25:02.299  INFO 13880 --- [           main] c.l.s.a.a.HelloWorldImportSelector       : annotationMetadata.getAnnotationTypes():[com.lxt.springboot.autoconfigure.condition.ConditionalOnSystemProperty, com.lxt.springboot.autoconfigure.annotation.EnableHelloWorld]</span><br><span class="line">2019-11-24 21:25:02.710  INFO 13880 --- [           main] c.l.s.a.c.HelloWorldConfiguration        : Load HelloWorld</span><br><span class="line">2019-11-24 21:25:02.712  INFO 13880 --- [           main] c.l.s.autoconfigure.entity.HelloWorld    : hello world 2019!</span><br></pre></td></tr></table></figure><p><strong>去掉@EnableHelloWorld 注解或者条件注解修改为ConditionalOnSystemProperty(name = “user.name”, value = “lxt”)，分别重启，控制台输出如下，测试关闭情况成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Field helloWorld <span class="keyword">in</span> com.lxt.springboot.autoconfigure.service.HelloWorldService required a bean of <span class="built_in">type</span> <span class="string">'com.lxt.springboot.autoconfigure.entity.HelloWorld'</span> that could not be found.</span><br><span class="line"></span><br><span class="line">The injection point has the following annotations:</span><br><span class="line">- @org.springframework.beans.factory.annotation.Autowired(required=<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider defining a bean of <span class="built_in">type</span> <span class="string">'com.lxt.springboot.autoconfigure.entity.HelloWorld'</span> <span class="keyword">in</span> your configuration.</span><br></pre></td></tr></table></figure><h4 id="五、源码"><a href="#五、源码" class="headerlink" title="五、源码"></a>五、源码</h4><ul><li><a href="https://github.com/hdlxt/dive-in-spring-boot" target="_blank" rel="noopener">https://github.com/hdlxt/dive-in-spring-boot</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、简介和目标&quot;&gt;&lt;a href=&quot;#一、简介和目标&quot; class=&quot;headerlink&quot; title=&quot;一、简介和目标&quot;&gt;&lt;/a&gt;一、简介和目标&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简介：在 Spring Boot 场景下，基于约定大于配置的原则，实现 Spring 组件自动装配的目的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标：完成一个可通过配置和@EnableXXX 来控制的是否装配的Bean&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/categories/Spring/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="自动装备" scheme="http://blog.yuanlife.cn/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E5%A4%87/"/>
    
      <category term="核心" scheme="http://blog.yuanlife.cn/tags/%E6%A0%B8%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud 笔记和总结】八、使用 Sleuth和Zipkin进行服务跟踪</title>
    <link href="http://blog.yuanlife.cn/2019/11/13/2019-11-13-%E3%80%90Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93%E3%80%91%E5%85%AB%E3%80%81%E4%BD%BF%E7%94%A8%20Sleuth%E5%92%8CZipkin%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AA/"/>
    <id>http://blog.yuanlife.cn/2019/11/13/2019-11-13-【Spring Cloud 笔记和总结】八、使用 Sleuth和Zipkin进行服务跟踪/</id>
    <published>2019-11-13T12:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.531Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、添加服务跟踪微服务项目zipkin-server"><a href="#一、添加服务跟踪微服务项目zipkin-server" class="headerlink" title="一、添加服务跟踪微服务项目zipkin-server"></a>一、添加服务跟踪微服务项目zipkin-server</h4><p><strong>父pom添加zipkin相关依赖</strong></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class="line">                &lt;<span class="built_in">type</span>&gt;pom&lt;/<span class="built_in">type</span>&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p><strong>本身pom文件依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--zipkin中包含spring-cloud-starter-sleuth,无需再次引入--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9411</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: zipkin-server</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8000/eureka/</span><br><span class="line">management:</span><br><span class="line">  metrics:</span><br><span class="line">    web:</span><br><span class="line">      server:</span><br><span class="line">        auto-time-requests: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>启动类添加@EnableZipkinServer</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.lxt.zipkin;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import zipkin2.server.internal.EnableZipkinServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZipkinServer</span><br><span class="line">public class ZipkinServerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ZipkinServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二、改造service-consumer、service-provider和zuul"><a href="#二、改造service-consumer、service-provider和zuul" class="headerlink" title="二、改造service-consumer、service-provider和zuul"></a>二、改造service-consumer、service-provider和zuul</h4><p><strong>分别添加依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>配置文件分别添加</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重点</span></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">  <span class="comment">#        base-url:当你设置sleuth-cli收集信息后通过http传输到zinkin-server时，需要在这里配置</span></span><br><span class="line"><span class="attr">  base-url:</span> <span class="attr">http://localhost:9411</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">sleuth:</span></span><br><span class="line"><span class="attr">  sampler:</span></span><br><span class="line">    <span class="comment">#收集追踪信息的比率，如果是0.1则表示只记录10%的追踪数据，如果要全部追踪，设置为1（实际场景不推荐，因为会造成不小的性能消耗）</span></span><br><span class="line"><span class="attr">    probability:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p><strong>注意：添加完毕依赖之后，刷新maven。</strong><br><img src="https://img-blog.csdnimg.cn/20191122230730371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>运行测试</strong></p><ul><li>分别启动注册中心、网关、服务跟踪、服务提供和服务消费者</li><li>访问服务跟踪界面<code>http://localhost:9411</code><br><img src="https://img-blog.csdnimg.cn/20191122231051856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>浏览器访问<code>http://localhost:8006/spring-cloud-pr/hello/1?token=2</code>,查看服务跟踪界面<br><img src="https://img-blog.csdnimg.cn/2019112223112770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191122231138592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="三、相关"><a href="#三、相关" class="headerlink" title="三、相关"></a>三、相关</h4></li><li>父模块介绍<a href="https://blog.csdn.net/qq_25283709/article/category/9462287" target="_blank" rel="noopener"><code>传送门</code></a></li><li>源码地址<a href="https://github.com/hdlxt/springcloud" target="_blank" rel="noopener"><code>传送门</code></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、添加服务跟踪微服务项目zipkin-server&quot;&gt;&lt;a href=&quot;#一、添加服务跟踪微服务项目zipkin-server&quot; class=&quot;headerlink&quot; title=&quot;一、添加服务跟踪微服务项目zipkin-server&quot;&gt;&lt;/a&gt;一、添加服务跟踪微服务项目zipkin-server&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;父pom添加zipkin相关依赖&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/categories/Spring/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="http://blog.yuanlife.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="http://blog.yuanlife.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Sleuth" scheme="http://blog.yuanlife.cn/tags/Sleuth/"/>
    
      <category term="Zipkin" scheme="http://blog.yuanlife.cn/tags/Zipkin/"/>
    
      <category term="服务跟踪" scheme="http://blog.yuanlife.cn/tags/%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud 笔记和总结】七、使用Zuul构建微服务网关.md</title>
    <link href="http://blog.yuanlife.cn/2019/11/10/2019-11-10-%E3%80%90Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93%E3%80%91%E4%B8%83%E3%80%81%E4%BD%BF%E7%94%A8Zuul%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <id>http://blog.yuanlife.cn/2019/11/10/2019-11-10-【Spring Cloud 笔记和总结】七、使用Zuul构建微服务网关/</id>
    <published>2019-11-10T12:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.530Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="一、简单微服务网关搭建"><a href="#一、简单微服务网关搭建" class="headerlink" title="一、简单微服务网关搭建"></a>一、简单微服务网关搭建</h4><p>  <strong>maven依赖</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt.gateaway&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zuul&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;zuul&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project <span class="keyword">for</span> Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>  <a id="more"></a><p>  <strong>配置文件</strong></p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">gateway-zuul</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8006</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8000/eureka/</span>   <span class="comment">#注册中心eurka地址</span></span><br></pre></td></tr></table></figure><p>  <strong>启动类添加@EnableZuulProxy</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.lxt.gateaway.zuul;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">public class ZuulApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>Spring Cloud Zuul默认配置说明</strong></p><ul><li>默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：<a href="http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**会被转发到serviceId对应的微服务" target="_blank" rel="noopener">http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**会被转发到serviceId对应的微服务</a></li><li>eg:<a href="http://localhost:8006/spring-cloud-consumer/hello/lxt" target="_blank" rel="noopener">http://localhost:8006/spring-cloud-consumer/hello/lxt</a> =&gt;<a href="http://spring-cloud-consumer/hello/lxt=&gt;http://localhost:9001/hello/lxt" target="_blank" rel="noopener">http://spring-cloud-consumer/hello/lxt=&gt;http://localhost:9001/hello/lxt</a></li><li><p>也可手动配置指定</p><ul><li><p>自定义微服务访问路径</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    spring-cloud-consumer-hystrix: /<span class="built_in">test</span>/**</span><br></pre></td></tr></table></figure><ul><li><p>忽略指定微服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  ignored-services: spring-cloud-consumer-hystrix,spring-cloud-consumer</span><br></pre></td></tr></table></figure></li><li><p>同时指定微服务ServiceId和对应路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    config-client:</span><br><span class="line">      path: /lxt/**</span><br><span class="line">      serviceId:  spring-cloud-consumer-hystrix</span><br></pre></td></tr></table></figure></li><li><p>等等…</p></li></ul></li></ul></li></ul></li></ul><pre><code>**启动测试**- 分别启动exureka-server、service-consumer、service-provider和zuul- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt`- 返回`hello lxt，this is first messge`，测试成功####  二、Zuul路由端点- 由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问，需手动添加配置暴露`routes`路由端点<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line">        <span class="comment"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">routes</span></span><br></pre></td></tr></table></figure>- 浏览器`http://localhost:8006/actuator/routes`，返回如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 20191121213009</span><br><span class="line">// http://localhost:8006/actuator/routes</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"/spring-cloud-consumer/**"</span>: <span class="string">"spring-cloud-consumer"</span>,</span><br><span class="line">  <span class="string">"/spring-cloud-provider/**"</span>: <span class="string">"spring-cloud-provider"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>####  三、Zuul中的Filter使用**Zuul中默认实现的Filter**![在这里插入图片描述](https://img-blog.csdnimg.cn/20191121220713248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)- PRE： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。- ROUTING：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。- POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。- ERROR：在其他阶段发生错误时执行该过滤器。 除了默认的过滤器类型，Zuul还允许我们创建自定义的过滤器类型。例如，我们可以定制一种STATIC类型的过滤器，直接在Zuul中生成响应，而不将请求转发到后端的微服务。**自定义Filter示例**必须包含`token`的参数才可访问，否则直接返回，如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lxt.gateaway.zuul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(TokenFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"---&gt;&gt;&gt; TokenFilter &#123;&#125;,&#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString());</span><br><span class="line"></span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);<span class="comment">// 获取请求的参数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(token)) &#123;</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">true</span>); <span class="comment">//对请求进行路由</span></span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">200</span>);</span><br><span class="line">            ctx.set(<span class="string">"isSuccess"</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>); <span class="comment">//不对其进行路由</span></span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">400</span>);</span><br><span class="line">            ctx.setResponseBody(<span class="string">"token is empty"</span>);</span><br><span class="line">            ctx.set(<span class="string">"isSuccess"</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>**注册Bean**<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TokenFilter <span class="title">tokenFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TokenFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>**运行测试**- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt`,返回`token is empty`- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt?token=2`,返回`hello lxt，this is first messge`####  四、Zuul中的路由熔断和重试##### 路由熔断**实现FallbackProvider接口，重写fallbackResponse方法**<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lxt.gateaway.zuul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerFallback</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(FallbackProvider.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定要处理的 service。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"spring-cloud-provider"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cause != <span class="keyword">null</span> &amp;&amp; cause.getCause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String reason = cause.getCause().getMessage();</span><br><span class="line">            logger.info(<span class="string">"Excption &#123;&#125;"</span>,reason);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fallbackResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(<span class="string">"The service is unavailable."</span>.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">                <span class="keyword">return</span> headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>**注册bean**<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public ProducerFallback <span class="function"><span class="title">producerFallback</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new ProducerFallback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>**运行测试**- 再重启网关`zuul`,启动务提供者`service-provider1`- 浏览多次器输入`http://localhost:8006/spring-cloud-provider/foo?foo=lxt&amp;token=2`- 交替返回`hello lxt，this is first messge`和`hello lxt，this is two messge`- 关闭第二个服务提供者，继续刷新浏览器- 交替返回`hello lxt，this is first messge`和`The service is unavailable.`##### 路由重试**添加依赖**<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-retry&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>**修改配置文件**<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  retryable: <span class="literal">true</span> <span class="comment">#是否开启重试功能</span></span><br><span class="line">ribbon:</span><br><span class="line">  MaxAutoRetries: 2 <span class="comment">#对当前服务的重试次数</span></span><br><span class="line">  MaxAutoRetriesNextServer: 0 <span class="comment">#切换相同Server的次数</span></span><br></pre></td></tr></table></figure>**修改service-provider1的hello方法如下**<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value =<span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">public String index(String name) &#123;</span><br><span class="line">    logger.info(<span class="string">"request two name is "</span>+name);</span><br><span class="line">    try&#123;</span><br><span class="line">        Thread.sleep(1000000);</span><br><span class="line">    &#125;catch ( Exception e)&#123;</span><br><span class="line">        logger.error(<span class="string">" hello two error"</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">"hello "</span>+name+<span class="string">"，this is two messge"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>**运行测试**- 重启网关`zuul`和`service-provider1`- 浏览器输入`http://localhost:8006/spring-cloud-provider/foo?foo=lxt&amp;token=2`- 返回`The service is unavailable.`时，查看控制如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-11-21 22:38:31.049  INFO 11240 --- [nio-9002-exec-3] c.l.s.controller.HelloController         : request two name is lxt</span><br><span class="line">2019-11-21 22:38:32.054  INFO 11240 --- [nio-9002-exec-4] c.l.s.controller.HelloController         : request two name is lxt</span><br><span class="line">2019-11-21 22:38:33.060  INFO 11240 --- [nio-9002-exec-5] c.l.s.controller.HelloController         : request two name is lxt</span><br></pre></td></tr></table></figure>- 打印了三次，重试了两次。####  五、相关- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)- 参考    - http://www.ityouknow.com/spring-cloud.html     </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;一、简单微服务网关搭建&quot;&gt;&lt;a href=&quot;#一、简单微服务网关搭建&quot; class=&quot;headerlink&quot; title=&quot;一、简单微服务网关搭建&quot;&gt;&lt;/a&gt;一、简单微服务网关搭建&lt;/h4&gt;&lt;p&gt;  &lt;strong&gt;maven依赖&lt;/strong&gt;&lt;/p&gt;
  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;project xmlns=&lt;span class=&quot;string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; xmlns:xsi=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         xsi:schemaLocation=&lt;span class=&quot;string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;parent&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;groupId&amp;gt;com.lxt&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;artifactId&amp;gt;springcloud&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/parent&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;com.lxt.gateaway&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;zuul&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;name&amp;gt;zuul&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;description&amp;gt;Demo project &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Spring Boot&amp;lt;/description&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;dependencies&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-zuul&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/dependencies&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/categories/Spring/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="http://blog.yuanlife.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="http://blog.yuanlife.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Zuul" scheme="http://blog.yuanlife.cn/tags/Zuul/"/>
    
      <category term="网关" scheme="http://blog.yuanlife.cn/tags/%E7%BD%91%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud 笔记和总结】六、Spring Cloud Config统一配置中心（Git+Spring Cloud Bus+RabbitMQ+Git WebHook）</title>
    <link href="http://blog.yuanlife.cn/2019/11/05/2019-11-05-%E3%80%90Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93%E3%80%91%E5%85%AD%E3%80%81Spring%20Cloud%20Config%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%EF%BC%88Git+Spring%20Cloud%20Bus+RabbitMQ+Git%20WebHook%EF%BC%89/"/>
    <id>http://blog.yuanlife.cn/2019/11/05/2019-11-05-【Spring Cloud 笔记和总结】六、Spring Cloud Config统一配置中心（Git+Spring Cloud Bus+RabbitMQ+Git WebHook）/</id>
    <published>2019-11-05T12:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.530Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>  基于Spring Cloud Config实现统一配置中心，将配置文件存放于Git(GitHub)上，通过Spring Cloud Bus消息总线&amp;RabbitMQ消息中间件进行服务间消息通信。</p><p>  <strong>涉及项目</strong></p><ul><li><p>exureka-server</p></li><li><p>config-server</p></li><li><p>config-client</p><a id="more"></a><p><strong>整体架构图大致如下，使用GitHub Webhooks 触发配置中心刷新配置</strong></p><p><img src="https://img-blog.csdnimg.cn/20191117200225699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>上图来源：<code>http://blog.didispace.com/springcloud7/</code></p><h4 id="二、配置中心服务端实现"><a href="#二、配置中心服务端实现" class="headerlink" title="二、配置中心服务端实现"></a>二、配置中心服务端实现</h4><p><strong>依赖</strong>         </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;config-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;config-server&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project <span class="keyword">for</span> Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--集成Git Webhooks之后，使用/monitor即可实现配置更新，通知其他服务--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-monitor&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-server</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/hdlxt/springcloud</span> <span class="comment"># 配置git仓库的地址</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">config-repo</span>                     <span class="comment"># git仓库地址下的相对地址，可以配置多个，用,分割。</span></span><br><span class="line"><span class="attr">          username:</span>                     <span class="comment"># git仓库的账号</span></span><br><span class="line"><span class="attr">          password:</span>           <span class="comment"># git仓库的密码</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">111.231</span><span class="string">.xxxx.xx</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8000/eureka/</span>   <span class="comment">#注册中心eurka地址</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line">       <span class="comment"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">bus-refresh</span></span><br></pre></td></tr></table></figure></li><li><p>主要内容</p><ul><li>添加配置中心文件存放于github</li><li>配置rabbitmq连接信息</li><li>暴露bus-refresh</li></ul></li><li>github配置文件内容    <img src="https://img-blog.csdnimg.cn/20191117211411126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>仓库中的配置文件会被转换成 Web 接口，访问可以参照以下的规则：<ul><li>/{application}/{profile}[/{label}]<ul><li>/{application}-{profile}.yml</li><li>/{label}/{application}-{profile}.yml</li><li>/{application}-{profile}.properties</li><li>/{label}/{application}-{profile}.properties</li><li>上面的 URL 会映射 {application}-{profile}.yml 对应的配置文件，其中 {label} 对应 Git 上不同的分支，默认为 master。</li></ul></li></ul></li></ul></li></ul><pre><code>**启动类比较简单,声明是服务、配置中心服务端**<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>到此配置中心服务端完毕。####  二、配置中心客户端实现- 依赖    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;config-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;config-client&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project <span class="keyword">for</span> Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>- 配置文件    - 关于` bootstrap.yml`和`application.yml`        - bootstrap.yml（bootstrap.properties） 用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等            - application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。        - bootstrap.yml 先于 application.yml 加载    - bootstrap.yml        <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">lxt-config</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line">        <span class="comment">#开启Config服务发现支持</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#指定server端的name,也就是server端spring.application.name的值</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">spring-cloud-config-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>     - application.yml        <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-client</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    bus:</span></span><br><span class="line"><span class="attr">     trace:</span></span><br><span class="line">       <span class="comment"># 开启消息跟踪事件</span></span><br><span class="line"><span class="attr">       enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">111.231</span><span class="number">.29</span><span class="number">.249</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">refresh</span></span><br></pre></td></tr></table></figure>- 主要代码    -  核心        - @EnableDiscoveryClient        - @RefreshScope:使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中    - 启动类        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ConfigClientApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConfigClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    - 测试        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author lxt</span><br><span class="line"> * @Copy Right Information: lxt</span><br><span class="line"> * @Project: spring cloud</span><br><span class="line"> * @CreateDate: 2018/12/16 20:04</span><br><span class="line"> * @<span class="built_in">history</span> Sr Date Modified By Why &amp; What is modified</span><br><span class="line"> * 1.2018/12/16 lxt &amp; new</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RefreshScope // 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @Value(<span class="string">"<span class="variable">$&#123;lxt.hello&#125;</span>"</span>)</span><br><span class="line">    private String hello;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/hello"</span>)</span><br><span class="line">    public String <span class="function"><span class="title">from</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> this.hello;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>####  三、整合 **以安装包或者docker方式安装RabbitMQ，启动**![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213514487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70) **配置GitHub Webhooks**- （可选，云服务器可跳过）内网穿透工具下载[natapp](#https://natapp.cn/)安装和配置（有免费通道），目的可给本机电脑映射一个外网域名，用于配置Webhooks![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111721323258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)- 配置Webhooks，配置中心服务端需引入`spring-cloud-config-monitor`依赖![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117214212673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)####  四、测试- 分别启动注册中心、配置中心服务端- 启动多个客户端    - 可通过打jar包形式启动    - 也可通过idea添加启动类，指定不同端口启动    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213813171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)- 修改配置文件，push到github上触发回调`http://t23b4j.natappfree.cc/monitor`,通知配置中心服务端更新配置，服务端以mq形式通过消息总线通知客户端更新配置。####  五、相关- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)- 参考    - http://www.ityouknow.com/spring-cloud.html     </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h4&gt;&lt;p&gt;  基于Spring Cloud Config实现统一配置中心，将配置文件存放于Git(GitHub)上，通过Spring Cloud Bus消息总线&amp;amp;RabbitMQ消息中间件进行服务间消息通信。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;涉及项目&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;exureka-server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;config-server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;config-client&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/categories/Spring/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="http://blog.yuanlife.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="http://blog.yuanlife.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="统一配置中心" scheme="http://blog.yuanlife.cn/tags/%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
      <category term="Spring Cloud Bus" scheme="http://blog.yuanlife.cn/tags/Spring-Cloud-Bus/"/>
    
      <category term="RabbitMQ" scheme="http://blog.yuanlife.cn/tags/RabbitMQ/"/>
    
      <category term="Git WebHook" scheme="http://blog.yuanlife.cn/tags/Git-WebHook/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud 笔记和总结】五、 Hystrix Dashboard和Turbine监控</title>
    <link href="http://blog.yuanlife.cn/2019/11/03/2019-11-03-%E3%80%90Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93%E3%80%91%E4%BA%94%E3%80%81%20Hystrix%20Dashboard%E5%92%8CTurbine%E7%9B%91%E6%8E%A7/"/>
    <id>http://blog.yuanlife.cn/2019/11/03/2019-11-03-【Spring Cloud 笔记和总结】五、 Hystrix Dashboard和Turbine监控/</id>
    <published>2019-11-03T13:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.529Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="一、Hystrix-Dashboard监控"><a href="#一、Hystrix-Dashboard监控" class="headerlink" title="一、Hystrix Dashboard监控"></a>一、Hystrix Dashboard监控</h4><ul><li><p>涉及项目</p><ul><li>service-consumer-hystrix =&gt; 基于service-consumer修改</li></ul></li><li><p>依赖</p>  <a id="more"></a>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;service-consumer-hystrix&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;service-consumer-hystrix&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project <span class="keyword">for</span> Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>- 配置文件    <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-consumer-hystrix</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9004</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>- 启动类添加注解,注意`getServlet()`方法，用于解决spring cloud2 hystrix没有hystrix.stream路径    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lxt.springcloudconsumerhystrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConsumerHystrixApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConsumerHystrixApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决：找不到/hystrix.stream 报错：=&gt;Unable to connect to Command Metric Stream.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/hystrix.stream"</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">- 启动项目，浏览器输入`http://localhost:9004/hystrix`,如下：</span><br><span class="line">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117123726133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class="line">- 监控默认集群：http://turbine-hostname:port/turbine.stream </span><br><span class="line">- 监控指定集群：http://turbine-hostname:port/turbine.stream?cluster=[clusterName]</span><br><span class="line">- 监控的那个应用：http://hystrix-app:port/hystrix.stream</span><br><span class="line">- 输入`http://localhost:9004/hystrix.stream `进入监控页面，此时页面显示`Loading`</span><br><span class="line">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117124843621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class="line">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117125004752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class="line">- 浏览器访问`http://localhost:9004/hello/lxt`之后，监控页面如下</span><br><span class="line">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117124832598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class="line">- 图中参数解释如下</span><br><span class="line">界面解读</span><br><span class="line">![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111712515840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class="line"></span><br><span class="line">实心圆：它有颜色和大小之分，分别代表实例的监控程度和流量大小。如上图所示，它的健康度从绿色、黄色、橙色、红色递减。通过该实心圆的展示，我们就可以在大量的实例中快速的发现故障实例和高压力实例。</span><br><span class="line"></span><br><span class="line">曲线：用来记录 2 分钟内流量的相对变化，我们可以通过它来观察到流量的上升和下降趋势。</span><br><span class="line">其他一些数量指标如下图所示</span><br><span class="line">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117125216734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class="line">- 测试成功</span><br><span class="line">####  二、Turbine集群监控</span><br><span class="line">  - 涉及项目</span><br><span class="line">  - hystrix-dashboard-turbine </span><br><span class="line">  - service-consumer-node01  =&gt; 基于service-consumer-hystrix</span><br><span class="line">  - service-consumer-node02  =&gt; 基于service-consumer-hystrix</span><br><span class="line">  - </span><br><span class="line"> **hystrix-dashboard-turbine项目添加**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-  依赖</span><br><span class="line">```bash</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hystrix-dashboard-turbine&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;hystrix-dashboard-turbine&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-turbine&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>- 配置文件    <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">turbine-client</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9009</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="comment"># 需要监控的应用名称，默认逗号隔开，内部使用Stringutils.commaDelimitedListToStringArray分割</span></span><br><span class="line"><span class="attr">  app-config:</span> <span class="string">hystrix-client1,hystrix-client2</span></span><br><span class="line"><span class="attr">  aggregator:</span></span><br><span class="line"><span class="attr">    cluster-config:</span> <span class="string">default</span></span><br><span class="line">  <span class="comment"># 集群名称</span></span><br><span class="line"><span class="attr">  cluster-name-expression:</span> <span class="string">new</span> <span class="string">String("default")</span></span><br><span class="line"><span class="attr">  combine-host-port:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8000/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment"># 启用ip配置 这样在注册中心列表中看见的是以ip+端口呈现的</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 实例名称  最后呈现地址：ip:2000</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure>- 启动类    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lxt.hystrixdashboardturbine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.turbine.EnableTurbine;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@EnableTurbine</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardTurbineApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardTurbineApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/actuator/hystrix.stream"</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>**service-consumer-node01/02的依赖、代码和service-consumer-hystrix一样，区别在于一个配置，如下**- 配置文件,关键点`management.endpoints.web.exposure.include：hystrix.stream`    <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hystrix-client1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9005</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line">        <span class="comment"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">hystrix.stream</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>**测试**- 分别启动注册中心、服务提供者、Turbine监控和两个服务消费者(service-consumer-node01/02)![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143021668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)**TURBINE-CLIENT再注册中心显示ip:port**- 浏览器访问`http://localhost:9009/hystrix`,监控默认集群![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143330676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143406677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)- 浏览器访问`http://localhost:9005/hello/lxt`和`http://localhost:9006/hello/lxt`![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143526476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)- 测试成功####  三、相关- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)- 参考    - https://www.cnblogs.com/carrychan/p/9529418.html    - http://www.ityouknow.com/spring-cloud.html    </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;一、Hystrix-Dashboard监控&quot;&gt;&lt;a href=&quot;#一、Hystrix-Dashboard监控&quot; class=&quot;headerlink&quot; title=&quot;一、Hystrix Dashboard监控&quot;&gt;&lt;/a&gt;一、Hystrix Dashboard监控&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;涉及项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;service-consumer-hystrix =&amp;gt; 基于service-consumer修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;依赖&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/categories/Spring/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="http://blog.yuanlife.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="http://blog.yuanlife.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Hystrix Dashboar" scheme="http://blog.yuanlife.cn/tags/Hystrix-Dashboar/"/>
    
      <category term="Turbine" scheme="http://blog.yuanlife.cn/tags/Turbine/"/>
    
      <category term="监控" scheme="http://blog.yuanlife.cn/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud 笔记和总结】四、熔断器Hystrix简单实现</title>
    <link href="http://blog.yuanlife.cn/2019/10/25/2019-10-25-%E3%80%90Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93%E3%80%91%E5%9B%9B%E3%80%81%E7%86%94%E6%96%AD%E5%99%A8Hystrix%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://blog.yuanlife.cn/2019/10/25/2019-10-25-【Spring Cloud 笔记和总结】四、熔断器Hystrix简单实现/</id>
    <published>2019-10-25T14:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.527Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="一、简单实现"><a href="#一、简单实现" class="headerlink" title="一、简单实现"></a>一、简单实现</h4><ul><li><p>基于上文服务消费者（<code>service-consumer</code>）代码。</p></li><li><p>修改配置文件，添加：feign.hystrix.enable:true如下：</p>  <a id="more"></a>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">        name: spring-cloud-consumer</span><br><span class="line">server:</span><br><span class="line">    port: 9001</span><br><span class="line">eureka:</span><br><span class="line">    client:</span><br><span class="line">        serviceUrl:</span><br><span class="line">            defaultZone: http://localhost:8000/eureka/</span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>- 添加容错回调类    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lxt.serviceconsumer.hystrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lxt.serviceconsumer.dao.fegin.HelloFegin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copy</span> Right Information: lxt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>: spring cloud</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span>: 2018/12/16 15:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@history</span> Sr Date Modified By Why &amp; What is modified</span></span><br><span class="line"><span class="comment"> * 1.2018/12/16 lxt &amp; new</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFeginHystrix</span> <span class="keyword">implements</span> <span class="title">HelloFegin</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> +name+<span class="string">", this messge send failed "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 修改`HelloFegin`添加回调`fallback`属性    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name= <span class="string">"spring-cloud-provider"</span>,fallback = HelloFeginHystrix.class)</span><br></pre></td></tr></table></figure>- 测试    - 分别启动注册中心、服务提供者和服务消费者         - 浏览器访问`localhost:9001/hello/lxt`,返回`hello lxt，this is first messge`    - 停止服务提供者，再次访问    - 返回`hello lxt，this messge send failed`    - 测试成功####  二、相关- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)- 参考    - https://www.cnblogs.com/carrychan/p/9529418.html</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;一、简单实现&quot;&gt;&lt;a href=&quot;#一、简单实现&quot; class=&quot;headerlink&quot; title=&quot;一、简单实现&quot;&gt;&lt;/a&gt;一、简单实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于上文服务消费者（&lt;code&gt;service-consumer&lt;/code&gt;）代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改配置文件，添加：feign.hystrix.enable:true如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/categories/Spring/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="http://blog.yuanlife.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="http://blog.yuanlife.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Hystrix" scheme="http://blog.yuanlife.cn/tags/Hystrix/"/>
    
      <category term="熔断器" scheme="http://blog.yuanlife.cn/tags/%E7%86%94%E6%96%AD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud 笔记和总结】三、服务提供与消费和实现客户端负载均衡</title>
    <link href="http://blog.yuanlife.cn/2019/10/18/2019-10-18-%E3%80%90Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93%E3%80%91%E4%B8%89%E3%80%81%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E4%B8%8E%E6%B6%88%E8%B4%B9%E5%92%8C%E5%AE%9E%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://blog.yuanlife.cn/2019/10/18/2019-10-18-【Spring Cloud 笔记和总结】三、服务提供与消费和实现客户端负载均衡/</id>
    <published>2019-10-18T12:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.526Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>注册中心Eureka架构图如下：<br><img src="https://img-blog.csdnimg.cn/20191113212752597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>分别是注册中心（Eureka）、服务提供（Service Provider）和服务消费（Service Consumer），后两者均为注册到注册中心的服务，因调用关系不同而身份不同，不同的业务场景下身份可能会互换。</strong></p><a id="more"></a><h4 id="二、主要内容"><a href="#二、主要内容" class="headerlink" title="二、主要内容"></a>二、主要内容</h4><h6 id="1、服务提供者"><a href="#1、服务提供者" class="headerlink" title="1、服务提供者"></a>1、服务提供者</h6><p>结构如下：<br><img src="https://img-blog.csdnimg.cn/20191113214038821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>HelloController</code>添加注解<code>@RestController</code>,核心代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello "</span>+name+<span class="string">"，this is first messge"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/foo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(String foo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello "</span>+foo+<span class="string">"，this is first messge"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>application.yml</code>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    application:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">spring-cloud-provider</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">    client:</span></span><br><span class="line"><span class="attr">        serviceUrl:</span></span><br><span class="line"><span class="attr">            defaultZone:</span> <span class="attr">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p><code>pom.xml</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;service-provider&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;service-provider&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project <span class="keyword">for</span> Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h6 id="2、服务消费者"><a href="#2、服务消费者" class="headerlink" title="2、服务消费者"></a>2、服务消费者</h6><p>结构如下，暂时忽略<code>hystrix</code>包<br><img src="https://img-blog.csdnimg.cn/20191117004121974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>HelloRemote</code>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloRest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        String response = restTemplate.getForObject(<span class="string">"http://spring-cloud-provider/foo?foo="</span>+name,String.class);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ConsumerController</code>核心代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class ConsumerController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private HelloRest helloRest;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">    public String index(@PathVariable(<span class="string">"name"</span>) String name) &#123;</span><br><span class="line">        <span class="built_in">return</span> helloRest.hello(name);</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(<span class="string">"/test"</span>)</span><br><span class="line">    public String <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"test success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>application.yml</code>配文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">        name: spring-cloud-consumer</span><br><span class="line">server:</span><br><span class="line">    port: 9001</span><br><span class="line">eureka:</span><br><span class="line">    client:</span><br><span class="line">        serviceUrl:</span><br><span class="line">            defaultZone: http://localhost:8000/eureka/</span><br></pre></td></tr></table></figure><p><code>pom.xml</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;service-consumer&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;service-consumer&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project <span class="keyword">for</span> Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="三、结果演示"><a href="#三、结果演示" class="headerlink" title="三、结果演示"></a>三、结果演示</h4><ul><li>分别启动注册中心、服务提供者和服务消费者，如下图<br><img src="https://img-blog.csdnimg.cn/20191113220952945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>调用服务消费者测试<pre><code>- 浏览器输入`http://localhost:9001/hello/lxt`- 返回`hello lxt，this is first messge`，测试成功</code></pre></li></ul><h4 id="四、整合Feign实现负载均衡"><a href="#四、整合Feign实现负载均衡" class="headerlink" title="四、整合Feign实现负载均衡"></a>四、整合Feign实现负载均衡</h4><p><strong>简介</strong></p><p>Fegin是Netfix开发的声明式、模板化的HTTP客户端，Spring Cloud 对Fegin进行了增强，使Fegin支持了Spring MVC注解，并整合了Ribbon和Eureka，从而让Fegin的使用更加方便。</p><p>Ribbon是基于Netfix发布的客户端负载均衡器，默认提供了轮询、随机等负载均衡算法，开发者也可以自定义负载均衡算法。</p><p><strong>Eureka Server 和 Fegin整合使用大致架构如下</strong><br><img src="https://img-blog.csdnimg.cn/20191117004857162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>实现负载均衡</strong></p><ul><li><p>依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动类添加注解<code>@EnableFeignClients</code>启用feign进行远程调用</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span><span class="comment">//启用服务注册与发现</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span><span class="comment">//启用feign进行远程调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>@FeignClient</code>实现负载均衡</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name:配置服务提供者名称，用于从注册中心获取服务提供者信息</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name= <span class="string">"spring-cloud-provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloFegin</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复制<code>service-provider</code>,重命名<code>service-provider1</code></p></li><li>修改配置文件端口为9002</li><li>修改<code>HelloController.index</code>返回值为<code>&quot;hello &quot;+name+&quot;，this is two messge&quot;</code><br>  如下图：<br>  <img src="https://img-blog.csdnimg.cn/20191113222048474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>注册中心<br><img src="https://img-blog.csdnimg.cn/20191113222346477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>多次测试<code>http://localhost:9001/hello/lxt</code>分别返回<code>hello lxt，this is first messge</code>和<code>hello lxt，this is two messge</code><h4 id="五、相关"><a href="#五、相关" class="headerlink" title="五、相关"></a>五、相关</h4></li><li>父模块介绍<a href="https://blog.csdn.net/qq_25283709/article/category/9462287" target="_blank" rel="noopener"><code>传送门</code></a></li><li>源码地址<a href="https://github.com/hdlxt/springcloud" target="_blank" rel="noopener"><code>传送门</code></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h4&gt;&lt;p&gt;注册中心Eureka架构图如下：&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191113212752597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;&lt;strong&gt;分别是注册中心（Eureka）、服务提供（Service Provider）和服务消费（Service Consumer），后两者均为注册到注册中心的服务，因调用关系不同而身份不同，不同的业务场景下身份可能会互换。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/categories/Spring/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="http://blog.yuanlife.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="负载均衡" scheme="http://blog.yuanlife.cn/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud 笔记和总结】二、注册中心Eureka</title>
    <link href="http://blog.yuanlife.cn/2019/10/07/2019-10-07-%E3%80%90Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93%E3%80%91%E4%BA%8C%E3%80%81%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83Eureka/"/>
    <id>http://blog.yuanlife.cn/2019/10/07/2019-10-07-【Spring Cloud 笔记和总结】二、注册中心Eureka/</id>
    <published>2019-10-07T13:05:12.000Z</published>
    <updated>2020-06-13T09:07:46.526Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、关于注册中心"><a href="#一、关于注册中心" class="headerlink" title="一、关于注册中心"></a>一、关于注册中心</h4><p><strong>主要功能如下</strong></p><ul><li><p>服务注册表：记录分布式架构中所有服务和服务地址的映射关系，用于服务直接相互调用    </p></li><li><p>服务注册与发现：服务启动时将自己的信息注册到注册中心；服务直接相互调用时从注册中心获取目标服务信息</p></li><li><p>服务健康检查 ：使用一定机制检查注册中心的服务是否正常，如果长时间无法访问，则将其移除</p><a id="more"></a></li></ul><p><strong>常见注册中心</strong></p><ul><li><p>Eureka</p></li><li><p>Consul</p></li><li><p>Zookeeper</p></li><li><p>Nacos<br>…<br><code>本文以Eureka为例，后续会更新其他注册中心</code></p><!--more--></li></ul><h4 id="二、主要内容"><a href="#二、主要内容" class="headerlink" title="二、主要内容"></a>二、主要内容</h4><p>结构如下<br><img src="https://img-blog.csdnimg.cn/20191112220323391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置文件<code>application.yml</code>如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-eureka</span> <span class="comment">#服务名称</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示是否将自己注册到Eureka Server，默认为true。</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span> <span class="comment">#表示是否从Eureka Server获取注册信息，默认为true。</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8000/eureka</span> <span class="comment">#服务地址，多个可用逗号【,】分隔</span></span><br></pre></td></tr></table></figure><p><code>pom</code>文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;exureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;exureka-server&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project <span class="keyword">for</span> Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下图所示，注册中心目前无服务注册<br><img src="https://img-blog.csdnimg.cn/20191112221221519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="三、集群高可用"><a href="#三、集群高可用" class="headerlink" title="三、集群高可用"></a>三、集群高可用</h4><p><code>C:\Windows\System32\drivers\etc\host</code>文件添加映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       center</span><br><span class="line">127.0.0.1       center1</span><br><span class="line">127.0.0.1       center2</span><br></pre></td></tr></table></figure><p>使用yml配置文件连接符<code>---</code>添加三个集群的节点<code>center、center1、center2</code>,修改后配置文件如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-eureka</span> <span class="comment">#服务名称</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示是否将自己注册到Eureka Server，默认为true。</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span> <span class="comment">#表示是否从Eureka Server获取注册信息，默认为true。</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8000/eureka/</span> <span class="comment">#服务地址，多个可用逗号【,】分隔</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">center</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">center</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment">#register-with-eureka: false #表示是否将自己注册到Eureka Server，默认为true。</span></span><br><span class="line">    <span class="comment">##fetch-registry: false #表示是否从Eureka Server获取注册信息，默认为true。</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://center1:8100/eureka/,http://center2:8200/eureka/</span> <span class="comment">#服务地址，多个可用逗号【,】分隔</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">center1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8100</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">center1</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://center:8000/eureka/,http://center2:8200/eureka/</span> <span class="comment">#服务地址，多个可用逗号【,】分隔</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">center2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8200</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">center2</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://center:8000/eureka/,http://center1:8100/eureka/</span> <span class="comment">#服务地址，多个可用逗号【,】分隔</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>启动：</p><ul><li>mvn package 打成jar包</li><li>cmd 切入到jar所在目录</li><li><p>分别运行：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center</span><br><span class="line">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center1</span><br><span class="line">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center2</span><br></pre></td></tr></table></figure></li><li><p>浏览器查看，集群搭建成功<br><img src="https://img-blog.csdnimg.cn/20191112230009761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="四、相关"><a href="#四、相关" class="headerlink" title="四、相关"></a>四、相关</h4></li><li>父模块介绍<a href="https://blog.csdn.net/qq_25283709/article/category/9462287" target="_blank" rel="noopener"><code>传送门</code></a></li><li>源码地址<a href="https://github.com/hdlxt/springcloud" target="_blank" rel="noopener"><code>传送门</code></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、关于注册中心&quot;&gt;&lt;a href=&quot;#一、关于注册中心&quot; class=&quot;headerlink&quot; title=&quot;一、关于注册中心&quot;&gt;&lt;/a&gt;一、关于注册中心&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;主要功能如下&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;服务注册表：记录分布式架构中所有服务和服务地址的映射关系，用于服务直接相互调用    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务注册与发现：服务启动时将自己的信息注册到注册中心；服务直接相互调用时从注册中心获取目标服务信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务健康检查 ：使用一定机制检查注册中心的服务是否正常，如果长时间无法访问，则将其移除&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/categories/Spring/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="http://blog.yuanlife.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="http://blog.yuanlife.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="注册中心" scheme="http://blog.yuanlife.cn/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
      <category term="Eureka" scheme="http://blog.yuanlife.cn/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&amp;Spring Cloud Greenwich.RELEASE）</title>
    <link href="http://blog.yuanlife.cn/2019/10/01/2019-10-01-%E3%80%90Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93%E3%80%91%E4%B8%80%E3%80%81%E5%86%99%E5%9C%A8%E5%BC%80%E5%A4%B4%EF%BC%8C%E5%86%85%E5%AE%B9%E7%AE%80%E8%BF%B0%EF%BC%88Spring%20Boot%202.1.1&amp;Spring%20Cloud%20Greenwich.RELEASE%EF%BC%89%20-%20%E5%89%AF%E6%9C%AC%20(2)/"/>
    <id>http://blog.yuanlife.cn/2019/10/01/2019-10-01-【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&amp;Spring Cloud Greenwich.RELEASE） - 副本 (2)/</id>
    <published>2019-10-01T12:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.526Z</updated>
    
    <content type="html"><![CDATA[<p>今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。</p><a id="more"></a><ul><li>之前的源码地址<a href="https://github.com/hdlxt/springcloud" target="_blank" rel="noopener"><code>传送门</code></a><ul><li>版本<ul><li>jdk1.8</li><li>Spring Boot ：2.1.1.RELEASE</li><li>Spring Cloud ： Greenwich.RELEASE</li></ul></li></ul></li><li><p>计划</p><ul><li>以博客笔记形式回顾一遍,以代码实现为主</li><li>更换其中部分技术</li></ul></li><li><p>项目maven多模块，如下图所示<br><img src="https://img-blog.csdnimg.cn/20191122210944629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li>所有子模块都继承父模块<code>spring cloud</code>依赖，如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class="line">                &lt;<span class="built_in">type</span>&gt;pom&lt;/<span class="built_in">type</span>&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ul><li>参考<ul><li>《Spring Cloud和Docker微服务架构实战》</li><li><a href="http://www.ityouknow.com/spring-cloud.html" target="_blank" rel="noopener">http://www.ityouknow.com/spring-cloud.html</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/categories/Spring/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="http://blog.yuanlife.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="http://blog.yuanlife.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&amp;Spring Cloud Greenwich.RELEASE）</title>
    <link href="http://blog.yuanlife.cn/2019/10/01/2019-11-13-%E3%80%90Spring%20Cloud%20%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93%E3%80%91%E4%B8%80%E3%80%81%E5%86%99%E5%9C%A8%E5%BC%80%E5%A4%B4%EF%BC%8C%E5%86%85%E5%AE%B9%E7%AE%80%E8%BF%B0%EF%BC%88Spring%20Boot%202.1.1&amp;Spring%20Cloud%20Greenwich.RELEASE%EF%BC%89/"/>
    <id>http://blog.yuanlife.cn/2019/10/01/2019-11-13-【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&amp;Spring Cloud Greenwich.RELEASE）/</id>
    <published>2019-10-01T12:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.531Z</updated>
    
    <content type="html"><![CDATA[<p>今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。</p><a id="more"></a><ul><li>之前的源码地址<a href="https://github.com/hdlxt/springcloud" target="_blank" rel="noopener"><code>传送门</code></a><ul><li>版本<ul><li>jdk1.8</li><li>Spring Boot ：2.1.1.RELEASE</li><li>Spring Cloud ： Greenwich.RELEASE</li></ul></li></ul></li><li><p>计划</p><ul><li>以博客笔记形式回顾一遍,以代码实现为主</li><li>更换其中部分技术</li></ul></li><li><p>项目maven多模块，如下图所示<br><img src="https://img-blog.csdnimg.cn/20191122210944629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li>所有子模块都继承父模块<code>spring cloud</code>依赖，如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class="line">                &lt;<span class="built_in">type</span>&gt;pom&lt;/<span class="built_in">type</span>&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ul><li>参考<ul><li>《Spring Cloud和Docker微服务架构实战》</li><li><a href="http://www.ityouknow.com/spring-cloud.html" target="_blank" rel="noopener">http://www.ityouknow.com/spring-cloud.html</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/categories/Spring/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://blog.yuanlife.cn/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="http://blog.yuanlife.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="http://blog.yuanlife.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot &amp; 极验验证滑动验证码</title>
    <link href="http://blog.yuanlife.cn/2019/03/04/2019-03-04-Spring%20Boot%20&amp;%20%E6%9E%81%E9%AA%8C%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81/"/>
    <id>http://blog.yuanlife.cn/2019/03/04/2019-03-04-Spring Boot &amp; 极验滑动验证/</id>
    <published>2019-03-04T12:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.525Z</updated>
    
    <content type="html"><![CDATA[<p>基于极验验证官网 java版<a href="https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip" target="_blank" rel="noopener">gt3-java-sdk</a>改编,使用Spring Boot 整合的极验滑动验证，包含form表单登录和ajax登录两种情况。</p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#1"><strong>注册账户获取ID和KEY</strong></a></li><li><a href="#2"><strong>Demo源码说明</strong></a></li><li><a href="#3"><strong>Demo演示</strong></a></li><li><a href="#4"><strong>源码地址</strong></a></li></ul><hr><h2 id="1">注册账户获取ID和KEY</h2><p>1.进入<a href="https://www.geetest.com/" target="_blank" rel="noopener">官网</a>注册账户</p><p><img src="/images/20190304/1.png" alt="1"></p><p>2.登录后台选择<code>行为认证</code></p><p><img src="/images/20190304/2.png" alt="2"></p><p>3.增加认证</p><p><img src="/images/20190304/3.png" alt="3"></p><p>4.输入信息</p><p><img src="/images/20190304/4.png" alt="3"></p><p>5.获取ID和KEY</p><p><img src="/images/20190304/5.png" alt="4"></p><h2 id="2">Demo源码说明</h2><p>1.Demo结构</p><p><img src="/images/20190304/6.png" alt="6"></p><p>2.关键代码说明</p><ul><li>sdk包下类和gt.js为极验验证官方提供</li><li><p>GeetestConfig.java：ID和KEY配置位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 填入自己的captcha_id和private_key</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String geetest_id = <span class="string">"978b73ea94b4393026524553045ed2ab"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String geetest_key = <span class="string">"7cd60bfef0a65a78ace8ba085aad023d"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> newfailback = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">getGeetest_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> geetest_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">getGeetest_key</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> geetest_key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isnewfailback</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> newfailback;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>GeeTestUtil.java：自定义极验验证工具类，对用户操作结果进行验证</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpSession</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> challenge</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> validate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seccode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(HttpSession httpSession,String challenge, String validate, String seccode)</span></span>&#123;</span><br><span class="line">        GeetestLib gtSdk = <span class="keyword">new</span> GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),</span><br><span class="line">                GeetestConfig.isnewfailback());</span><br><span class="line">        <span class="comment">//从session中获取gt-server状态</span></span><br><span class="line">        <span class="keyword">int</span> gt_server_status_code = (Integer) httpSession.getAttribute(gtSdk.gtServerStatusSessionKey);</span><br><span class="line">        <span class="comment">//从session中获取userid</span></span><br><span class="line">        String userid = (String)httpSession.getAttribute(<span class="string">"userid"</span>);</span><br><span class="line">        <span class="comment">//自定义参数,可选择添加</span></span><br><span class="line">        HashMap&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        param.put(<span class="string">"user_id"</span>, userid); <span class="comment">//网站用户id</span></span><br><span class="line">        param.put(<span class="string">"client_type"</span>, <span class="string">"web"</span>); <span class="comment">//web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式</span></span><br><span class="line">        param.put(<span class="string">"ip_address"</span>, <span class="string">"127.0.0.1"</span>); <span class="comment">//传输用户请求验证时所携带的IP</span></span><br><span class="line">        <span class="keyword">int</span> gtResult = RESULT_FAIL;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (gt_server_status_code == GT_SERVER_STATUS_CODE_OK) &#123;</span><br><span class="line">            <span class="comment">//gt-server正常，向gt-server进行二次验证</span></span><br><span class="line">            gtResult = gtSdk.enhencedValidateRequest(challenge, validate, seccode, param);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// gt-server非正常情况下，进行failback模式验证</span></span><br><span class="line">            System.out.println(<span class="string">"failback:use your own server captcha validate"</span>);</span><br><span class="line">            gtResult = gtSdk.failbackValidateRequest(challenge, validate, seccode);</span><br><span class="line">            System.out.println(gtResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gtResult == RESULT_OK;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>GeetTestController.java：注册验证码，获取流水号，加载验证码时调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 验证1初始化</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"register1"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">register1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       GeetestLib gtSdk = <span class="keyword">new</span> GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),</span><br><span class="line">               GeetestConfig.isnewfailback());</span><br><span class="line">       String resStr = <span class="string">"&#123;&#125;"</span>;</span><br><span class="line">       String userid = <span class="string">"test"</span>;</span><br><span class="line">       <span class="comment">//自定义参数,可选择添加</span></span><br><span class="line">       HashMap&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">       param.put(<span class="string">"user_id"</span>, userid); <span class="comment">//网站用户id</span></span><br><span class="line">       param.put(<span class="string">"client_type"</span>, <span class="string">"web"</span>); <span class="comment">//web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式</span></span><br><span class="line">       param.put(<span class="string">"ip_address"</span>, <span class="string">"127.0.0.1"</span>); <span class="comment">//传输用户请求验证时所携带的IP</span></span><br><span class="line">       <span class="comment">//进行验证预处理</span></span><br><span class="line">       <span class="keyword">int</span> gtServerStatus = gtSdk.preProcess(param);</span><br><span class="line">       <span class="comment">//将服务器状态设置到session中</span></span><br><span class="line">       httpSession.setAttribute(gtSdk.gtServerStatusSessionKey, gtServerStatus);</span><br><span class="line">       <span class="comment">//将userid设置到session中</span></span><br><span class="line">       httpSession.setAttribute(<span class="string">"userid"</span>, userid);</span><br><span class="line">       resStr = gtSdk.getResponseStr();</span><br><span class="line">       <span class="keyword">return</span> resStr;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 验证2 二次验证</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"register2"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">register2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       GeetestLib gtSdk = <span class="keyword">new</span> GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),</span><br><span class="line">               GeetestConfig.isnewfailback());</span><br><span class="line">       String resStr = <span class="string">"&#123;&#125;"</span>;</span><br><span class="line">       <span class="comment">//自定义userid</span></span><br><span class="line">       String userid = <span class="string">"test"</span>;</span><br><span class="line">       <span class="comment">//自定义参数,可选择添加</span></span><br><span class="line">       HashMap&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">       param.put(<span class="string">"user_id"</span>, userid); <span class="comment">//网站用户id</span></span><br><span class="line">       param.put(<span class="string">"client_type"</span>, <span class="string">"web"</span>); <span class="comment">//web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式</span></span><br><span class="line">       param.put(<span class="string">"ip_address"</span>, <span class="string">"127.0.0.1"</span>); <span class="comment">//传输用户请求验证时所携带的IP</span></span><br><span class="line">       <span class="comment">//进行验证预处理</span></span><br><span class="line">       <span class="keyword">int</span> gtServerStatus = gtSdk.preProcess(param);</span><br><span class="line">       <span class="comment">//将服务器状态设置到session中</span></span><br><span class="line">       httpSession.setAttribute(gtSdk.gtServerStatusSessionKey, gtServerStatus);</span><br><span class="line">       <span class="comment">//将userid设置到session中</span></span><br><span class="line">       httpSession.setAttribute(<span class="string">"userid"</span>, userid);</span><br><span class="line">       resStr = gtSdk.getResponseStr();</span><br><span class="line">       <span class="keyword">return</span> resStr;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>LoginController.java：登录验证类，控制验证码和账号密码验证结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *模拟表单登录</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> geetest_challenge</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> geetest_validate</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> geetest_seccode</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> password1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/loginForm"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">loginForm</span><span class="params">(Model model,String geetest_challenge, String geetest_validate, String geetest_seccode</span></span></span><br><span class="line"><span class="function"><span class="params">           ,String username1, String password1)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!GeeTestUtil.validate(httpSession,geetest_challenge,geetest_validate,geetest_seccode))&#123;</span><br><span class="line">           model.addAttribute(<span class="string">"result"</span>,<span class="string">"验证失败!!!"</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(<span class="string">"admin1"</span>.equals(username1) &amp;&amp; <span class="string">"admin1"</span>.equals(password1))&#123;</span><br><span class="line">           model.addAttribute(<span class="string">"result"</span>,<span class="string">"登录成功!!!"</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           model.addAttribute(<span class="string">"result"</span>,<span class="string">"登录失败!!!"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 模拟AJAX登录</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> geetest_challenge</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> geetest_validate</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> geetest_seccode</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> password2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/loginAJAX"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">loginAJAX</span><span class="params">(String geetest_challenge, String geetest_validate, String geetest_seccode</span></span></span><br><span class="line"><span class="function"><span class="params">           ,String username2, String password2)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!GeeTestUtil.validate(httpSession,geetest_challenge,geetest_validate,geetest_seccode))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"验证失败!!!"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(<span class="string">"admin2"</span>.equals(username2) &amp;&amp; <span class="string">"admin2"</span>.equals(password2))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"登录成功!!!"</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"登录失败!!!"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>login.html：登录界面和验证码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login/loginForm"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>大图点击Demo，使用表单进行二次验证<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username1"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"inp"</span> <span class="attr">id</span>=<span class="string">"username1"</span> <span class="attr">name</span>=<span class="string">"username1"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"admin1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password1"</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"inp"</span> <span class="attr">id</span>=<span class="string">"password1"</span> <span class="attr">name</span>=<span class="string">"password1"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>完成验证：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"captcha1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"wait1"</span> <span class="attr">class</span>=<span class="string">"show"</span>&gt;</span>正在加载验证码......<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"notice1"</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>请先完成验证<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">id</span>=<span class="string">"submit1"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>滑动demo，使用ajax进行二次验证<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username2"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"inp"</span> <span class="attr">id</span>=<span class="string">"username2"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"admin2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password2"</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"inp"</span> <span class="attr">id</span>=<span class="string">"password2"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>完成验证：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"captcha2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"wait2"</span> <span class="attr">class</span>=<span class="string">"show"</span>&gt;</span>正在加载验证码......<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"notice2"</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>请先完成验证<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">id</span>=<span class="string">"submit2"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意，验证码本身是不需要 jquery 库，此处使用 jquery 仅为了在 demo 使用，减少代码量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/1.9.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入 gt.js，既可以使用其中提供的 initGeetest 初始化函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"gt.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var handler1 = function (captchaObj) &#123;</span></span><br><span class="line"><span class="undefined">        $("#submit1").click(function (e) &#123;</span></span><br><span class="line"><span class="undefined">            var result = captchaObj.getValidate();</span></span><br><span class="line"><span class="undefined">            if (!result) &#123;</span></span><br><span class="line"><span class="undefined">                $("#notice1").show();</span></span><br><span class="line"><span class="undefined">                setTimeout(function () &#123;</span></span><br><span class="line"><span class="undefined">                    $("#notice1").hide();</span></span><br><span class="line"><span class="undefined">                &#125;, 2000);</span></span><br><span class="line"><span class="undefined">                e.preventDefault();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        // 将验证码加到id为captcha的元素里，同时会有三个input的值用于表单提交</span></span><br><span class="line"><span class="undefined">        captchaObj.appendTo("#captcha1");</span></span><br><span class="line"><span class="undefined">        captchaObj.onReady(function () &#123;</span></span><br><span class="line"><span class="undefined">            $("#wait1").hide();</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">        url: "geetTest/register1?t=" + (new Date()).getTime(), // 加随机数防止缓存</span></span><br><span class="line"><span class="undefined">        type: "get",</span></span><br><span class="line"><span class="undefined">        dataType: "json",</span></span><br><span class="line"><span class="undefined">        success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">            // 调用 initGeetest 初始化参数</span></span><br><span class="line"><span class="undefined">            // 参数1：配置参数</span></span><br><span class="line"><span class="undefined">            // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它调用相应的接口</span></span><br><span class="line"><span class="undefined">            initGeetest(&#123;</span></span><br><span class="line"><span class="undefined">                gt: data.gt,</span></span><br><span class="line"><span class="undefined">                challenge: data.challenge,</span></span><br><span class="line"><span class="undefined">                new_captcha: data.new_captcha, // 用于宕机时表示是新验证码的宕机</span></span><br><span class="line"><span class="undefined">                offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注</span></span><br><span class="line"><span class="undefined">                product: "float", // 产品形式，包括：float，popup</span></span><br><span class="line"><span class="undefined">                width: "100%"</span></span><br><span class="line"><span class="undefined">                // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config</span></span><br><span class="line"><span class="undefined">            &#125;, handler1);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var handler2 = function (captchaObj) &#123;</span></span><br><span class="line"><span class="undefined">        $("#submit2").click(function (e) &#123;</span></span><br><span class="line"><span class="undefined">            var result = captchaObj.getValidate();</span></span><br><span class="line"><span class="undefined">            if (!result) &#123;</span></span><br><span class="line"><span class="undefined">                $("#notice2").show();</span></span><br><span class="line"><span class="undefined">                setTimeout(function () &#123;</span></span><br><span class="line"><span class="undefined">                    $("#notice2").hide();</span></span><br><span class="line"><span class="undefined">                &#125;, 2000);</span></span><br><span class="line"><span class="undefined">            &#125; else &#123;</span></span><br><span class="line"><span class="undefined">                $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">                    url: 'login/loginAJAX',</span></span><br><span class="line"><span class="undefined">                    type: 'POST',</span></span><br><span class="line"><span class="undefined">                    // dataType: 'json',</span></span><br><span class="line"><span class="undefined">                    data: &#123;</span></span><br><span class="line"><span class="undefined">                        username2: $('#username2').val(),</span></span><br><span class="line"><span class="undefined">                        password2: $('#password2').val(),</span></span><br><span class="line"><span class="undefined">                        geetest_challenge: result.geetest_challenge,</span></span><br><span class="line"><span class="undefined">                        geetest_validate: result.geetest_validate,</span></span><br><span class="line"><span class="undefined">                        geetest_seccode: result.geetest_seccode</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="undefined">                    success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">                        alert(data);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            e.preventDefault();</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        // 将验证码加到id为captcha的元素里，同时会有三个input的值用于表单提交</span></span><br><span class="line"><span class="undefined">        captchaObj.appendTo("#captcha2");</span></span><br><span class="line"><span class="undefined">        captchaObj.onReady(function () &#123;</span></span><br><span class="line"><span class="undefined">            $("#wait2").hide();</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">        url: "geetTest/register2?t=" + (new Date()).getTime(), // 加随机数防止缓存</span></span><br><span class="line"><span class="undefined">        type: "get",</span></span><br><span class="line"><span class="undefined">        dataType: "json",</span></span><br><span class="line"><span class="undefined">        success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">            // 调用 initGeetest 初始化参数</span></span><br><span class="line"><span class="undefined">            // 参数1：配置参数</span></span><br><span class="line"><span class="undefined">            // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它调用相应的接口</span></span><br><span class="line"><span class="undefined">            initGeetest(&#123;</span></span><br><span class="line"><span class="undefined">                gt: data.gt,</span></span><br><span class="line"><span class="undefined">                challenge: data.challenge,</span></span><br><span class="line"><span class="undefined">                new_captcha: data.new_captcha, // 用于宕机时表示是新验证码的宕机</span></span><br><span class="line"><span class="undefined">                offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注</span></span><br><span class="line"><span class="undefined">                product: "popup", // 产品形式，包括：float，popup</span></span><br><span class="line"><span class="undefined">                width: "100%"</span></span><br><span class="line"><span class="undefined">                // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config</span></span><br><span class="line"><span class="undefined">            &#125;, handler2);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3">Demo演示</h2><p>1.登录界面，正在加载的验证码</p><p><img src="/images/20190304/7.png" alt="7"></p><p>2.验证码展示</p><p><img src="/images/20190304/8.png" alt="8"></p><p>3.验证成功之后，提交跳转到登录页面，再次点击提交显示验证失败，一个验证码只能使用一次。（AJAX登录同理）</p><p><img src="/images/20190304/9.png" alt="9"></p><p><img src="/images/20190304/10.png" alt="10"></p><h2 id="4">源码地址</h2><ul><li><a href="https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip" target="_blank" rel="noopener">官网Demo gt3-java-sdk</a></li><li>github:   <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:hdlxt/lxtDaily.git</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于极验验证官网 java版&lt;a href=&quot;https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gt3-java-sdk&lt;/a&gt;改编,使用Spring Boot 整合的极验滑动验证，包含form表单登录和ajax登录两种情况。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.yuanlife.cn/tags/Spring-Boot/"/>
    
      <category term="极验验证" scheme="http://blog.yuanlife.cn/tags/%E6%9E%81%E9%AA%8C%E9%AA%8C%E8%AF%81/"/>
    
      <category term="滑动验证码" scheme="http://blog.yuanlife.cn/tags/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA实体的生命周期总结</title>
    <link href="http://blog.yuanlife.cn/2019/01/19/2019-01-19-Spring%20Data%20JPA%E5%AE%9E%E4%BD%93%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.yuanlife.cn/2019/01/19/2019-01-19-Spring Data JPA实体的生命周期总结/</id>
    <published>2019-01-19T01:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.525Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Data JPA是对JPA规范的再次封装和抽象，底层使用HIbernate JPA实现，Hibernate实体有三种状态，而Spring Data JPA实体生命周期也有类似的瞬时、托管、删除、游离四种状态，本文记录对实体四种状态的理解和验证过程。<br><a id="more"></a></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#1"><strong>四种状态</strong></a></p></li><li><p><a href="#2"><strong>API示例</strong></a></p><ul><li><a href="#2.1"><strong>persist</strong></a></li><li><a href="#2.2"><strong>remove</strong></a></li><li><a href="#2.3"><strong>merge</strong></a></li><li><a href="#2.4"><strong>refresh</strong></a></li></ul></li><li><p><a href="#3"><strong>参考链接</strong></a></p></li></ul><hr><h2 id="1">四种状态</h2><p>首先以一张图，简单介绍写实体生命周期中四种状态之间的转换关系：</p><p><img src="/images/20190120/jpa-entity.png" alt="jpa-entity"></p><p><strong>瞬时（New）：</strong>瞬时对象，刚New出来的对象，无id，还未和持久化上下文（Persistence Context）建立关联。</p><p><strong>托管（Managed）：</strong>托管对象，有id，已和持久化上下文（Persistence Context）建立关联，对象属性的所有改动均会影响到数据库中对应记录。</p><ul><li>瞬时对象调用em.persist（）方法之后，对象由瞬时状态转换为托管状态</li><li>通过find、get、query等方法，查询出来的对象为托管状态</li><li>游离状态的对象调用em.merge方法，对象由游离状态转换为托管状态</li></ul><p><strong>游离（Datached）：</strong>游离对象，有id值，但没有和持久化上下文（Persistence Context）建立关联。</p><ul><li>托管状态对象提交事务之后，对象状态由托管状态转换为游离状态</li><li>托管状态对象调用em.clear()方法之后，对象状态由托管状态转换为游离状态</li><li>New出来的对象，id赋值之后，也为游离状态</li></ul><p><strong>删除（Removed）：</strong>执行删除方法（em.remove()）但未提交事务的对象，有id值，没有和持久化上下文（Persistence Context）建立关联，即将从数据库中删除。</p><h2 id="2">API示例</h2><blockquote><p>针对JPA规范的四个方法，写了一个简单的Demo，进行了一一的验证，以下进行验证过程说明，完整代码传送门：<a href="https://github.com/hdlxt/SpringDataJpaDemo.git" target="_blank" rel="noopener">https://github.com/hdlxt/SpringDataJpaDemo.git</a></p></blockquote><p>整体结构如下：</p><p><img src="/images/20190124/demo.png" alt="com.example.demo.controller"></p><h3 id="2.1">persist</h3><p><strong>不同状态下执行em.persist()方法产生结果：</strong></p><ul><li>瞬时态：转化为托管态</li><li>托管态：不发生改变，但执行instert语句</li><li>删除态：转化为托管态</li><li>游离态：<strong>抛异常</strong></li></ul><p><strong>验证删除态和游离态持久化如下</strong>:</p><p><strong>1.持久化删除态</strong></p><ul><li>代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 持久化删除态的对象</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/persistRemove/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">persistRemove</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = userDao.findById(id);</span><br><span class="line">            userDao.persistRemove(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"持久化一个删除态的对象!"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化删除态的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">persistRemove</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        remove(user);</span><br><span class="line">        persist(user);</span><br><span class="line">        user.setName(<span class="string">"persist remove success!"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤<ul><li><a href="http://localhost:8080/user/persisNew/lxt/001，插入一条数据" target="_blank" rel="noopener">http://localhost:8080/user/persisNew/lxt/001，插入一条数据</a></li><li><a href="http://localhost:8080/user/list，检查插入结果，并获取`id`" target="_blank" rel="noopener">http://localhost:8080/user/list，检查插入结果，并获取`id`</a></li><li><a href="http://localhost:8080/user/persistRemove/{id}" target="_blank" rel="noopener">http://localhost:8080/user/persistRemove/{id}</a> ,返回<code>SUCCESS！</code></li><li><a href="http://localhost:8080/user/list" target="_blank" rel="noopener">http://localhost:8080/user/list</a>  查看结果</li></ul></li><li>结果：结果数据并未删除，而且<code>name</code>由<code>lxt</code>变为<code>persist remove success!</code></li></ul><p><strong>2.持久化游离态</strong></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 持久化游离态的对象</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"/persisDetached/&#123;id&#125;"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">persisDetached</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         User user = userDao.findById(id);</span><br><span class="line">         userDao.clear();</span><br><span class="line">         userDao.persist(user);</span><br><span class="line">     &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">         logger.error(<span class="string">"持久化一个游离态的对象!"</span>,e);</span><br><span class="line">         <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>步骤</p><ul><li><a href="http://localhost:8080/user/list，获取`id`" target="_blank" rel="noopener">http://localhost:8080/user/list，获取`id`</a></li><li><a href="http://localhost:8080/user/persisDetached/{id}" target="_blank" rel="noopener">http://localhost:8080/user/persisDetached/{id}</a> 返回<code>ERROR！</code></li></ul></li><li><p>结果：抛异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">26</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">34.090</span> ERROR <span class="number">5228</span> --- [io-<span class="number">8080</span>-exec-<span class="number">10</span>] c.e.demo.controller.UserController       : 持久化一个游离态的对象!</span><br><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.example.demo.entity.User; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.example.demo.entity.User</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:<span class="number">317</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class="number">253</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class="number">527</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class="number">61</span>) ~[spring-tx-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:<span class="number">242</span>) ~[spring-tx-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure></li></ul><h3 id="2.2">remove</h3><p><strong>不同状态下执行em.remove()方法产生结果：</strong></p><ul><li>瞬时态：对状态无影响，后台打印日志</li><li>托管态：转化为托管态</li><li>删除态：无影响，什么都不发生</li><li>游离态：抛异常<code>Removing a detached instance com.example.demo.entity.User...</code></li></ul><p><strong>验证过程如下：</strong></p><p><strong>1.瞬时态</strong></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除new出来的对象</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/removeNew"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">removeNew</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setName(<span class="string">"lxt"</span>).setNumber(<span class="string">"007"</span>);</span><br><span class="line">        userDao.remove(user);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        logger.error(<span class="string">"删除(remove)一个new的对象!"</span>,e);</span><br><span class="line">        <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>步骤</p><ul><li><a href="http://localhost:8080/user/removeNew" target="_blank" rel="noopener">http://localhost:8080/user/removeNew</a></li></ul></li><li><p>结果：返回<code>SUCCESS!</code>后台输出日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">26</span> <span class="number">00</span>:<span class="number">17</span>:<span class="number">32.811</span>  INFO <span class="number">10136</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">5</span>] o.h.e.i.DefaultDeleteEventListener       : HHH000114: Handling <span class="keyword">transient</span> entity in delete processing</span><br></pre></td></tr></table></figure></li></ul><p><strong>2.删除态</strong></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 删除态对象</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/removeRemove/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeRemove</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = userDao.findById(id);</span><br><span class="line">            userDao.removeRemove(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"删除(remove)一个删除态的对象!"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 删除态的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeRemove</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        remove(user);</span><br><span class="line">        remove(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>步骤</p><ul><li><a href="http://localhost:8080/user/list，获取`id`" target="_blank" rel="noopener">http://localhost:8080/user/list，获取`id`</a></li><li><a href="http://localhost:8080/user/removeRemove/{id}" target="_blank" rel="noopener">http://localhost:8080/user/removeRemove/{id}</a> </li></ul></li><li><p>结果：返回<code>SUCCESS！</code>，后台输出一个查询sql和一个删除sql，证明第二个删除没有影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?</span><br><span class="line">Hibernate: delete from t_user where id=?</span><br></pre></td></tr></table></figure></li></ul><p><strong>3.游离态</strong></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除游离态对象</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/removeDetached/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDetached</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = userDao.findById(id);</span><br><span class="line">            userDao.removeDetached(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"删除(remove)一个游离态的对象!"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除游离态的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeDetached</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        clear();</span><br><span class="line">        remove(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>步骤</p><ul><li><a href="http://localhost:8080/user/list，获取`id`" target="_blank" rel="noopener">http://localhost:8080/user/list，获取`id`</a></li><li><a href="http://localhost:8080/user/persisDetached/{id}" target="_blank" rel="noopener">http://localhost:8080/user/persisDetached/{id}</a> </li></ul></li><li><p>结果：返回<code>ERROR!</code>抛异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2019-01-26 00:14:11.071 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 删除(remove)一个游离态的对象!</span><br><span class="line"></span><br><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: Removing a detached instance com.example.demo.entity.User#5; nested exception is java.lang.IllegalArgumentException: Removing a detached instance com.example.demo.entity.User#5</span><br><span class="line">at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class="line">at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class="line">at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br></pre></td></tr></table></figure></li></ul><h3 id="2.3">merge</h3><p><strong>不同状态下执行em.merge()方法产生结果：</strong></p><ul><li>瞬时态：提交到数据库，返回一个新的托管态的对象</li><li>托管态：根据原对象返回一个新的托管态的对象</li><li>删除态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]...</code></li><li>游离态：提交到数据库，进行更新或插入，返回一个新的托管态的对象</li></ul><p><strong>合并（merge）删除态和游离态验证过程如下：</strong></p><p><strong>1.删除态</strong></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化删除态的对象</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/mergeRemove/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mergeRemove</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = userDao.findById(id);</span><br><span class="line">            userDao.mergeRemove(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"合并(merge)一个删除态的对象!"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并删除态的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeRemove</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        remove(user);</span><br><span class="line">        merge(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>步骤</p><ul><li><a href="http://localhost:8080/user/list，获取`id`" target="_blank" rel="noopener">http://localhost:8080/user/list，获取`id`</a></li><li><a href="http://localhost:8080/user/mergeRemove/{id}" target="_blank" rel="noopener">http://localhost:8080/user/mergeRemove/{id}</a></li></ul></li><li><p>结果：返回<code>ERROR</code>抛异常！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">26</span> <span class="number">00</span>:<span class="number">23</span>:<span class="number">01.187</span>  INFO <span class="number">10136</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">3</span>] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory</span><br><span class="line">Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">26</span> <span class="number">00</span>:<span class="number">23</span>:<span class="number">01.322</span> ERROR <span class="number">10136</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">3</span>] c.e.demo.controller.UserController       : 合并(merge)一个删除态的对象!</span><br><span class="line"></span><br><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]; nested exception is java.lang.IllegalArgumentException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]</span><br><span class="line">at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class="number">373</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class="number">255</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class="number">527</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class="number">61</span>) ~[spring-tx-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure></li></ul><p><strong>2.游离态</strong></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化游离态的对象</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/mergeDetached/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mergeDetached</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = userDao.findById(id);</span><br><span class="line">            userDao.mergeDetached(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"合并(merge)一个游离态的对象!"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并游离态的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeDetached</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        clear();</span><br><span class="line">        User newUser = merge(user);</span><br><span class="line">        newUser.setName(<span class="string">"newUser merge detached success!"</span>);</span><br><span class="line">        user.setName(<span class="string">"user merge detached success!"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>步骤</p><ul><li><a href="http://localhost:8080/user/list，获取`id`" target="_blank" rel="noopener">http://localhost:8080/user/list，获取`id`</a></li><li><a href="http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`" target="_blank" rel="noopener">http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`</a></li><li><a href="http://localhost:8080/user/list，查看" target="_blank" rel="noopener">http://localhost:8080/user/list，查看</a></li></ul></li><li><p>结果:对应实体的<code>name</code>值变为<code>newUser merge detached success!</code>，证明返回新的对象为托管态对象</p></li></ul><p><strong>2.游离态</strong></p><h3 id="2.4">refresh</h3><blockquote><p>方法可以保证当前的实例与数据库中的实例的内容一致，<strong>注意：是反向同步，将数据库中的数据同步到实体中</strong></p></blockquote><p><strong>不同状态下执行em.refresh()方法产生结果：</strong></p><ul><li>瞬时态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li><li>托管态： 将数据库中的数据同步到实体中，返回一个托管态的对象。</li><li>删除态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li><li>游离态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li></ul><p><strong>总结：</strong>只有被托管的对象才可以被refresh。</p><p><strong>1.瞬时态</strong></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 刷新new出来的对象</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/refreshNew"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">refreshNew</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setName(<span class="string">"lxt"</span>).setNumber(<span class="string">"007"</span>);</span><br><span class="line">        userDao.refresh(user);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        logger.error(<span class="string">"刷新(refresh)一个new的对象!"</span>,e);</span><br><span class="line">        <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>步骤</p><ul><li><a href="http://localhost:8080/user/refreshNew" target="_blank" rel="noopener">http://localhost:8080/user/refreshNew</a></li></ul></li><li><p>结果：返回<code>ERROR!</code>抛异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">26</span> <span class="number">00</span>:<span class="number">38</span>:<span class="number">18.037</span> ERROR <span class="number">10136</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">3</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个<span class="keyword">new</span>的对象!</span><br><span class="line"></span><br><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class="line">at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class="number">373</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class="number">255</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class="number">527</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class="number">61</span>) ~[spring-tx-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure></li></ul><p><strong>2.托管态：</strong></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新托管态对象</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/refreshManaged/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">refreshManaged</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = userDao.findById(id);</span><br><span class="line">            userDao.refreshManaged(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"刷新(refresh)一个托管态的对象!"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新托管态的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshManaged</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        user.setName(<span class="string">"refresh before!"</span>);</span><br><span class="line">        refresh(user);</span><br><span class="line">        logger.info(<span class="string">"user:"</span>+user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>步骤</p><ul><li><a href="http://localhost:8080/user/list，获取`id`" target="_blank" rel="noopener">http://localhost:8080/user/list，获取`id`</a></li><li><a href="http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`" target="_blank" rel="noopener">http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`</a></li><li><a href="http://localhost:8080/user/list" target="_blank" rel="noopener">http://localhost:8080/user/list</a></li></ul></li><li><p>结果:数据库中数据并无变化，日志打印为数据库中查询出的值，并未打印<code>refresh before!</code></p></li></ul><p><strong>3.删除态</strong></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新删除态对象</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/refreshRemove/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">refreshRemove</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = userDao.findById(id);</span><br><span class="line">            userDao.refreshRemove(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"刷新(refresh)一个删除态的对象!"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">----------------------------------------------------------------------   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新删除态的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshRemove</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">       remove(user);</span><br><span class="line">       user.setName(<span class="string">"refresh remove before！"</span>);</span><br><span class="line">       refresh(user);</span><br><span class="line">        user.setName(<span class="string">"refresh remove after！"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>步骤</p><ul><li><a href="http://localhost:8080/user/list，获取`id`" target="_blank" rel="noopener">http://localhost:8080/user/list，获取`id`</a></li><li><a href="http://localhost:8080/user/refreshRemove/{id}" target="_blank" rel="noopener">http://localhost:8080/user/refreshRemove/{id}</a></li></ul></li><li><p>结果：返回<code>ERROR!</code>抛异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">26</span> <span class="number">00</span>:<span class="number">40</span>:<span class="number">57.713</span> ERROR <span class="number">10136</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">3</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个删除态的对象!</span><br><span class="line"></span><br><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class="line">at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class="number">373</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class="number">255</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class="number">527</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class="number">61</span>) ~[spring-tx-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure></li></ul><p><strong>4.游离态</strong></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新游离态对象</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/refreshDetached/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">refreshDetached</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = userDao.findById(id);</span><br><span class="line">            userDao.refreshDetached(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"刷新(refresh)一个游离态的对象!"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> REPONSE_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REPONSE_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新游离态的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshDetached</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        clear();</span><br><span class="line">        refresh(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>步骤</p><ul><li><a href="http://localhost:8080/user/list，获取`id`" target="_blank" rel="noopener">http://localhost:8080/user/list，获取`id`</a></li><li><a href="http://localhost:8080/user/refreshDetached/{id},`" target="_blank" rel="noopener">http://localhost:8080/user/refreshDetached/{id},`</a></li></ul></li><li><p>结果:返回<code>ERROR！</code>抛异常！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">26</span> <span class="number">00</span>:<span class="number">42</span>:<span class="number">09.598</span> ERROR <span class="number">10136</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">7</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个游离态的对象!</span><br><span class="line"></span><br><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class="line">at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class="number">373</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class="number">255</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class="number">527</span>) ~[spring-orm-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br><span class="line">at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class="number">61</span>) ~[spring-tx-<span class="number">5.1</span>.4.RELEASE.jar:<span class="number">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure></li></ul><h2 id="3">参考链接</h2><ul><li><a href="https://blog.csdn.net/javavenus/article/details/6289616" target="_blank" rel="noopener">JPA EntityManager的四个主要方法 ——persist,merge,refresh和remove</a></li><li><a href="https://blog.csdn.net/yingxiake/article/details/50968059" target="_blank" rel="noopener">JPA 实体生命周期理解和总结</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Data JPA是对JPA规范的再次封装和抽象，底层使用HIbernate JPA实现，Hibernate实体有三种状态，而Spring Data JPA实体生命周期也有类似的瞬时、托管、删除、游离四种状态，本文记录对实体四种状态的理解和验证过程。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
    
      <category term="Spring Data JPA" scheme="http://blog.yuanlife.cn/tags/Spring-Data-JPA/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA 2.0X版本之后findOne方法被findById方法替换</title>
    <link href="http://blog.yuanlife.cn/2019/01/13/2019-01-13-Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/"/>
    <id>http://blog.yuanlife.cn/2019/01/13/2019-01-13-Spring Data JPA 2.0X版本之后findOne方法被findById方法替换/</id>
    <published>2019-01-13T09:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.524Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Spring Boot2.0整合Spring Data JPA时，发现继承<code>JpaRepository</code>接口之后无findOne方法，经查阅资料之后，发现已被新的API<code>findById</code>方法替换，新的API结合了java8的语法<code>Optional</code>（一个专门用于避免空指针NPE而开发的类），使用起来更为方便。<br><a id="more"></a></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#1"><strong>API说明</strong></a></li><li><a href="#2"><strong>使用示例</strong></a></li><li><a href="#3"><strong>参考链接</strong></a></li></ul><hr><h2 id="1">API说明</h2><p>新的API接口如下，去掉了findOne方法，添加了返回值为<code>Optional&lt;T&gt;</code>的<code>findById</code>方法,调用<code>findById</code>方法之后，返回<code>Optional</code>的实例，调用<code>Optional</code>的<code>get()</code>方法即可获取到实体。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.data.repository;</span><br><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">Iterable&lt;S&gt; <span class="title">saveAll</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class="line"> <span class="comment">//新的根据主键获取实体的方法</span></span><br><span class="line">    <span class="function">Optional&lt;T&gt; <span class="title">findById</span><span class="params">(ID var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">existsById</span><span class="params">(ID var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAllById</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(ID var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(T var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">(Iterable&lt;? extends T&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If a value is present in this &#123;<span class="doctag">@code</span> Optional&#125;, returns the value,</span></span><br><span class="line"><span class="comment">     * otherwise throws &#123;<span class="doctag">@code</span> NoSuchElementException&#125;.</span></span><br><span class="line"><span class="comment">     * 如果此<span class="doctag">@code</span>可选中存在值，则返回该值，否则抛出<span class="doctag">@code</span> nosuchelementexception。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the non-null value held by this &#123;<span class="doctag">@code</span> Optional&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException if there is no value present</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Optional#isPresent()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"No value present"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2">使用示例</h2><p>根据上面的<code>Optional</code>的<code>get()</code>方法API注释说明可知，直接调用<code>get()</code>方法可能会跑出异常，以下为简单参考示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不建议姿势</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    User user1 = userDao.findById(<span class="number">1L</span>).get();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="comment">//实体不存在，捕获异常</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相对费劲姿势</span></span><br><span class="line">Optional&lt;User&gt; user2 = userDao.findById(<span class="number">1L</span>);</span><br><span class="line"><span class="keyword">if</span>(user2.isPresent())&#123;</span><br><span class="line">    <span class="comment">//实体存在</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//实体不存在</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建议姿势，存在返回实体，不存在不抛异常，返回null</span></span><br><span class="line">User user3 = userDao.findById(<span class="number">1L</span>).orElse(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></p><h2 id="3">参考链接</h2><ul><li><a href="https://blog.csdn.net/u012211603/article/details/79828277" target="_blank" rel="noopener">https://blog.csdn.net/u012211603/article/details/79828277</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Spring Boot2.0整合Spring Data JPA时，发现继承&lt;code&gt;JpaRepository&lt;/code&gt;接口之后无findOne方法，经查阅资料之后，发现已被新的API&lt;code&gt;findById&lt;/code&gt;方法替换，新的API结合了java8的语法&lt;code&gt;Optional&lt;/code&gt;（一个专门用于避免空指针NPE而开发的类），使用起来更为方便。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
    
      <category term="Spring Data JPA" scheme="http://blog.yuanlife.cn/tags/Spring-Data-JPA/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA 1.0x版本中getOne和findOne区别</title>
    <link href="http://blog.yuanlife.cn/2019/01/13/2019-01-13-Spring%20Data%20JPA%201.0x%E7%89%88%E6%9C%AC%E4%B8%ADgetOne%E5%92%8CfindOne%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.yuanlife.cn/2019/01/13/2019-01-13-Spring Data JPA 1.0x版本中getOne和findOne区别/</id>
    <published>2019-01-13T03:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.524Z</updated>
    
    <content type="html"><![CDATA[<p>上个项目初期，由于不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。<br><a id="more"></a></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#1"><strong>API说明</strong></a></li><li><a href="#2"><strong>使用说明</strong></a></li></ul><hr><h2 id="1">API说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves an entity by its id.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the entity with the given id or &#123;<span class="doctag">@literal</span> null&#125; if none found</span></span><br><span class="line"><span class="comment"> * 返回具有给定ID的实体，如果找不到，则返回<span class="doctag">@literal</span> null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> id&#125; is &#123;<span class="doctag">@literal</span> null&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">T <span class="title">findOne</span><span class="params">(ID id)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a reference to the entity with the given identifier.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a reference to the entity with the given identifier.</span></span><br><span class="line"><span class="comment"> * 返回对具有给定标识符的实体的引用。(延迟加载)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> EntityManager#getReference(Class, Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">T <span class="title">getOne</span><span class="params">(ID id)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="2">使用说明</h2><p>findOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同</p><ul><li><p>findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（<a href="http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/" target="_blank" rel="noopener">Spring Data JPA 2.0X版本之后findOne方法被findById方法替换</a>）</p></li><li><p>getOne方法为延迟加载</p><ul><li><p>执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用<code>xxx==null</code>来判断是否有返回结果。</p></li><li><p>当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出<code>EntityNotFoundException</code>异常，如下：</p><p><img src="/images/20190120/exception.png" alt="exception"></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个项目初期，由于不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.yuanlife.cn/categories/Spring/"/>
    
    
      <category term="Spring Data JPA" scheme="http://blog.yuanlife.cn/tags/Spring-Data-JPA/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown常用语法回顾与熟悉</title>
    <link href="http://blog.yuanlife.cn/2018/12/31/2018-12-31-MarkDown%E5%9B%9E%E9%A1%BE%E4%B8%8E%E7%86%9F%E6%82%89/"/>
    <id>http://blog.yuanlife.cn/2018/12/31/2018-12-31-MarkDown回顾与熟悉/</id>
    <published>2018-12-31T15:30:12.000Z</published>
    <updated>2020-06-13T09:07:46.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这两天利用元旦假期的空闲时间捣鼓了一个初版的博客，目前还有一些小问题待完善，后续有精力再继续完善。这第一篇就用于熟悉MarkDown语法了，为以后奠定基础。<br><a id="more"></a></p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#1"><strong>标题</strong></a></li><li><a href="#11"><strong>锚点</strong></a></li><li><a href="#2"><strong>段落与换行</strong></a></li><li><a href="#3"><strong>区块引用</strong></a></li><li><a href="#4"><strong>列表</strong></a></li><li><a href="#5"><strong>代码</strong></a></li><li><a href="#6"><strong>强调</strong></a></li><li><a href="#7"><strong>自动链接</strong></a></li><li><a href="#8"><strong>表格</strong></a></li><li><a href="#9"><strong>分割线</strong></a></li><li><a href="#10"><strong>图片</strong></a></li></ul><hr><h2 id="1">标题</h2><p>在文字前面添加【#】即可创建一至六级标题，详情如下： </p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p>效果如下：<br><img src="/images/20190101/title.png" alt="title">  </p><h2 id="11">锚点</h2><p>利用锚点可进行页面内跳转（文章目录即为锚点语法制作），详情如下：</p><blockquote><p><code>[**标题**](#title)</code>  【#】后面的<code>title</code>对应下面的<code>id=&#39;title&#39;</code></p><p><code>&lt;h2 id=&#39;title&#39;&gt;标题&lt;/h2&gt;</code></p></blockquote><p>效果：</p><blockquote><p>点击【标题】目录可自动跳转到下面的标题模块</p></blockquote><h2 id="2">段落与换行</h2><blockquote><p><strong>段落</strong>：段落就是连续行上的文本, 一个或多个空行划分不同的段落. (空行的含义就只要是看起来是空行就行了 – 即使包含了 spaces 或者 等空白符也是空行.) 普通段落不应该使用缩进.  </p><p><strong>换行</strong>：只需要在行尾加上两个及以上的空格, 即可自动换行</p></blockquote><h2 id="3">区块引用</h2><blockquote><p>>区块引用</p></blockquote><blockquote><p>>&gt;这是嵌套区块引用</p></blockquote><p>效果：</p><blockquote><p>区块引用</p><blockquote><p>这是嵌套区块引用</p></blockquote></blockquote><h2 id="4">列表</h2><p>无序列表可用【<code>+</code>】、【<code>*</code>】、【<code>-</code>】符号表示无序列表(符号和文字之间有一个空格)，如下：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项   </p><ul><li>（+*）第三项</li></ul></blockquote><p>效果：</p><blockquote><ul><li>第一项 </li><li>第二项 </li><li>第三项</li></ul></blockquote><p>无序列表用数字加【<code>.</code>】来标识(【<code>.</code>】符号和文字之间有一个空格)，如下：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项  </li></ol></blockquote><p>效果：</p><blockquote><ol><li>第一项 </li><li>第二项 </li><li>第三项  </li></ol></blockquote><h2 id="5">代码</h2><p>代码区块:语法<br>```语言<br>XXXXXX<br>```<br>。如下:<br>普通段落：<br>void main()<br>{<br>print(“Hello World!”);<br>}</p><p>java代码块：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">print(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="6">强调</h2><p>在强调内容两侧分别加上【<code>*</code>】或者【<code>_</code>】，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，_斜体_<br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h2 id="7">自动链接</h2><p>链接有两种形式生成：<code>行内式</code>和<code>参考式</code>。  </p><ul><li><p>行内式:  </p><blockquote><p>[XiaoTong’s Blog](<a href="https://hdlxt.github.io/)。" target="_blank" rel="noopener">https://hdlxt.github.io/)。</a>  </p></blockquote><p>  效果：  </p><blockquote><p><a href="https://hdlxt.github.io/" target="_blank" rel="noopener">XiaoTong’s Blog</a>。</p></blockquote></li><li><p>参考式</p><blockquote><p>[XiaoTong’s Blog]<a href="https://hdlxt.github.io/" target="_blank" rel="noopener">1</a><br>[1]:<a href="https://hdlxt.github.io/" target="_blank" rel="noopener">https://hdlxt.github.io/</a>  </p></blockquote><p>  效果：</p><blockquote><p><a href="https://hdlxt.github.io/" target="_blank" rel="noopener">XiaoTong’s Blog</a>。  </p></blockquote></li></ul><h2 id="9">水平分割线</h2><p>如果一行中只有三个以上的连字符, 星号, 或者下划线则会在该位置生成一个 <code>&lt;hr /&gt;</code> 标签. 星号和连字符之间的空格也是允许的. 下面的例子都会生成一条水平线:<br>如：  </p><blockquote><p>**<em><br>-–<br>\</em> <em> </em><br>- - -  </p></blockquote><p>效果：  </p><blockquote><hr><hr><hr></blockquote><hr><h2 id="10">图片</h2><p>通常, 要用 “原生” 的语法在纯文本格式中插入图片是很困难的.<br>Markdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.<br>内联图片语法如下:<br>![Alt text](/path/to/img.jpg)<br>![Alt text](/path/to/img.jpg “Optional title”)<br>也就是:<br>一个感叹号: !;<br>紧跟着一对方括号, 包含了图片的 alt 属性;<br>紧跟着一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.<br>引用图片语法如下:<br>![Alt text][id]<br>“id” 是图片引用的名称. 图片引用使用链接定义的相同语法:<br>[id]: url/to/image  “Optional title attribute”<br>Markdown 没有语法指定图片尺寸; 如果需要指定图片尺寸, 可以使用HTML<code>&lt;img&gt;</code> 标签.<br>示例如：  </p><blockquote><p>![avatar](/images/avatar.jpg)  </p></blockquote><p>效果：<br><img src="/images/avatar.jpg" alt="avatar">  </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这两天利用元旦假期的空闲时间捣鼓了一个初版的博客，目前还有一些小问题待完善，后续有精力再继续完善。这第一篇就用于熟悉MarkDown语法了，为以后奠定基础。&lt;br&gt;
    
    </summary>
    
      <category term="编辑工具" scheme="http://blog.yuanlife.cn/categories/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="MarkDown" scheme="http://blog.yuanlife.cn/tags/MarkDown/"/>
    
  </entry>
  
</feed>
