{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/20190101/title.png","path":"images/20190101/title.png","modified":0,"renderable":0},{"_id":"source/images/20190124/demo.png","path":"images/20190124/demo.png","modified":0,"renderable":0},{"_id":"source/images/20190304/5.png","path":"images/20190304/5.png","modified":0,"renderable":0},{"_id":"source/images/20190304/10.png","path":"images/20190304/10.png","modified":0,"renderable":0},{"_id":"source/images/20190304/4.png","path":"images/20190304/4.png","modified":0,"renderable":0},{"_id":"source/images/20190304/6.png","path":"images/20190304/6.png","modified":0,"renderable":0},{"_id":"source/images/20190304/7.png","path":"images/20190304/7.png","modified":0,"renderable":0},{"_id":"source/images/20190304/9.png","path":"images/20190304/9.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next-1.png","path":"images/favicon-16x16-next-1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next-2.png","path":"images/favicon-32x32-next-2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"source/images/20190120/jpa-entity.png","path":"images/20190120/jpa-entity.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/20190120/exception.png","path":"images/20190120/exception.png","modified":0,"renderable":0},{"_id":"source/images/20190304/3.png","path":"images/20190304/3.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"source/images/20190304/8.png","path":"images/20190304/8.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"source/images/20190304/2.png","path":"images/20190304/2.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"source/images/20190304/1.png","path":"images/20190304/1.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1548160067361},{"_id":"source/CNAME","hash":"b1b79292dd286296c89c3c9ec1d73924fc761130","modified":1548160067251},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1548160067362},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1548160067363},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1548160067370},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1548160067371},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1548160067372},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1548160067372},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1548160067374},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1548160067373},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1548160067374},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1548160067469},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1548160067378},{"_id":"themes/next/_config.yml","hash":"ff4fb3d7687329aad0c6ef8585b86cbe14b90510","modified":1548160067376},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1548160067377},{"_id":"themes/next/README.cn.md","hash":"b764aae78ffa561a9a68fdee4c6f21c3ce260fbb","modified":1548160067375},{"_id":"themes/next/README.md","hash":"4e276fb9a3c31f1259df3ea9a4b92f4a8d72714d","modified":1548160067375},{"_id":"source/_posts/2018-12-31-MarkDown回顾与熟悉.md","hash":"07c5273b36c85d5f92e1e39221687a44a7f01ffc","modified":1551707389213},{"_id":"source/_posts/2019-01-13-Spring Data JPA 2.0X版本之后findOne方法被findById方法替换.md","hash":"e2ca3ca07edbdcf2d551ee217f6291f5dd02da9c","modified":1551707389210},{"_id":"source/_posts/2019-01-13-Spring Data JPA 1.0x版本中getOne和findOne区别.md","hash":"d98d5036e93f1db2cb8b28050229b5b98322a891","modified":1551707389212},{"_id":"source/categories/index.md","hash":"b057a5f539b95664fccd005f37018f8bf5ba8a79","modified":1548160067257},{"_id":"source/about/index.md","hash":"a4fb271360f70c8a295d84aba24f1e08bd6c37b4","modified":1548160067257},{"_id":"source/tags/index.md","hash":"c28183916c8b76c173abee698a383f28fe3b0927","modified":1548160067267},{"_id":"source/_posts/2019-01-19-Spring Data JPA实体的生命周期总结.md","hash":"3fbb0129b2f17878bdd92985b01110b373b7fd81","modified":1551707389208},{"_id":"source/_posts/2019-10-01-【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&Spring Cloud Greenwich.RELEASE）.md","hash":"d68bacde4e3a67b72095e8e1a1dd82af452a3080","modified":1574606184042},{"_id":"source/images/avatar.jpg","hash":"2656eb86cb737ff77ea089df25db7f0ee9c530ce","modified":1548160067264},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1548160067367},{"_id":"source/_posts/2019-03-04-Spring Boot & 极验滑动验证.md","hash":"2a8ad97f30829378e1c095daf1d1da605b95e838","modified":1551707389103},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1548160067365},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1548160067368},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1548160067381},{"_id":"source/top/index.md","hash":"627fc4e7e78c26dc6dfd66af77cd37202caf83ad","modified":1548160067268},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1548160067380},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1548160067382},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1548160067384},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1548160067385},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1548160067386},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1548160067387},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1548160067388},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1548160067369},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1548160067388},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1548160067389},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1548160067392},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1548160067390},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1548160067392},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1548160067391},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1548160067466},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1548160067390},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c701cd7d9232d4432709ca381fb5c76d81d6ce0c","modified":1548160067391},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1548160067470},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1548160067471},{"_id":"themes/next/layout/_layout.swig","hash":"a7e674b425d9a096a33b81cd64e09113c49bd394","modified":1548160067396},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1548160067468},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1548160067461},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1548160067469},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1548160067463},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1548160067465},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1548160067464},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1548160067725},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1548160067737},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1548160067726},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548160067581},{"_id":"source/images/20190101/title.png","hash":"ef40d0399c330bd40f9b4b9bbb458beb41fe8dd9","modified":1548160067258},{"_id":"source/images/20190124/demo.png","hash":"5f78b02ffca44940aa22baa10db5270c2ebaa28b","modified":1548429700906},{"_id":"source/images/20190304/5.png","hash":"6c16f8c3b9c2863e7e43f303c6dd493e2d905999","modified":1551707389115},{"_id":"source/images/20190304/10.png","hash":"c11e145a20635b8eb3dc12192c6de773d20586c9","modified":1551707389109},{"_id":"source/images/20190304/4.png","hash":"51265e7a5b4dd3bb893bc56626592c97a7bfad37","modified":1551707389113},{"_id":"source/images/20190304/6.png","hash":"db278fa454a2582569a9aaec773e47f10ed3a4e3","modified":1551707389118},{"_id":"source/images/20190304/7.png","hash":"9cfcffa1ac7d7bee86725fe045f7189518008ac5","modified":1551707389120},{"_id":"source/images/20190304/9.png","hash":"950bc8af82b876e28c3d78badfd2397c310dcf57","modified":1551707389140},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4d9139cebce2e7b70953ad88e962634a80a59cef","modified":1548160067405},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1548160067393},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"e711f4fa556ee68234165147f852114d23a97281","modified":1548160067394},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cc5444900a7f134e7c1a6195348fcfe8fee5cad4","modified":1548160067406},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1548160067409},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1548160067409},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1548160067410},{"_id":"themes/next/layout/_partials/head.swig","hash":"109423ba9b4a833be0095cdb33c96026d56a70f1","modified":1548160067407},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1548160067410},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1548160067421},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1548160067420},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1548160067452},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1548160067451},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1548160067425},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1548160067455},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1548160067456},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1548160067453},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1548160067455},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1548160067454},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"3ad3067cd5ea2c3d16e2d9aa368b4c810d4f7398","modified":1548160067397},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1548160067401},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"c17104b453d81e3937abc92fdf702a5b750633f1","modified":1548160067398},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1548160067402},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1548160067472},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1548160067472},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1548160067473},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1548160067474},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1548160067475},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1548160067475},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1548160067475},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1548160067477},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1548160067476},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1548160067403},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1548160067581},{"_id":"themes/next/layout/_macro/post.swig","hash":"d01ed1c0d0f5264ef0ba99d2ca8dd09f96eb327c","modified":1548160067403},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1548160067405},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"fff8c0adf0d83c90d6607e21b32c0b4997782ad8","modified":1548160067404},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548160067585},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548160067586},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1548160067584},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1548160067588},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1548160067589},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1548160067587},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1548160067591},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1548160067589},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1548160067590},{"_id":"themes/next/source/images/favicon-16x16-next-1.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548160067592},{"_id":"themes/next/source/images/favicon-32x32-next-2.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548160067593},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"de35afb9e9f2111527292893b3e94c9acdbe29ef","modified":1548160067592},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548160067594},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1548160067590},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"869c89d5d2de1587b39af80e8cadddfbd030c6f7","modified":1548160067593},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1548160067598},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1548160067597},{"_id":"source/images/20190120/jpa-entity.png","hash":"61c701dc2248466590c242210588ac6f8689fd87","modified":1548160067262},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548160067599},{"_id":"source/images/20190120/exception.png","hash":"1cec2254e058c0fb8aea595c7e4337e425ad89ba","modified":1548160067260},{"_id":"source/images/20190304/3.png","hash":"377f5948518aa79ca1c778d85c6608046ad41624","modified":1551707389112},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548160067596},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1548160067594},{"_id":"source/images/20190304/8.png","hash":"6d68854202a76d06b2a9912a8243c4bcf7f941c9","modified":1551707389123},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548160067423},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548160067423},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548160067576},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548160067579},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548160067552},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548160067552},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548160067554},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1548160067408},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1548160067408},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1548160067414},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1548160067414},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1548160067411},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1548160067412},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1548160067417},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1548160067422},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1548160067424},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1548160067422},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1548160067426},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1548160067419},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1548160067426},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1548160067430},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1548160067415},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1548160067429},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1548160067432},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1548160067431},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1548160067435},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1548160067434},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1548160067436},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1548160067438},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1548160067438},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1548160067436},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1548160067440},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1548160067437},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1548160067442},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1548160067439},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1548160067440},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1548160067447},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1548160067443},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1548160067443},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1548160067458},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1548160067459},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1548160067445},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3073744e4c18fb70580007cac43cfb56877cace9","modified":1548160067550},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1548160067446},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1548160067458},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1548160067460},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1548160067577},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1548160067576},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1548160067575},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1548160067579},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1548160067603},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1548160067602},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1548160067604},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1548160067607},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1548160067605},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1548160067607},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1548160067609},{"_id":"themes/next/source/js/src/love.js","hash":"5b7946f40f3c91a81e8f00392752a32892c02c21","modified":1548160067606},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1548160067609},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1548160067606},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1548160067624},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1548160067610},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1548160067630},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1548160067651},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1548160067551},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1548160067632},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1548160067652},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1548160067553},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1548160067653},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1548160067554},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1548160067654},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1548160067685},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1548160067657},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1548160067657},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1548160067659},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1548160067659},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1548160067660},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1548160067692},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1548160067693},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1548160067688},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1548160067692},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1548160067689},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1548160067688},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1548160067690},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1548160067691},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1548160067690},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1548160067696},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1548160067694},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1548160067698},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1548160067697},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1548160067699},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1548160067703},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1548160067702},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1548160067705},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1548160067701},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1548160067704},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1548160067704},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1548160067705},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1548160067706},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1548160067720},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1548160067706},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1548160067724},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1548160067725},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1548160067720},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1548160067708},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1548160067723},{"_id":"source/images/20190304/2.png","hash":"af733db384a9e7cbd8a7a8aa20b0ae98851d2448","modified":1551707389111},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1548160067708},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1548160067601},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1548160067687},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1548160067707},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1548160067457},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1548160067457},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1548160067479},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1548160067540},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1548160067481},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1548160067479},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1548160067501},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1548160067485},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1548160067522},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1548160067556},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1548160067557},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1548160067484},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1548160067557},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1548160067558},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1548160067559},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1548160067565},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1548160067560},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1548160067564},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1548160067568},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1548160067569},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1548160067570},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1548160067541},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1548160067559},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1548160067541},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1548160067543},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1548160067548},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1548160067555},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1548160067545},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1548160067571},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1548160067573},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1548160067572},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1548160067574},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1548160067547},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1548160067572},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1548160067574},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1548160067622},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1548160067623},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1548160067634},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1548160067608},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1548160067636},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1548160067619},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1548160067638},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1548160067637},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1548160067639},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1548160067645},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1548160067648},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1548160067649},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1548160067655},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1548160067661},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1548160067663},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1548160067656},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1548160067665},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1548160067718},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1548160067635},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1548160067719},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1548160067621},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548160067681},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548160067684},{"_id":"source/images/20190304/1.png","hash":"3c28f82e9d4ac21c45aabb7aba335b749e5ad0c9","modified":1551707389108},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1548160067487},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1548160067487},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1548160067488},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1548160067489},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1548160067489},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1548160067490},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1548160067491},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1548160067486},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1548160067493},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1548160067499},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1548160067513},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1548160067493},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1548160067495},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1548160067492},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1548160067497},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1548160067517},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ba0cef8ea88b64455470e46b3676303286d8c813","modified":1548160067513},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1548160067521},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1548160067520},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1548160067518},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1548160067519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1548160067520},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1548160067503},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"dadd0ced362cebcd3dfdbfa46c305bfc078d0ebc","modified":1548160067502},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1548160067522},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1548160067521},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1548160067505},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1548160067504},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1548160067504},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1548160067505},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1548160067506},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1548160067507},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1548160067506},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1548160067509},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1548160067509},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1548160067507},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1548160067510},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1548160067510},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1548160067508},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1548160067523},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1548160067524},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"1e3d1e70bbb5c51867ae958646c4c62d3ee86e04","modified":1548160067511},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1548160067525},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1548160067524},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1548160067527},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1548160067526},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1548160067531},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1548160067535},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1548160067532},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1548160067525},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1548160067529},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1548160067537},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1548160067526},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1548160067538},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1548160067536},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1548160067538},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1548160067539},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1548160067539},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1548160067563},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1548160067612},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1548160067537},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1548160067562},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1548160067571},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1548160067613},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1548160067639},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1548160067616},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1548160067618},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1548160067640},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1548160067643},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548160067679},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548160067669},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1548160067722},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1548160067614},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1548160067642},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1548160067643},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1548160067644},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548160067672},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1548160067715},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1548160067676},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1548160067629},{"_id":"public/atom.xml","hash":"0a3abe5292e9032ae59714123f409de23038c92c","modified":1574607133609},{"_id":"public/search.xml","hash":"a4348de5a2f87ef9bf24d9538d2ae7103d61b78f","modified":1574607133609},{"_id":"public/categories/index.html","hash":"9c636860b1452fd8f045399868676eee6ccee0e8","modified":1574607133643},{"_id":"public/about/index.html","hash":"ef485ddde9eb023d09eb324d199650f2d9b99155","modified":1574607133643},{"_id":"public/tags/index.html","hash":"550924c6f33765a633b621a303e9298dfeeee955","modified":1574607133643},{"_id":"public/top/index.html","hash":"0116ab3fe44f1c6b0d60dab7aa18a844598d1a50","modified":1574607133643},{"_id":"public/2019/11/24/2019-10-01-【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&Spring Cloud Greenwich.RELEASE）/index.html","hash":"80365d2f3fa313050941f086e760287a1f33d5f2","modified":1574607133643},{"_id":"public/2019/03/04/2019-03-04-Spring Boot & 极验滑动验证/index.html","hash":"7d77a00752312d949080bbea4444a69385e985c6","modified":1574607133643},{"_id":"public/2019/01/19/2019-01-19-Spring Data JPA实体的生命周期总结/index.html","hash":"086111bdd631b439a13da8cb8c3690c21f31d43c","modified":1574607133644},{"_id":"public/2019/01/13/2019-01-13-Spring Data JPA 2.0X版本之后findOne方法被findById方法替换/index.html","hash":"eab49689bfdee244aac2b0783795f9fbd387c312","modified":1574607133644},{"_id":"public/2019/01/13/2019-01-13-Spring Data JPA 1.0x版本中getOne和findOne区别/index.html","hash":"e10085b11245f35f996be3b9cae8675db3dd1076","modified":1574607133644},{"_id":"public/2018/12/31/2018-12-31-MarkDown回顾与熟悉/index.html","hash":"02f9f5017ae91fc0285b4669c9b109689a256cbc","modified":1574607133644},{"_id":"public/archives/index.html","hash":"144b4a3c56a153ec16cb49ab4b388c60a3ca6741","modified":1574607133644},{"_id":"public/archives/2018/index.html","hash":"9fd272bea522e3eb221219ae77a265534221847e","modified":1574607133644},{"_id":"public/archives/2018/12/index.html","hash":"5110a7c4548b9212f7faaa63c0e53e4af9dad544","modified":1574607133645},{"_id":"public/archives/2019/index.html","hash":"894d4939a8b04a73ffa8882d12613b8c31984ef6","modified":1574607133645},{"_id":"public/archives/2019/01/index.html","hash":"3dec19dfcb8138ebb69000ad267874c8ca74dd8b","modified":1574607133645},{"_id":"public/archives/2019/03/index.html","hash":"f6315348b846f54d847cf98ab9fae1248fd33320","modified":1574607133645},{"_id":"public/archives/2019/11/index.html","hash":"c228a47fae9ed142a7f30fb1b845b34de446fe1f","modified":1574607133645},{"_id":"public/categories/编辑工具/index.html","hash":"d6ce29dd3b3f5a6809ad3ad6599c74b401e89737","modified":1574607133645},{"_id":"public/categories/Spring/index.html","hash":"8891e453dfa2284c7bf5ce80fbe0b99ca4a52a36","modified":1574607133646},{"_id":"public/index.html","hash":"ba331b26ea98895872851522f8adda8a59ed71eb","modified":1574607133646},{"_id":"public/tags/MarkDown/index.html","hash":"c433071b8ae9d831cdb4b7a4ac51b758c71b5bfc","modified":1574607133646},{"_id":"public/tags/Spring-Data-JPA/index.html","hash":"43a075dd79e636922f0f402c8979752ffef45fc0","modified":1574607133647},{"_id":"public/tags/Spring-Boot/index.html","hash":"a3ccf758b9e12e6a504aba24955134a650620af0","modified":1574607133647},{"_id":"public/tags/极验验证/index.html","hash":"e12ae87d08cee5b94fd9d72cd84e1bcdad0638b5","modified":1574607133647},{"_id":"public/tags/滑动验证码/index.html","hash":"e6faad11094ffaaf7ae0511115920782d3e61cb9","modified":1574607133647},{"_id":"public/CNAME","hash":"b1b79292dd286296c89c3c9ec1d73924fc761130","modified":1574607133683},{"_id":"public/images/20190101/title.png","hash":"ef40d0399c330bd40f9b4b9bbb458beb41fe8dd9","modified":1574607133683},{"_id":"public/images/20190124/demo.png","hash":"5f78b02ffca44940aa22baa10db5270c2ebaa28b","modified":1574607133683},{"_id":"public/images/20190304/5.png","hash":"6c16f8c3b9c2863e7e43f303c6dd493e2d905999","modified":1574607133684},{"_id":"public/images/20190304/10.png","hash":"c11e145a20635b8eb3dc12192c6de773d20586c9","modified":1574607133684},{"_id":"public/images/20190304/4.png","hash":"51265e7a5b4dd3bb893bc56626592c97a7bfad37","modified":1574607133684},{"_id":"public/images/20190304/6.png","hash":"db278fa454a2582569a9aaec773e47f10ed3a4e3","modified":1574607133684},{"_id":"public/images/20190304/7.png","hash":"9cfcffa1ac7d7bee86725fe045f7189518008ac5","modified":1574607133684},{"_id":"public/images/20190304/9.png","hash":"950bc8af82b876e28c3d78badfd2397c310dcf57","modified":1574607133684},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1574607133684},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1574607133684},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1574607133685},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1574607133685},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1574607133685},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1574607133685},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1574607133685},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1574607133685},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1574607133685},{"_id":"public/images/favicon-16x16-next-1.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1574607133686},{"_id":"public/images/favicon-32x32-next-2.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1574607133687},{"_id":"public/images/favicon-16x16-next.png","hash":"de35afb9e9f2111527292893b3e94c9acdbe29ef","modified":1574607133687},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1574607133688},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1574607133688},{"_id":"public/images/favicon-32x32-next.png","hash":"869c89d5d2de1587b39af80e8cadddfbd030c6f7","modified":1574607133688},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1574607133688},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1574607133688},{"_id":"public/images/20190120/jpa-entity.png","hash":"61c701dc2248466590c242210588ac6f8689fd87","modified":1574607133688},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1574607133688},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1574607133688},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1574607133688},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1574607133689},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1574607133689},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1574607133689},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1574607133689},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1574607133689},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1574607133689},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1574607133690},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1574607133691},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1574607133691},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1574607133691},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1574607133691},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1574607133691},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1574607133692},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1574607133692},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1574607133692},{"_id":"public/images/avatar.jpg","hash":"2656eb86cb737ff77ea089df25db7f0ee9c530ce","modified":1574607136123},{"_id":"public/images/20190120/exception.png","hash":"1cec2254e058c0fb8aea595c7e4337e425ad89ba","modified":1574607136127},{"_id":"public/images/20190304/3.png","hash":"377f5948518aa79ca1c778d85c6608046ad41624","modified":1574607136135},{"_id":"public/images/20190304/8.png","hash":"6d68854202a76d06b2a9912a8243c4bcf7f941c9","modified":1574607136138},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1574607136138},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1574607136156},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1574607136156},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1574607136156},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1574607136157},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1574607136157},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1574607136157},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1574607136157},{"_id":"public/js/src/love.js","hash":"2995507b300c6c9a9472d81c54b7c477d6925094","modified":1574607136157},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1574607136157},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1574607136157},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1574607136157},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1574607136157},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1574607136158},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1574607136158},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1574607136158},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1574607136158},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1574607136158},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1574607136158},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1574607136158},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1574607136158},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1574607136159},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1574607136159},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1574607136159},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1574607136160},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1574607136160},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1574607136160},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1574607136160},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1574607136160},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1574607136160},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1574607136160},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1574607136160},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1574607136161},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1574607136161},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1574607136161},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1574607136161},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1574607136161},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1574607136161},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1574607136161},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1574607136161},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1574607136161},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1574607136162},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1574607136162},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1574607136162},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1574607136162},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1574607136162},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1574607136162},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1574607136162},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1574607136162},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1574607136162},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1574607136162},{"_id":"public/css/main.css","hash":"7318ad13765d96346e70b5ecd485a336d33a9e31","modified":1574607136162},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1574607136163},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1574607136163},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1574607136163},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1574607136163},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1574607136165},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1574607136165},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1574607136165},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1574607136165},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1574607136165},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1574607136166},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1574607136166},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1574607136166},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1574607136166},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1574607136166},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1574607136166},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1574607136166},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1574607136167},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1574607136167},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1574607136167},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1574607136167},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1574607136168},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1574607136209},{"_id":"public/images/20190304/2.png","hash":"af733db384a9e7cbd8a7a8aa20b0ae98851d2448","modified":1574607136213},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1574607136213},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1574607136214},{"_id":"public/images/20190304/1.png","hash":"3c28f82e9d4ac21c45aabb7aba335b749e5ad0c9","modified":1574607136796},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1574607137001}],"Category":[{"name":"编辑工具","_id":"ck3d4fgdi0004ikvkit8485bi"},{"name":"Spring","_id":"ck3d4fgeu000bikvk5gimcdrq"},{"name":"Spring Cloud","parent":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d4jx590004s8vkn711m6ym"},{"name":"Spring Boot","parent":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d5e8x7008hs8vkoy8jzvy4"}],"Data":[],"Page":[{"title":"分类","date":"2018-12-30T02:47:23.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-12-30 10:47:23\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-01-22T12:27:47.257Z","path":"categories/index.html","layout":"page","_id":"ck3d4fgcz0001ikvkhb3ey9ov","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2018-12-30T03:00:28.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-12-30 11:00:28\ncomments: false\n---\n","updated":"2019-01-22T12:27:47.257Z","path":"about/index.html","layout":"page","_id":"ck3d4fgd80003ikvkniovce0o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-12-29T09:42:53.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-12-29 17:42:53\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-01-22T12:27:47.267Z","path":"tags/index.html","layout":"page","_id":"ck3d4fgdx0007ikvk7r5b433u","content":"","site":{"data":{}},"excerpt":"","more":""},{"comments":0,"_content":"<h1 class=\"post-title\" itemprop=\"name headline\">阅读排行</h1>\n<div id=\"top\"></div>\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n<script>AV.initialize(\"IncCJ9bPSktOja894HwhOFMB-gzGzoHsz\", \"2RFu5U1qeTIbTbWMRttTCWbU\");</script>\n<script type=\"text/javascript\">\n  var time=0\n    var title=\"\"\n      var url=\"\"\n        var query = new AV.Query('Counter');\n\t  query.notEqualTo('id',0);\n\t    query.descending('time');\n\t      query.limit(1000);\n\t        query.find().then(function (todo) {\n\t\t    for (var i=0;i<1000;i++){\n\t\t          var result=todo[i].attributes;\n\t\t\t        time=result.time;\n\t\t\t\t      title=result.title;\n\t\t\t\t            url=result.url;\n\t\t\t\t\t          // var content=\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br>\"+\"<font color='#fff'>\"+\"阅读次数：\"+time+\"</font>\"+\"<br><br>\";\n\t\t\t\t\t\t        var content=\"<p>\"+\"<font color='#1C1C1C'>\"+\"【文章热度:\"+time+\"℃】\"+\"</font>\"+\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"</p>\";\n\t\t\t\t\t\t\t      document.getElementById(\"top\").innerHTML+=content\n\t\t\t\t\t\t\t          }\n\t\t\t\t\t\t\t\t    }, function (error) {\n\t\t\t\t\t\t\t\t        console.log(\"error\");\n\t\t\t\t\t\t\t\t\t  });\n\t\t\t\t\t\t\t\t\t  </script>\n","source":"top/index.md","raw":"---\ncomments: false\n---\n<h1 class=\"post-title\" itemprop=\"name headline\">阅读排行</h1>\n<div id=\"top\"></div>\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n<script>AV.initialize(\"IncCJ9bPSktOja894HwhOFMB-gzGzoHsz\", \"2RFu5U1qeTIbTbWMRttTCWbU\");</script>\n<script type=\"text/javascript\">\n  var time=0\n    var title=\"\"\n      var url=\"\"\n        var query = new AV.Query('Counter');\n\t  query.notEqualTo('id',0);\n\t    query.descending('time');\n\t      query.limit(1000);\n\t        query.find().then(function (todo) {\n\t\t    for (var i=0;i<1000;i++){\n\t\t          var result=todo[i].attributes;\n\t\t\t        time=result.time;\n\t\t\t\t      title=result.title;\n\t\t\t\t            url=result.url;\n\t\t\t\t\t          // var content=\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br>\"+\"<font color='#fff'>\"+\"阅读次数：\"+time+\"</font>\"+\"<br><br>\";\n\t\t\t\t\t\t        var content=\"<p>\"+\"<font color='#1C1C1C'>\"+\"【文章热度:\"+time+\"℃】\"+\"</font>\"+\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"</p>\";\n\t\t\t\t\t\t\t      document.getElementById(\"top\").innerHTML+=content\n\t\t\t\t\t\t\t          }\n\t\t\t\t\t\t\t\t    }, function (error) {\n\t\t\t\t\t\t\t\t        console.log(\"error\");\n\t\t\t\t\t\t\t\t\t  });\n\t\t\t\t\t\t\t\t\t  </script>\n","date":"2019-01-22T12:27:47.268Z","updated":"2019-01-22T12:27:47.268Z","path":"top/index.html","title":"","layout":"page","_id":"ck3d4fgee0009ikvkn90ou5qk","content":"<p></p><h1 class=\"post-title\" itemprop=\"name headline\">阅读排行</h1><p></p>\n<p><div id=\"top\"></div></p>\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n<script>AV.initialize(\"IncCJ9bPSktOja894HwhOFMB-gzGzoHsz\", \"2RFu5U1qeTIbTbWMRttTCWbU\");</script>\n<script type=\"text/javascript\">\n  var time=0\n    var title=\"\"\n      var url=\"\"\n        var query = new AV.Query('Counter');\n      query.notEqualTo('id',0);\n        query.descending('time');\n          query.limit(1000);\n            query.find().then(function (todo) {\n            for (var i=0;i<1000;i++){\n                  var result=todo[i].attributes;\n                    time=result.time;\n                      title=result.title;\n                            url=result.url;\n                              // var content=\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br>\"+\"<font color='#fff'>\"+\"阅读次数：\"+time+\"</font>\"+\"<br><br>\";\n                                var content=\"<p>\"+\"<font color='#1C1C1C'>\"+\"【文章热度:\"+time+\"℃】\"+\"</font>\"+\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"</p>\";\n                                  document.getElementById(\"top\").innerHTML+=content\n                                      }\n                                    }, function (error) {\n                                        console.log(\"error\");\n                                      });\n                                      </script>\n","site":{"data":{}},"excerpt":"","more":"<p></p><h1 class=\"post-title\" itemprop=\"name headline\">阅读排行</h1><p></p>\n<p><div id=\"top\"></div></p>\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n<script>AV.initialize(\"IncCJ9bPSktOja894HwhOFMB-gzGzoHsz\", \"2RFu5U1qeTIbTbWMRttTCWbU\");</script>\n<script type=\"text/javascript\">\n  var time=0\n    var title=\"\"\n      var url=\"\"\n        var query = new AV.Query('Counter');\n      query.notEqualTo('id',0);\n        query.descending('time');\n          query.limit(1000);\n            query.find().then(function (todo) {\n            for (var i=0;i<1000;i++){\n                  var result=todo[i].attributes;\n                    time=result.time;\n                      title=result.title;\n                            url=result.url;\n                              // var content=\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br>\"+\"<font color='#fff'>\"+\"阅读次数：\"+time+\"</font>\"+\"<br><br>\";\n                                var content=\"<p>\"+\"<font color='#1C1C1C'>\"+\"【文章热度:\"+time+\"℃】\"+\"</font>\"+\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"</p>\";\n                                  document.getElementById(\"top\").innerHTML+=content\n                                      }\n                                    }, function (error) {\n                                        console.log(\"error\");\n                                      });\n                                      </script>\n"}],"Post":[{"title":"MarkDown常用语法回顾与熟悉","date":"2018-12-31T15:30:12.000Z","copyright":true,"_content":"> 这两天利用元旦假期的空闲时间捣鼓了一个初版的博客，目前还有一些小问题待完善，后续有精力再继续完善。这第一篇就用于熟悉MarkDown语法了，为以后奠定基础。\n<!--more -->\n## 目录\n* [**标题**](#1)\n* [**锚点**](#11)\n* [**段落与换行**](#2)\n* [**区块引用**](#3)\n* [**列表**](#4)\n* [**代码**](#5)\n* [**强调**](#6)\n* [**自动链接**](#7)\n* [**表格**](#8)\n* [**分割线**](#9)\n* [**图片**](#10)\n\n---\n\n<h2 id='1'>标题</h2>\n\n在文字前面添加【#】即可创建一至六级标题，详情如下： \n\t# 一级标题\n\t\n\t## 二级标题\n\t\n\t### 三级标题\n\t\n\t#### 四级标题\n\t\n\t##### 五级标题\n\t\n\t###### 六级标题\n效果如下：\n![title](/images/20190101/title.png)  \n<h2 id='11'>锚点</h2>\n\n利用锚点可进行页面内跳转（文章目录即为锚点语法制作），详情如下：\n> `[**标题**](#title)`  【#】后面的`title`对应下面的`id='title'`\n> \n> `<h2 id='title'>标题</h2>`\n\n效果：\n>点击【标题】目录可自动跳转到下面的标题模块\n\n<h2 id='2'>段落与换行</h2>\n\n>**段落**：段落就是连续行上的文本, 一个或多个空行划分不同的段落. (空行的含义就只要是看起来是空行就行了 -- 即使包含了 spaces 或者 等空白符也是空行.) 普通段落不应该使用缩进.  \n>\n>**换行**：只需要在行尾加上两个及以上的空格, 即可自动换行\n\n<h2 id='3'>区块引用</h2>\n\n> \\>区块引用\n\n> \\>>这是嵌套区块引用\n\n效果：\n>区块引用\n> >这是嵌套区块引用\n\n<h2 id='4'>列表</h2>\n\n无序列表可用【`+`】、【`*`】、【`-`】符号表示无序列表(符号和文字之间有一个空格)，如下：\n>-（+\\*） 第一项   \n>-（+\\*） 第二项   \n>- （+\\*）第三项\n\n效果：\n>* 第一项 \n* 第二项 \n* 第三项\n\n无序列表用数字加【`.`】来标识(【`.`】符号和文字之间有一个空格)，如下：\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项  \n\n效果：\n> 1. 第一项 \n> 2. 第二项 \n> 3. 第三项  \n<h2 id='5'>代码</h2>\n\n代码区块:语法   \n\\`\\`\\`语言  \nXXXXXX  \n\\`\\`\\`    \n。如下:  \n普通段落：  \nvoid main()  \n{  \nprint(\"Hello World!\");  \n}\n\njava代码块：\n```java\n\tvoid main()\n\t{\n\tprint(\"Hello World!\");\n\t}\n```\n<h2 id='6'>强调</h2>\n\n在强调内容两侧分别加上【`*`】或者【`_`】，如：\n\n>\\*斜体\\*，\\_斜体\\_\n\\**粗体\\**，\\__粗体\\__\n\n效果：\n>*斜体*，_斜体_  \n**粗体**，__粗体__\n<h2 id='7'>自动链接</h2>\n\n链接有两种形式生成：`行内式`和`参考式`。  \n\n- 行内式:  \n\t>\\[XiaoTong's Blog](https://hdlxt.github.io/)。  \n\t\n\t效果：  \n\t>[XiaoTong's Blog](https://hdlxt.github.io/)。\n\n- 参考式\n\t>\\[XiaoTong's Blog][1]  \n\t>\\[1]:https://hdlxt.github.io/  \n\t\n\t效果：\n > [XiaoTong's Blog][1]。  \n  [1]:https://hdlxt.github.io/\n\n<h2 id='9'>水平分割线</h2>\n\n如果一行中只有三个以上的连字符, 星号, 或者下划线则会在该位置生成一个 `<hr />` 标签. 星号和连字符之间的空格也是允许的. 下面的例子都会生成一条水平线:  \n如：  \n> \\***  \n\\---  \n\\* * *  \n\\- - -  \n\n效果：  \n>***\n>---\n>* * *\n- - -\n<h2 id='10'>图片</h2>\n\n通常, 要用 \"原生\" 的语法在纯文本格式中插入图片是很困难的.\nMarkdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.\n内联图片语法如下:  \n\\![Alt text]\\(/path/to/img.jpg)  \n\\![Alt text]\\(/path/to/img.jpg \"Optional title\")  \n也就是:\n一个感叹号: !;  \n紧跟着一对方括号, 包含了图片的 alt 属性;  \n紧跟着一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.  \n引用图片语法如下:  \n\\!\\[Alt text]\\[id]  \n\"id\" 是图片引用的名称. 图片引用使用链接定义的相同语法:  \n\\[id]: url/to/image  \"Optional title attribute\"  \nMarkdown 没有语法指定图片尺寸; 如果需要指定图片尺寸, 可以使用HTML`<img>` 标签.  \n示例如：  \n>\\![avatar]\\(/images/avatar.jpg)  \n\n效果：\n![avatar](/images/avatar.jpg)  \n\t\n","source":"_posts/2018-12-31-MarkDown回顾与熟悉.md","raw":"---\ntitle: MarkDown常用语法回顾与熟悉\ndate: 2018-12-31 23:30:12\ntags:\n- MarkDown\ncategories:\n- 编辑工具\ncopyright: true\n---\n> 这两天利用元旦假期的空闲时间捣鼓了一个初版的博客，目前还有一些小问题待完善，后续有精力再继续完善。这第一篇就用于熟悉MarkDown语法了，为以后奠定基础。\n<!--more -->\n## 目录\n* [**标题**](#1)\n* [**锚点**](#11)\n* [**段落与换行**](#2)\n* [**区块引用**](#3)\n* [**列表**](#4)\n* [**代码**](#5)\n* [**强调**](#6)\n* [**自动链接**](#7)\n* [**表格**](#8)\n* [**分割线**](#9)\n* [**图片**](#10)\n\n---\n\n<h2 id='1'>标题</h2>\n\n在文字前面添加【#】即可创建一至六级标题，详情如下： \n\t# 一级标题\n\t\n\t## 二级标题\n\t\n\t### 三级标题\n\t\n\t#### 四级标题\n\t\n\t##### 五级标题\n\t\n\t###### 六级标题\n效果如下：\n![title](/images/20190101/title.png)  \n<h2 id='11'>锚点</h2>\n\n利用锚点可进行页面内跳转（文章目录即为锚点语法制作），详情如下：\n> `[**标题**](#title)`  【#】后面的`title`对应下面的`id='title'`\n> \n> `<h2 id='title'>标题</h2>`\n\n效果：\n>点击【标题】目录可自动跳转到下面的标题模块\n\n<h2 id='2'>段落与换行</h2>\n\n>**段落**：段落就是连续行上的文本, 一个或多个空行划分不同的段落. (空行的含义就只要是看起来是空行就行了 -- 即使包含了 spaces 或者 等空白符也是空行.) 普通段落不应该使用缩进.  \n>\n>**换行**：只需要在行尾加上两个及以上的空格, 即可自动换行\n\n<h2 id='3'>区块引用</h2>\n\n> \\>区块引用\n\n> \\>>这是嵌套区块引用\n\n效果：\n>区块引用\n> >这是嵌套区块引用\n\n<h2 id='4'>列表</h2>\n\n无序列表可用【`+`】、【`*`】、【`-`】符号表示无序列表(符号和文字之间有一个空格)，如下：\n>-（+\\*） 第一项   \n>-（+\\*） 第二项   \n>- （+\\*）第三项\n\n效果：\n>* 第一项 \n* 第二项 \n* 第三项\n\n无序列表用数字加【`.`】来标识(【`.`】符号和文字之间有一个空格)，如下：\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项  \n\n效果：\n> 1. 第一项 \n> 2. 第二项 \n> 3. 第三项  \n<h2 id='5'>代码</h2>\n\n代码区块:语法   \n\\`\\`\\`语言  \nXXXXXX  \n\\`\\`\\`    \n。如下:  \n普通段落：  \nvoid main()  \n{  \nprint(\"Hello World!\");  \n}\n\njava代码块：\n```java\n\tvoid main()\n\t{\n\tprint(\"Hello World!\");\n\t}\n```\n<h2 id='6'>强调</h2>\n\n在强调内容两侧分别加上【`*`】或者【`_`】，如：\n\n>\\*斜体\\*，\\_斜体\\_\n\\**粗体\\**，\\__粗体\\__\n\n效果：\n>*斜体*，_斜体_  \n**粗体**，__粗体__\n<h2 id='7'>自动链接</h2>\n\n链接有两种形式生成：`行内式`和`参考式`。  \n\n- 行内式:  \n\t>\\[XiaoTong's Blog](https://hdlxt.github.io/)。  \n\t\n\t效果：  \n\t>[XiaoTong's Blog](https://hdlxt.github.io/)。\n\n- 参考式\n\t>\\[XiaoTong's Blog][1]  \n\t>\\[1]:https://hdlxt.github.io/  \n\t\n\t效果：\n > [XiaoTong's Blog][1]。  \n  [1]:https://hdlxt.github.io/\n\n<h2 id='9'>水平分割线</h2>\n\n如果一行中只有三个以上的连字符, 星号, 或者下划线则会在该位置生成一个 `<hr />` 标签. 星号和连字符之间的空格也是允许的. 下面的例子都会生成一条水平线:  \n如：  \n> \\***  \n\\---  \n\\* * *  \n\\- - -  \n\n效果：  \n>***\n>---\n>* * *\n- - -\n<h2 id='10'>图片</h2>\n\n通常, 要用 \"原生\" 的语法在纯文本格式中插入图片是很困难的.\nMarkdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.\n内联图片语法如下:  \n\\![Alt text]\\(/path/to/img.jpg)  \n\\![Alt text]\\(/path/to/img.jpg \"Optional title\")  \n也就是:\n一个感叹号: !;  \n紧跟着一对方括号, 包含了图片的 alt 属性;  \n紧跟着一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.  \n引用图片语法如下:  \n\\!\\[Alt text]\\[id]  \n\"id\" 是图片引用的名称. 图片引用使用链接定义的相同语法:  \n\\[id]: url/to/image  \"Optional title attribute\"  \nMarkdown 没有语法指定图片尺寸; 如果需要指定图片尺寸, 可以使用HTML`<img>` 标签.  \n示例如：  \n>\\![avatar]\\(/images/avatar.jpg)  \n\n效果：\n![avatar](/images/avatar.jpg)  \n\t\n","slug":"2018-12-31-MarkDown回顾与熟悉","published":1,"updated":"2019-03-04T13:49:49.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3d4fgck0000ikvk1nvd81us","content":"<blockquote>\n<p>这两天利用元旦假期的空闲时间捣鼓了一个初版的博客，目前还有一些小问题待完善，后续有精力再继续完善。这第一篇就用于熟悉MarkDown语法了，为以后奠定基础。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>标题</strong></a></li>\n<li><a href=\"#11\"><strong>锚点</strong></a></li>\n<li><a href=\"#2\"><strong>段落与换行</strong></a></li>\n<li><a href=\"#3\"><strong>区块引用</strong></a></li>\n<li><a href=\"#4\"><strong>列表</strong></a></li>\n<li><a href=\"#5\"><strong>代码</strong></a></li>\n<li><a href=\"#6\"><strong>强调</strong></a></li>\n<li><a href=\"#7\"><strong>自动链接</strong></a></li>\n<li><a href=\"#8\"><strong>表格</strong></a></li>\n<li><a href=\"#9\"><strong>分割线</strong></a></li>\n<li><a href=\"#10\"><strong>图片</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">标题</h2>\n\n<p>在文字前面添加【#】即可创建一至六级标题，详情如下： </p>\n<pre><code># 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n</code></pre><p>效果如下：<br><img src=\"/images/20190101/title.png\" alt=\"title\">  </p>\n<h2 id=\"11\">锚点</h2>\n\n<p>利用锚点可进行页面内跳转（文章目录即为锚点语法制作），详情如下：</p>\n<blockquote>\n<p><code>[**标题**](#title)</code>  【#】后面的<code>title</code>对应下面的<code>id=&#39;title&#39;</code></p>\n<p><code>&lt;h2 id=&#39;title&#39;&gt;标题&lt;/h2&gt;</code></p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>点击【标题】目录可自动跳转到下面的标题模块</p>\n</blockquote>\n<h2 id=\"2\">段落与换行</h2>\n\n<blockquote>\n<p><strong>段落</strong>：段落就是连续行上的文本, 一个或多个空行划分不同的段落. (空行的含义就只要是看起来是空行就行了 – 即使包含了 spaces 或者 等空白符也是空行.) 普通段落不应该使用缩进.  </p>\n<p><strong>换行</strong>：只需要在行尾加上两个及以上的空格, 即可自动换行</p>\n</blockquote>\n<h2 id=\"3\">区块引用</h2>\n\n<blockquote>\n<p>>区块引用</p>\n</blockquote>\n<blockquote>\n<p>>&gt;这是嵌套区块引用</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>区块引用</p>\n<blockquote>\n<p>这是嵌套区块引用</p>\n</blockquote>\n</blockquote>\n<h2 id=\"4\">列表</h2>\n\n<p>无序列表可用【<code>+</code>】、【<code>*</code>】、【<code>-</code>】符号表示无序列表(符号和文字之间有一个空格)，如下：</p>\n<blockquote>\n<p>-（+*） 第一项<br>-（+*） 第二项   </p>\n<ul>\n<li>（+*）第三项</li>\n</ul>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ul>\n<li>第一项 </li>\n<li>第二项 </li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<p>无序列表用数字加【<code>.</code>】来标识(【<code>.</code>】符号和文字之间有一个空格)，如下：</p>\n<blockquote>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项  </li>\n</ol>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ol>\n<li>第一项 </li>\n<li>第二项 </li>\n<li>第三项  </li>\n</ol>\n</blockquote>\n<h2 id=\"5\">代码</h2>\n\n<p>代码区块:语法<br>```语言<br>XXXXXX<br>```<br>。如下:<br>普通段落：<br>void main()<br>{<br>print(“Hello World!”);<br>}</p>\n<p>java代码块：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">print(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6\">强调</h2>\n\n<p>在强调内容两侧分别加上【<code>*</code>】或者【<code>_</code>】，如：</p>\n<blockquote>\n<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><em>斜体</em>，_斜体_<br><strong>粗体</strong>，<strong>粗体</strong></p>\n</blockquote>\n<h2 id=\"7\">自动链接</h2>\n\n<p>链接有两种形式生成：<code>行内式</code>和<code>参考式</code>。  </p>\n<ul>\n<li><p>行内式:  </p>\n<blockquote>\n<p>[XiaoTong’s Blog](<a href=\"https://hdlxt.github.io/)。\" target=\"_blank\" rel=\"noopener\">https://hdlxt.github.io/)。</a>  </p>\n</blockquote>\n<p>  效果：  </p>\n<blockquote>\n<p><a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">XiaoTong’s Blog</a>。</p>\n</blockquote>\n</li>\n<li><p>参考式</p>\n<blockquote>\n<p>[XiaoTong’s Blog]<a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">1</a><br>[1]:<a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">https://hdlxt.github.io/</a>  </p>\n</blockquote>\n<p>  效果：</p>\n<blockquote>\n<p><a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">XiaoTong’s Blog</a>。  </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"9\">水平分割线</h2>\n\n<p>如果一行中只有三个以上的连字符, 星号, 或者下划线则会在该位置生成一个 <code>&lt;hr /&gt;</code> 标签. 星号和连字符之间的空格也是允许的. 下面的例子都会生成一条水平线:<br>如：  </p>\n<blockquote>\n<p>**<em><br>-–<br>\\</em> <em> </em><br>- - -  </p>\n</blockquote>\n<p>效果：  </p>\n<blockquote>\n<hr>\n<hr>\n<hr>\n</blockquote>\n<hr>\n<h2 id=\"10\">图片</h2>\n\n<p>通常, 要用 “原生” 的语法在纯文本格式中插入图片是很困难的.<br>Markdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.<br>内联图片语法如下:<br>![Alt text](/path/to/img.jpg)<br>![Alt text](/path/to/img.jpg “Optional title”)<br>也就是:<br>一个感叹号: !;<br>紧跟着一对方括号, 包含了图片的 alt 属性;<br>紧跟着一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.<br>引用图片语法如下:<br>![Alt text][id]<br>“id” 是图片引用的名称. 图片引用使用链接定义的相同语法:<br>[id]: url/to/image  “Optional title attribute”<br>Markdown 没有语法指定图片尺寸; 如果需要指定图片尺寸, 可以使用HTML<code>&lt;img&gt;</code> 标签.<br>示例如：  </p>\n<blockquote>\n<p>![avatar](/images/avatar.jpg)  </p>\n</blockquote>\n<p>效果：<br><img src=\"/images/avatar.jpg\" alt=\"avatar\">  </p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这两天利用元旦假期的空闲时间捣鼓了一个初版的博客，目前还有一些小问题待完善，后续有精力再继续完善。这第一篇就用于熟悉MarkDown语法了，为以后奠定基础。<br>","more":"</p>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>标题</strong></a></li>\n<li><a href=\"#11\"><strong>锚点</strong></a></li>\n<li><a href=\"#2\"><strong>段落与换行</strong></a></li>\n<li><a href=\"#3\"><strong>区块引用</strong></a></li>\n<li><a href=\"#4\"><strong>列表</strong></a></li>\n<li><a href=\"#5\"><strong>代码</strong></a></li>\n<li><a href=\"#6\"><strong>强调</strong></a></li>\n<li><a href=\"#7\"><strong>自动链接</strong></a></li>\n<li><a href=\"#8\"><strong>表格</strong></a></li>\n<li><a href=\"#9\"><strong>分割线</strong></a></li>\n<li><a href=\"#10\"><strong>图片</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">标题</h2>\n\n<p>在文字前面添加【#】即可创建一至六级标题，详情如下： </p>\n<pre><code># 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n</code></pre><p>效果如下：<br><img src=\"/images/20190101/title.png\" alt=\"title\">  </p>\n<h2 id=\"11\">锚点</h2>\n\n<p>利用锚点可进行页面内跳转（文章目录即为锚点语法制作），详情如下：</p>\n<blockquote>\n<p><code>[**标题**](#title)</code>  【#】后面的<code>title</code>对应下面的<code>id=&#39;title&#39;</code></p>\n<p><code>&lt;h2 id=&#39;title&#39;&gt;标题&lt;/h2&gt;</code></p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>点击【标题】目录可自动跳转到下面的标题模块</p>\n</blockquote>\n<h2 id=\"2\">段落与换行</h2>\n\n<blockquote>\n<p><strong>段落</strong>：段落就是连续行上的文本, 一个或多个空行划分不同的段落. (空行的含义就只要是看起来是空行就行了 – 即使包含了 spaces 或者 等空白符也是空行.) 普通段落不应该使用缩进.  </p>\n<p><strong>换行</strong>：只需要在行尾加上两个及以上的空格, 即可自动换行</p>\n</blockquote>\n<h2 id=\"3\">区块引用</h2>\n\n<blockquote>\n<p>>区块引用</p>\n</blockquote>\n<blockquote>\n<p>>&gt;这是嵌套区块引用</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>区块引用</p>\n<blockquote>\n<p>这是嵌套区块引用</p>\n</blockquote>\n</blockquote>\n<h2 id=\"4\">列表</h2>\n\n<p>无序列表可用【<code>+</code>】、【<code>*</code>】、【<code>-</code>】符号表示无序列表(符号和文字之间有一个空格)，如下：</p>\n<blockquote>\n<p>-（+*） 第一项<br>-（+*） 第二项   </p>\n<ul>\n<li>（+*）第三项</li>\n</ul>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ul>\n<li>第一项 </li>\n<li>第二项 </li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<p>无序列表用数字加【<code>.</code>】来标识(【<code>.</code>】符号和文字之间有一个空格)，如下：</p>\n<blockquote>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项  </li>\n</ol>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ol>\n<li>第一项 </li>\n<li>第二项 </li>\n<li>第三项  </li>\n</ol>\n</blockquote>\n<h2 id=\"5\">代码</h2>\n\n<p>代码区块:语法<br>```语言<br>XXXXXX<br>```<br>。如下:<br>普通段落：<br>void main()<br>{<br>print(“Hello World!”);<br>}</p>\n<p>java代码块：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">print(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6\">强调</h2>\n\n<p>在强调内容两侧分别加上【<code>*</code>】或者【<code>_</code>】，如：</p>\n<blockquote>\n<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><em>斜体</em>，_斜体_<br><strong>粗体</strong>，<strong>粗体</strong></p>\n</blockquote>\n<h2 id=\"7\">自动链接</h2>\n\n<p>链接有两种形式生成：<code>行内式</code>和<code>参考式</code>。  </p>\n<ul>\n<li><p>行内式:  </p>\n<blockquote>\n<p>[XiaoTong’s Blog](<a href=\"https://hdlxt.github.io/)。\" target=\"_blank\" rel=\"noopener\">https://hdlxt.github.io/)。</a>  </p>\n</blockquote>\n<p>  效果：  </p>\n<blockquote>\n<p><a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">XiaoTong’s Blog</a>。</p>\n</blockquote>\n</li>\n<li><p>参考式</p>\n<blockquote>\n<p>[XiaoTong’s Blog]<a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">1</a><br>[1]:<a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">https://hdlxt.github.io/</a>  </p>\n</blockquote>\n<p>  效果：</p>\n<blockquote>\n<p><a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">XiaoTong’s Blog</a>。  </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"9\">水平分割线</h2>\n\n<p>如果一行中只有三个以上的连字符, 星号, 或者下划线则会在该位置生成一个 <code>&lt;hr /&gt;</code> 标签. 星号和连字符之间的空格也是允许的. 下面的例子都会生成一条水平线:<br>如：  </p>\n<blockquote>\n<p>**<em><br>-–<br>\\</em> <em> </em><br>- - -  </p>\n</blockquote>\n<p>效果：  </p>\n<blockquote>\n<hr>\n<hr>\n<hr>\n</blockquote>\n<hr>\n<h2 id=\"10\">图片</h2>\n\n<p>通常, 要用 “原生” 的语法在纯文本格式中插入图片是很困难的.<br>Markdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.<br>内联图片语法如下:<br>![Alt text](/path/to/img.jpg)<br>![Alt text](/path/to/img.jpg “Optional title”)<br>也就是:<br>一个感叹号: !;<br>紧跟着一对方括号, 包含了图片的 alt 属性;<br>紧跟着一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.<br>引用图片语法如下:<br>![Alt text][id]<br>“id” 是图片引用的名称. 图片引用使用链接定义的相同语法:<br>[id]: url/to/image  “Optional title attribute”<br>Markdown 没有语法指定图片尺寸; 如果需要指定图片尺寸, 可以使用HTML<code>&lt;img&gt;</code> 标签.<br>示例如：  </p>\n<blockquote>\n<p>![avatar](/images/avatar.jpg)  </p>\n</blockquote>\n<p>效果：<br><img src=\"/images/avatar.jpg\" alt=\"avatar\">  </p>"},{"title":"Spring Data JPA 1.0x版本中getOne和findOne区别","date":"2019-01-13T03:30:12.000Z","copyright":true,"_content":"上个项目初期，由于不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。\n<!--more-->\n## 目录\n* [**API说明**](#1)\n* [**使用说明**](#2)\n\n---\n<h2 id='1'>API说明</h2>\n\n```java\n/**\n * Retrieves an entity by its id.\n * \n * @param id must not be {@literal null}.\n * @return the entity with the given id or {@literal null} if none found\n * 返回具有给定ID的实体，如果找不到，则返回@literal null\n * @throws IllegalArgumentException if {@code id} is {@literal null}\n */\nT findOne(ID id);\n/**\n * Returns a reference to the entity with the given identifier.\n * \n * @param id must not be {@literal null}.\n * @return a reference to the entity with the given identifier.\n * 返回对具有给定标识符的实体的引用。(延迟加载)\n * @see EntityManager#getReference(Class, Object)\n */\nT getOne(ID id);\n```\n\n<h2 id='2'>使用说明</h2>\n\nfindOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同\n\n- findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（[Spring Data JPA 2.0X版本之后findOne方法被findById方法替换](http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/)）\n\n- getOne方法为延迟加载\n\n  - 执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用`xxx==null`来判断是否有返回结果。\n\n  - 当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出`EntityNotFoundException`异常，如下：\n\n    ![exception](/images/20190120/exception.png)\n\n\n","source":"_posts/2019-01-13-Spring Data JPA 1.0x版本中getOne和findOne区别.md","raw":"---\ntitle: Spring Data JPA 1.0x版本中getOne和findOne区别\ndate: 2019-01-13 11:30:12\ntags:\n- Spring Data JPA\ncategories:\n- Spring\ncopyright: true\n---\n上个项目初期，由于不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。\n<!--more-->\n## 目录\n* [**API说明**](#1)\n* [**使用说明**](#2)\n\n---\n<h2 id='1'>API说明</h2>\n\n```java\n/**\n * Retrieves an entity by its id.\n * \n * @param id must not be {@literal null}.\n * @return the entity with the given id or {@literal null} if none found\n * 返回具有给定ID的实体，如果找不到，则返回@literal null\n * @throws IllegalArgumentException if {@code id} is {@literal null}\n */\nT findOne(ID id);\n/**\n * Returns a reference to the entity with the given identifier.\n * \n * @param id must not be {@literal null}.\n * @return a reference to the entity with the given identifier.\n * 返回对具有给定标识符的实体的引用。(延迟加载)\n * @see EntityManager#getReference(Class, Object)\n */\nT getOne(ID id);\n```\n\n<h2 id='2'>使用说明</h2>\n\nfindOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同\n\n- findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（[Spring Data JPA 2.0X版本之后findOne方法被findById方法替换](http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/)）\n\n- getOne方法为延迟加载\n\n  - 执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用`xxx==null`来判断是否有返回结果。\n\n  - 当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出`EntityNotFoundException`异常，如下：\n\n    ![exception](/images/20190120/exception.png)\n\n\n","slug":"2019-01-13-Spring Data JPA 1.0x版本中getOne和findOne区别","published":1,"updated":"2019-03-04T13:49:49.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3d4fgd30002ikvk45q612oy","content":"<p>上个项目初期，由于不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。<br><a id=\"more\"></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API说明</strong></a></li>\n<li><a href=\"#2\"><strong>使用说明</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">API说明</h2>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Retrieves an entity by its id.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the entity with the given id or &#123;<span class=\"doctag\">@literal</span> null&#125; if none found</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回具有给定ID的实体，如果找不到，则返回<span class=\"doctag\">@literal</span> null</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if &#123;<span class=\"doctag\">@code</span> id&#125; is &#123;<span class=\"doctag\">@literal</span> null&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">findOne</span><span class=\"params\">(ID id)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回对具有给定标识符的实体的引用。(延迟加载)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> EntityManager#getReference(Class, Object)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">getOne</span><span class=\"params\">(ID id)</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2\">使用说明</h2>\n\n<p>findOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同</p>\n<ul>\n<li><p>findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（<a href=\"http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/\" target=\"_blank\" rel=\"noopener\">Spring Data JPA 2.0X版本之后findOne方法被findById方法替换</a>）</p>\n</li>\n<li><p>getOne方法为延迟加载</p>\n<ul>\n<li><p>执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用<code>xxx==null</code>来判断是否有返回结果。</p>\n</li>\n<li><p>当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出<code>EntityNotFoundException</code>异常，如下：</p>\n<p><img src=\"/images/20190120/exception.png\" alt=\"exception\"></p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上个项目初期，由于不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。<br>","more":"</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API说明</strong></a></li>\n<li><a href=\"#2\"><strong>使用说明</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">API说明</h2>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Retrieves an entity by its id.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the entity with the given id or &#123;<span class=\"doctag\">@literal</span> null&#125; if none found</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回具有给定ID的实体，如果找不到，则返回<span class=\"doctag\">@literal</span> null</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if &#123;<span class=\"doctag\">@code</span> id&#125; is &#123;<span class=\"doctag\">@literal</span> null&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">findOne</span><span class=\"params\">(ID id)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回对具有给定标识符的实体的引用。(延迟加载)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> EntityManager#getReference(Class, Object)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">getOne</span><span class=\"params\">(ID id)</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2\">使用说明</h2>\n\n<p>findOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同</p>\n<ul>\n<li><p>findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（<a href=\"http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/\" target=\"_blank\" rel=\"noopener\">Spring Data JPA 2.0X版本之后findOne方法被findById方法替换</a>）</p>\n</li>\n<li><p>getOne方法为延迟加载</p>\n<ul>\n<li><p>执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用<code>xxx==null</code>来判断是否有返回结果。</p>\n</li>\n<li><p>当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出<code>EntityNotFoundException</code>异常，如下：</p>\n<p><img src=\"/images/20190120/exception.png\" alt=\"exception\"></p>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"Spring Data JPA 2.0X版本之后findOne方法被findById方法替换","date":"2019-01-13T09:30:12.000Z","copyright":true,"_content":"在使用Spring Boot2.0整合Spring Data JPA时，发现继承`JpaRepository`接口之后无findOne方法，经查阅资料之后，发现已被新的API`findById`方法替换，新的API结合了java8的语法`Optional`（一个专门用于避免空指针NPE而开发的类），使用起来更为方便。\n<!--more-->\n## 目录\n* [**API说明**](#1)\n* [**使用示例**](#2)\n* [**参考链接**](#3)\n\n\n---\n<h2 id='1'>API说明</h2>\n\n新的API接口如下，去掉了findOne方法，添加了返回值为`Optional<T>`的`findById`方法,调用`findById`方法之后，返回`Optional`的实例，调用`Optional`的`get()`方法即可获取到实体。\n```java\npackage org.springframework.data.repository;\n@NoRepositoryBean\npublic interface CrudRepository<T, ID> extends Repository<T, ID> {\n    <S extends T> S save(S var1);\n\n    <S extends T> Iterable<S> saveAll(Iterable<S> var1);\n \t//新的根据主键获取实体的方法\n    Optional<T> findById(ID var1);\n\n    boolean existsById(ID var1);\n\n    Iterable<T> findAll();\n\n    Iterable<T> findAllById(Iterable<ID> var1);\n\n    long count();\n\n    void deleteById(ID var1);\n\n    void delete(T var1);\n\n    void deleteAll(Iterable<? extends T> var1);\n\n    void deleteAll();\n}\n\n\n\npackage java.util;\npublic final class Optional<T> {\n\t....\n\n   /**\n     * If a value is present in this {@code Optional}, returns the value,\n     * otherwise throws {@code NoSuchElementException}.\n     * 如果此@code可选中存在值，则返回该值，否则抛出@code nosuchelementexception。\n     * @return the non-null value held by this {@code Optional}\n     * @throws NoSuchElementException if there is no value present\n     *\n     * @see Optional#isPresent()\n     */\n    public T get() {\n        if (value == null) {\n            throw new NoSuchElementException(\"No value present\");\n        }\n        return value;\n    }\n\n\t....\n}\n```\n\n<h2 id='2'>使用示例</h2>\n\n根据上面的`Optional`的`get()`方法API注释说明可知，直接调用`get()`方法可能会跑出异常，以下为简单参考示例：\n```java\n\t//不建议姿势\n\ttry {\n\t    User user1 = userDao.findById(1L).get();\n\t}catch (Exception e){\n\t    //实体不存在，捕获异常\n\t}\n\t\n\t//相对费劲姿势\n\tOptional<User> user2 = userDao.findById(1L);\n\tif(user2.isPresent()){\n\t    //实体存在\n\t}else{\n\t    //实体不存在\n\t}\n\n\t//建议姿势，存在返回实体，不存在不抛异常，返回null\n\tUser user3 = userDao.findById(1L).orElse(null);\n```\n\n<h2 id='3'>参考链接</h2>\n\n- https://blog.csdn.net/u012211603/article/details/79828277\n\n\t\n","source":"_posts/2019-01-13-Spring Data JPA 2.0X版本之后findOne方法被findById方法替换.md","raw":"---\ntitle: Spring Data JPA 2.0X版本之后findOne方法被findById方法替换\ndate: 2019-01-13 17:30:12\ntags:\n- Spring Data JPA\ncategories:\n- Spring\ncopyright: true\n---\n在使用Spring Boot2.0整合Spring Data JPA时，发现继承`JpaRepository`接口之后无findOne方法，经查阅资料之后，发现已被新的API`findById`方法替换，新的API结合了java8的语法`Optional`（一个专门用于避免空指针NPE而开发的类），使用起来更为方便。\n<!--more-->\n## 目录\n* [**API说明**](#1)\n* [**使用示例**](#2)\n* [**参考链接**](#3)\n\n\n---\n<h2 id='1'>API说明</h2>\n\n新的API接口如下，去掉了findOne方法，添加了返回值为`Optional<T>`的`findById`方法,调用`findById`方法之后，返回`Optional`的实例，调用`Optional`的`get()`方法即可获取到实体。\n```java\npackage org.springframework.data.repository;\n@NoRepositoryBean\npublic interface CrudRepository<T, ID> extends Repository<T, ID> {\n    <S extends T> S save(S var1);\n\n    <S extends T> Iterable<S> saveAll(Iterable<S> var1);\n \t//新的根据主键获取实体的方法\n    Optional<T> findById(ID var1);\n\n    boolean existsById(ID var1);\n\n    Iterable<T> findAll();\n\n    Iterable<T> findAllById(Iterable<ID> var1);\n\n    long count();\n\n    void deleteById(ID var1);\n\n    void delete(T var1);\n\n    void deleteAll(Iterable<? extends T> var1);\n\n    void deleteAll();\n}\n\n\n\npackage java.util;\npublic final class Optional<T> {\n\t....\n\n   /**\n     * If a value is present in this {@code Optional}, returns the value,\n     * otherwise throws {@code NoSuchElementException}.\n     * 如果此@code可选中存在值，则返回该值，否则抛出@code nosuchelementexception。\n     * @return the non-null value held by this {@code Optional}\n     * @throws NoSuchElementException if there is no value present\n     *\n     * @see Optional#isPresent()\n     */\n    public T get() {\n        if (value == null) {\n            throw new NoSuchElementException(\"No value present\");\n        }\n        return value;\n    }\n\n\t....\n}\n```\n\n<h2 id='2'>使用示例</h2>\n\n根据上面的`Optional`的`get()`方法API注释说明可知，直接调用`get()`方法可能会跑出异常，以下为简单参考示例：\n```java\n\t//不建议姿势\n\ttry {\n\t    User user1 = userDao.findById(1L).get();\n\t}catch (Exception e){\n\t    //实体不存在，捕获异常\n\t}\n\t\n\t//相对费劲姿势\n\tOptional<User> user2 = userDao.findById(1L);\n\tif(user2.isPresent()){\n\t    //实体存在\n\t}else{\n\t    //实体不存在\n\t}\n\n\t//建议姿势，存在返回实体，不存在不抛异常，返回null\n\tUser user3 = userDao.findById(1L).orElse(null);\n```\n\n<h2 id='3'>参考链接</h2>\n\n- https://blog.csdn.net/u012211603/article/details/79828277\n\n\t\n","slug":"2019-01-13-Spring Data JPA 2.0X版本之后findOne方法被findById方法替换","published":1,"updated":"2019-03-04T13:49:49.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3d4fgdu0006ikvkqcf2s6qd","content":"<p>在使用Spring Boot2.0整合Spring Data JPA时，发现继承<code>JpaRepository</code>接口之后无findOne方法，经查阅资料之后，发现已被新的API<code>findById</code>方法替换，新的API结合了java8的语法<code>Optional</code>（一个专门用于避免空指针NPE而开发的类），使用起来更为方便。<br><a id=\"more\"></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API说明</strong></a></li>\n<li><a href=\"#2\"><strong>使用示例</strong></a></li>\n<li><a href=\"#3\"><strong>参考链接</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">API说明</h2>\n\n<p>新的API接口如下，去掉了findOne方法，添加了返回值为<code>Optional&lt;T&gt;</code>的<code>findById</code>方法,调用<code>findById</code>方法之后，返回<code>Optional</code>的实例，调用<code>Optional</code>的<code>get()</code>方法即可获取到实体。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.data.repository;</span><br><span class=\"line\"><span class=\"meta\">@NoRepositoryBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Repository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; </span>&#123;</span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">S <span class=\"title\">save</span><span class=\"params\">(S var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">Iterable&lt;S&gt; <span class=\"title\">saveAll</span><span class=\"params\">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class=\"line\"> \t<span class=\"comment\">//新的根据主键获取实体的方法</span></span><br><span class=\"line\">    <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">findById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">existsById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAllById</span><span class=\"params\">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(T var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">(Iterable&lt;? extends T&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If a value is present in this &#123;<span class=\"doctag\">@code</span> Optional&#125;, returns the value,</span></span><br><span class=\"line\"><span class=\"comment\">     * otherwise throws &#123;<span class=\"doctag\">@code</span> NoSuchElementException&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果此<span class=\"doctag\">@code</span>可选中存在值，则返回该值，否则抛出<span class=\"doctag\">@code</span> nosuchelementexception。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the non-null value held by this &#123;<span class=\"doctag\">@code</span> Optional&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NoSuchElementException if there is no value present</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Optional#isPresent()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">\"No value present\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2\">使用示例</h2>\n\n<p>根据上面的<code>Optional</code>的<code>get()</code>方法API注释说明可知，直接调用<code>get()</code>方法可能会跑出异常，以下为简单参考示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不建议姿势</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    User user1 = userDao.findById(<span class=\"number\">1L</span>).get();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体不存在，捕获异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相对费劲姿势</span></span><br><span class=\"line\">Optional&lt;User&gt; user2 = userDao.findById(<span class=\"number\">1L</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(user2.isPresent())&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体存在</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体不存在</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建议姿势，存在返回实体，不存在不抛异常，返回null</span></span><br><span class=\"line\">User user3 = userDao.findById(<span class=\"number\">1L</span>).orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3\">参考链接</h2>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/u012211603/article/details/79828277\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012211603/article/details/79828277</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在使用Spring Boot2.0整合Spring Data JPA时，发现继承<code>JpaRepository</code>接口之后无findOne方法，经查阅资料之后，发现已被新的API<code>findById</code>方法替换，新的API结合了java8的语法<code>Optional</code>（一个专门用于避免空指针NPE而开发的类），使用起来更为方便。<br>","more":"</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API说明</strong></a></li>\n<li><a href=\"#2\"><strong>使用示例</strong></a></li>\n<li><a href=\"#3\"><strong>参考链接</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">API说明</h2>\n\n<p>新的API接口如下，去掉了findOne方法，添加了返回值为<code>Optional&lt;T&gt;</code>的<code>findById</code>方法,调用<code>findById</code>方法之后，返回<code>Optional</code>的实例，调用<code>Optional</code>的<code>get()</code>方法即可获取到实体。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.data.repository;</span><br><span class=\"line\"><span class=\"meta\">@NoRepositoryBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Repository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; </span>&#123;</span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">S <span class=\"title\">save</span><span class=\"params\">(S var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">Iterable&lt;S&gt; <span class=\"title\">saveAll</span><span class=\"params\">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class=\"line\"> \t<span class=\"comment\">//新的根据主键获取实体的方法</span></span><br><span class=\"line\">    <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">findById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">existsById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAllById</span><span class=\"params\">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(T var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">(Iterable&lt;? extends T&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If a value is present in this &#123;<span class=\"doctag\">@code</span> Optional&#125;, returns the value,</span></span><br><span class=\"line\"><span class=\"comment\">     * otherwise throws &#123;<span class=\"doctag\">@code</span> NoSuchElementException&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果此<span class=\"doctag\">@code</span>可选中存在值，则返回该值，否则抛出<span class=\"doctag\">@code</span> nosuchelementexception。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the non-null value held by this &#123;<span class=\"doctag\">@code</span> Optional&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NoSuchElementException if there is no value present</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Optional#isPresent()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">\"No value present\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2\">使用示例</h2>\n\n<p>根据上面的<code>Optional</code>的<code>get()</code>方法API注释说明可知，直接调用<code>get()</code>方法可能会跑出异常，以下为简单参考示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不建议姿势</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    User user1 = userDao.findById(<span class=\"number\">1L</span>).get();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体不存在，捕获异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相对费劲姿势</span></span><br><span class=\"line\">Optional&lt;User&gt; user2 = userDao.findById(<span class=\"number\">1L</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(user2.isPresent())&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体存在</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体不存在</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建议姿势，存在返回实体，不存在不抛异常，返回null</span></span><br><span class=\"line\">User user3 = userDao.findById(<span class=\"number\">1L</span>).orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3\">参考链接</h2>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/u012211603/article/details/79828277\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012211603/article/details/79828277</a></li>\n</ul>"},{"title":"Spring Data JPA实体的生命周期总结","date":"2019-01-19T01:30:12.000Z","copyright":true,"_content":"Spring Data JPA是对JPA规范的再次封装和抽象，底层使用HIbernate JPA实现，Hibernate实体有三种状态，而Spring Data JPA实体生命周期也有类似的瞬时、托管、删除、游离四种状态，本文记录对实体四种状态的理解和验证过程。\n<!--more-->\n\n## 目录\n\n- [**四种状态**](#1)\n\n- [**API示例**](#2)\n\n  - [**persist**](#2.1)\n  - [**remove**](#2.2)\n  - [**merge**](#2.3)\n  - [**refresh**](#2.4)\n\n- [**参考链接**](#3)\n\n  \n\n---\n\n<h2 id='1'>四种状态</h2>\n\n首先以一张图，简单介绍写实体生命周期中四种状态之间的转换关系：\n\n![jpa-entity](/images/20190120/jpa-entity.png)\n\n**瞬时（New）：**瞬时对象，刚New出来的对象，无id，还未和持久化上下文（Persistence Context）建立关联。\n\n**托管（Managed）：**托管对象，有id，已和持久化上下文（Persistence Context）建立关联，对象属性的所有改动均会影响到数据库中对应记录。\n\n - 瞬时对象调用em.persist（）方法之后，对象由瞬时状态转换为托管状态\n - 通过find、get、query等方法，查询出来的对象为托管状态\n - 游离状态的对象调用em.merge方法，对象由游离状态转换为托管状态\n\n**游离（Datached）：**游离对象，有id值，但没有和持久化上下文（Persistence Context）建立关联。\n\n- 托管状态对象提交事务之后，对象状态由托管状态转换为游离状态\n- 托管状态对象调用em.clear()方法之后，对象状态由托管状态转换为游离状态\n- New出来的对象，id赋值之后，也为游离状态\n\n**删除（Removed）：**执行删除方法（em.remove()）但未提交事务的对象，有id值，没有和持久化上下文（Persistence Context）建立关联，即将从数据库中删除。\n\n<h2 id='2'>API示例</h2>\n\n> 针对JPA规范的四个方法，写了一个简单的Demo，进行了一一的验证，以下进行验证过程说明，完整代码传送门：https://github.com/hdlxt/SpringDataJpaDemo.git\n\n整体结构如下：\n\n![com.example.demo.controller](/images/20190124/demo.png)\n\n<h3 id='2.1'>persist</h3>\n\n**不同状态下执行em.persist()方法产生结果：**\n\n- 瞬时态：转化为托管态\n- 托管态：不发生改变，但执行instert语句\n- 删除态：转化为托管态\n- 游离态：**抛异常**\n\n**验证删除态和游离态持久化如下**:\n\n**1.持久化删除态**\n\n- 代码\n\n```java\n    /**\n      * 持久化删除态的对象\n      *@param id\n      * @return\n      */\n    @RequestMapping(\"/persistRemove/{id}\")\n    public String persistRemove(@PathVariable(\"id\")Long id){\n        try {\n            User user = userDao.findById(id);\n            userDao.persistRemove(user);\n        }catch (Exception e){\n            logger.error(\"持久化一个删除态的对象!\",e);\n            return REPONSE_ERR;\n        }\n        return REPONSE_SUCCESS;\n    }\n--------------------------------------------------------\n    /**\n     * 持久化删除态的对象\n     *\n     * @param user\n     */\n    @Override\n    public void persistRemove(User user) {\n        remove(user);\n        persist(user);\n        user.setName(\"persist remove success!\");\n    }   \n```\n\n\n\n- 步骤\n  - http://localhost:8080/user/persisNew/lxt/001，插入一条数据\n  - http://localhost:8080/user/list，检查插入结果，并获取`id`\n  - http://localhost:8080/user/persistRemove/{id} ,返回`SUCCESS！`\n  - http://localhost:8080/user/list  查看结果\n- 结果：结果数据并未删除，而且`name`由`lxt`变为`persist remove success!`\n\n**2.持久化游离态**\n\n- 代码\n\n  ```java\n     /**\n       * 持久化游离态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/persisDetached/{id}\")\n      public String persisDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.clear();\n              userDao.persist(user);\n          }catch (Exception e){\n              logger.error(\"持久化一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/persisDetached/{id} 返回`ERROR！`\n\n- 结果：抛异常\n\n  ```java\n  2019-01-26 00:00:34.090 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 持久化一个游离态的对象!\n  org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.example.demo.entity.User; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.example.demo.entity.User\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:317) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  \t....\n  ```\n\n<h3 id='2.2'>remove</h3>\n\n**不同状态下执行em.remove()方法产生结果：**\n\n- 瞬时态：对状态无影响，后台打印日志\n- 托管态：转化为托管态\n- 删除态：无影响，什么都不发生\n- 游离态：抛异常`Removing a detached instance com.example.demo.entity.User...`\n\n**验证过程如下：**\n\n**1.瞬时态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除new出来的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeNew\")\n      public String removeNew(){\n          try {\n              User user = new User().setName(\"lxt\").setNumber(\"007\");\n              userDao.remove(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个new的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/removeNew\n\n- 结果：返回`SUCCESS!`后台输出日志\n\n  ```java\n  2019-01-26 00:17:32.811  INFO 10136 --- [nio-8080-exec-5] o.h.e.i.DefaultDeleteEventListener       : HHH000114: Handling transient entity in delete processing\n  ```\n\n  \n\n**2.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除 删除态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeRemove/{id}\")\n      public String removeRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.removeRemove(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  -----------------------------------------------------\n     /**\n       * 删除 删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void removeRemove(User user) {\n          remove(user);\n          remove(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/removeRemove/{id} \n\n- 结果：返回`SUCCESS！`，后台输出一个查询sql和一个删除sql，证明第二个删除没有影响\n\n  ```java\n  Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?\n  Hibernate: delete from t_user where id=?\n  ```\n\n  \n\n**3.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除游离态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeDetached/{id}\")\n      public String removeDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.removeDetached(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  -------------------------------------------------------------\n     /**\n       * 删除游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void removeDetached(User user) {\n          clear();\n          remove(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/persisDetached/{id} \n\n- 结果：返回`ERROR!`抛异常\n\n  ```\n  2019-01-26 00:14:11.071 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 删除(remove)一个游离态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Removing a detached instance com.example.demo.entity.User#5; nested exception is java.lang.IllegalArgumentException: Removing a detached instance com.example.demo.entity.User#5\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n<h3 id='2.3'>merge</h3>\n\n**不同状态下执行em.merge()方法产生结果：**\n\n- 瞬时态：提交到数据库，返回一个新的托管态的对象\n- 托管态：根据原对象返回一个新的托管态的对象\n- 删除态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]...`\n- 游离态：提交到数据库，进行更新或插入，返回一个新的托管态的对象\n\n**合并（merge）删除态和游离态验证过程如下：**\n\n**1.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 持久化删除态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/mergeRemove/{id}\")\n      public String mergeRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.mergeRemove(user);\n          }catch (Exception e){\n              logger.error(\"合并(merge)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  --------------------------------------------------------------------\n      /**\n       * 合并删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void mergeRemove(User user) {\n          remove(user);\n          merge(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/mergeRemove/{id}\n\n- 结果：返回`ERROR`抛异常！\n\n  ```java\n  2019-01-26 00:23:01.187  INFO 10136 --- [nio-8080-exec-3] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory\n  Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?\n  2019-01-26 00:23:01.322 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 合并(merge)一个删除态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]; nested exception is java.lang.IllegalArgumentException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n**2.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 持久化游离态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/mergeDetached/{id}\")\n      public String mergeDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.mergeDetached(user);\n          }catch (Exception e){\n              logger.error(\"合并(merge)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ---------------------------------------------------------------\n     /**\n       * 合并游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void mergeDetached(User user) {\n          clear();\n          User newUser = merge(user);\n          newUser.setName(\"newUser merge detached success!\");\n          user.setName(\"user merge detached success!\");\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`\n  - http://localhost:8080/user/list，查看\n\n- 结果:对应实体的`name`值变为`newUser merge detached success!`，证明返回新的对象为托管态对象\n\n**2.游离态**\n\n<h3 id='2.4'>refresh</h3>\n\n> 方法可以保证当前的实例与数据库中的实例的内容一致，**注意：是反向同步，将数据库中的数据同步到实体中**\n\n**不同状态下执行em.refresh()方法产生结果：**\n\n- 瞬时态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n- 托管态： 将数据库中的数据同步到实体中，返回一个托管态的对象。\n- 删除态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n- 游离态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n\n**总结：**只有被托管的对象才可以被refresh。\n\n**1.瞬时态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新new出来的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshNew\")\n      public String refreshNew(){\n          try {\n              User user = new User().setName(\"lxt\").setNumber(\"007\");\n              userDao.refresh(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个new的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/refreshNew\n\n- 结果：返回`ERROR!`抛异常\n\n  ```java\n  2019-01-26 00:38:18.037 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 刷新(refresh)一个new的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n**2.托管态：**\n\n- 代码\n\n  ```java\n     /**\n       * 刷新托管态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshManaged/{id}\")\n      public String refreshManaged(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshManaged(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个托管态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ------------------------------------------------------------------\n       /**\n       * 刷新托管态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshManaged(User user) {\n          user.setName(\"refresh before!\");\n          refresh(user);\n          logger.info(\"user:\"+user);\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`\n  - http://localhost:8080/user/list\n\n- 结果:数据库中数据并无变化，日志打印为数据库中查询出的值，并未打印`refresh before!`\n\n**3.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新删除态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshRemove/{id}\")\n      public String refreshRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshRemove(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ----------------------------------------------------------------------   \n     /**\n       * 刷新删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshRemove(User user) {\n         remove(user);\n         user.setName(\"refresh remove before！\");\n         refresh(user);\n          user.setName(\"refresh remove after！\");\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshRemove/{id}\n\n- 结果：返回`ERROR!`抛异常\n\n  ```java\n  2019-01-26 00:40:57.713 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 刷新(refresh)一个删除态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n**4.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新游离态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshDetached/{id}\")\n      public String refreshDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshDetached(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ----------------------------------------------------------------------\n     /**\n       * 刷新游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshDetached(User user) {\n          clear();\n          refresh(user);\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshDetached/{id},`\n\n- 结果:返回`ERROR！`抛异常！\n\n  ```java\n  2019-01-26 00:42:09.598 ERROR 10136 --- [nio-8080-exec-7] c.e.demo.controller.UserController       : 刷新(refresh)一个游离态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n<h2 id='3'>参考链接</h2>\n\n- [JPA EntityManager的四个主要方法 ——persist,merge,refresh和remove](https://blog.csdn.net/javavenus/article/details/6289616)\n- [JPA 实体生命周期理解和总结](https://blog.csdn.net/yingxiake/article/details/50968059)\n\n\n\n","source":"_posts/2019-01-19-Spring Data JPA实体的生命周期总结.md","raw":"---\ntitle: Spring Data JPA实体的生命周期总结\ndate: 2019-01-19 9:30:12\ntags:\n- Spring Data JPA\ncategories:\n- Spring\ncopyright: true\n---\nSpring Data JPA是对JPA规范的再次封装和抽象，底层使用HIbernate JPA实现，Hibernate实体有三种状态，而Spring Data JPA实体生命周期也有类似的瞬时、托管、删除、游离四种状态，本文记录对实体四种状态的理解和验证过程。\n<!--more-->\n\n## 目录\n\n- [**四种状态**](#1)\n\n- [**API示例**](#2)\n\n  - [**persist**](#2.1)\n  - [**remove**](#2.2)\n  - [**merge**](#2.3)\n  - [**refresh**](#2.4)\n\n- [**参考链接**](#3)\n\n  \n\n---\n\n<h2 id='1'>四种状态</h2>\n\n首先以一张图，简单介绍写实体生命周期中四种状态之间的转换关系：\n\n![jpa-entity](/images/20190120/jpa-entity.png)\n\n**瞬时（New）：**瞬时对象，刚New出来的对象，无id，还未和持久化上下文（Persistence Context）建立关联。\n\n**托管（Managed）：**托管对象，有id，已和持久化上下文（Persistence Context）建立关联，对象属性的所有改动均会影响到数据库中对应记录。\n\n - 瞬时对象调用em.persist（）方法之后，对象由瞬时状态转换为托管状态\n - 通过find、get、query等方法，查询出来的对象为托管状态\n - 游离状态的对象调用em.merge方法，对象由游离状态转换为托管状态\n\n**游离（Datached）：**游离对象，有id值，但没有和持久化上下文（Persistence Context）建立关联。\n\n- 托管状态对象提交事务之后，对象状态由托管状态转换为游离状态\n- 托管状态对象调用em.clear()方法之后，对象状态由托管状态转换为游离状态\n- New出来的对象，id赋值之后，也为游离状态\n\n**删除（Removed）：**执行删除方法（em.remove()）但未提交事务的对象，有id值，没有和持久化上下文（Persistence Context）建立关联，即将从数据库中删除。\n\n<h2 id='2'>API示例</h2>\n\n> 针对JPA规范的四个方法，写了一个简单的Demo，进行了一一的验证，以下进行验证过程说明，完整代码传送门：https://github.com/hdlxt/SpringDataJpaDemo.git\n\n整体结构如下：\n\n![com.example.demo.controller](/images/20190124/demo.png)\n\n<h3 id='2.1'>persist</h3>\n\n**不同状态下执行em.persist()方法产生结果：**\n\n- 瞬时态：转化为托管态\n- 托管态：不发生改变，但执行instert语句\n- 删除态：转化为托管态\n- 游离态：**抛异常**\n\n**验证删除态和游离态持久化如下**:\n\n**1.持久化删除态**\n\n- 代码\n\n```java\n    /**\n      * 持久化删除态的对象\n      *@param id\n      * @return\n      */\n    @RequestMapping(\"/persistRemove/{id}\")\n    public String persistRemove(@PathVariable(\"id\")Long id){\n        try {\n            User user = userDao.findById(id);\n            userDao.persistRemove(user);\n        }catch (Exception e){\n            logger.error(\"持久化一个删除态的对象!\",e);\n            return REPONSE_ERR;\n        }\n        return REPONSE_SUCCESS;\n    }\n--------------------------------------------------------\n    /**\n     * 持久化删除态的对象\n     *\n     * @param user\n     */\n    @Override\n    public void persistRemove(User user) {\n        remove(user);\n        persist(user);\n        user.setName(\"persist remove success!\");\n    }   \n```\n\n\n\n- 步骤\n  - http://localhost:8080/user/persisNew/lxt/001，插入一条数据\n  - http://localhost:8080/user/list，检查插入结果，并获取`id`\n  - http://localhost:8080/user/persistRemove/{id} ,返回`SUCCESS！`\n  - http://localhost:8080/user/list  查看结果\n- 结果：结果数据并未删除，而且`name`由`lxt`变为`persist remove success!`\n\n**2.持久化游离态**\n\n- 代码\n\n  ```java\n     /**\n       * 持久化游离态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/persisDetached/{id}\")\n      public String persisDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.clear();\n              userDao.persist(user);\n          }catch (Exception e){\n              logger.error(\"持久化一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/persisDetached/{id} 返回`ERROR！`\n\n- 结果：抛异常\n\n  ```java\n  2019-01-26 00:00:34.090 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 持久化一个游离态的对象!\n  org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.example.demo.entity.User; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.example.demo.entity.User\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:317) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  \t....\n  ```\n\n<h3 id='2.2'>remove</h3>\n\n**不同状态下执行em.remove()方法产生结果：**\n\n- 瞬时态：对状态无影响，后台打印日志\n- 托管态：转化为托管态\n- 删除态：无影响，什么都不发生\n- 游离态：抛异常`Removing a detached instance com.example.demo.entity.User...`\n\n**验证过程如下：**\n\n**1.瞬时态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除new出来的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeNew\")\n      public String removeNew(){\n          try {\n              User user = new User().setName(\"lxt\").setNumber(\"007\");\n              userDao.remove(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个new的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/removeNew\n\n- 结果：返回`SUCCESS!`后台输出日志\n\n  ```java\n  2019-01-26 00:17:32.811  INFO 10136 --- [nio-8080-exec-5] o.h.e.i.DefaultDeleteEventListener       : HHH000114: Handling transient entity in delete processing\n  ```\n\n  \n\n**2.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除 删除态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeRemove/{id}\")\n      public String removeRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.removeRemove(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  -----------------------------------------------------\n     /**\n       * 删除 删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void removeRemove(User user) {\n          remove(user);\n          remove(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/removeRemove/{id} \n\n- 结果：返回`SUCCESS！`，后台输出一个查询sql和一个删除sql，证明第二个删除没有影响\n\n  ```java\n  Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?\n  Hibernate: delete from t_user where id=?\n  ```\n\n  \n\n**3.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除游离态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeDetached/{id}\")\n      public String removeDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.removeDetached(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  -------------------------------------------------------------\n     /**\n       * 删除游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void removeDetached(User user) {\n          clear();\n          remove(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/persisDetached/{id} \n\n- 结果：返回`ERROR!`抛异常\n\n  ```\n  2019-01-26 00:14:11.071 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 删除(remove)一个游离态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Removing a detached instance com.example.demo.entity.User#5; nested exception is java.lang.IllegalArgumentException: Removing a detached instance com.example.demo.entity.User#5\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n<h3 id='2.3'>merge</h3>\n\n**不同状态下执行em.merge()方法产生结果：**\n\n- 瞬时态：提交到数据库，返回一个新的托管态的对象\n- 托管态：根据原对象返回一个新的托管态的对象\n- 删除态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]...`\n- 游离态：提交到数据库，进行更新或插入，返回一个新的托管态的对象\n\n**合并（merge）删除态和游离态验证过程如下：**\n\n**1.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 持久化删除态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/mergeRemove/{id}\")\n      public String mergeRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.mergeRemove(user);\n          }catch (Exception e){\n              logger.error(\"合并(merge)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  --------------------------------------------------------------------\n      /**\n       * 合并删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void mergeRemove(User user) {\n          remove(user);\n          merge(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/mergeRemove/{id}\n\n- 结果：返回`ERROR`抛异常！\n\n  ```java\n  2019-01-26 00:23:01.187  INFO 10136 --- [nio-8080-exec-3] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory\n  Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?\n  2019-01-26 00:23:01.322 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 合并(merge)一个删除态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]; nested exception is java.lang.IllegalArgumentException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n**2.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 持久化游离态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/mergeDetached/{id}\")\n      public String mergeDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.mergeDetached(user);\n          }catch (Exception e){\n              logger.error(\"合并(merge)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ---------------------------------------------------------------\n     /**\n       * 合并游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void mergeDetached(User user) {\n          clear();\n          User newUser = merge(user);\n          newUser.setName(\"newUser merge detached success!\");\n          user.setName(\"user merge detached success!\");\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`\n  - http://localhost:8080/user/list，查看\n\n- 结果:对应实体的`name`值变为`newUser merge detached success!`，证明返回新的对象为托管态对象\n\n**2.游离态**\n\n<h3 id='2.4'>refresh</h3>\n\n> 方法可以保证当前的实例与数据库中的实例的内容一致，**注意：是反向同步，将数据库中的数据同步到实体中**\n\n**不同状态下执行em.refresh()方法产生结果：**\n\n- 瞬时态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n- 托管态： 将数据库中的数据同步到实体中，返回一个托管态的对象。\n- 删除态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n- 游离态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n\n**总结：**只有被托管的对象才可以被refresh。\n\n**1.瞬时态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新new出来的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshNew\")\n      public String refreshNew(){\n          try {\n              User user = new User().setName(\"lxt\").setNumber(\"007\");\n              userDao.refresh(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个new的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/refreshNew\n\n- 结果：返回`ERROR!`抛异常\n\n  ```java\n  2019-01-26 00:38:18.037 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 刷新(refresh)一个new的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n**2.托管态：**\n\n- 代码\n\n  ```java\n     /**\n       * 刷新托管态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshManaged/{id}\")\n      public String refreshManaged(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshManaged(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个托管态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ------------------------------------------------------------------\n       /**\n       * 刷新托管态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshManaged(User user) {\n          user.setName(\"refresh before!\");\n          refresh(user);\n          logger.info(\"user:\"+user);\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`\n  - http://localhost:8080/user/list\n\n- 结果:数据库中数据并无变化，日志打印为数据库中查询出的值，并未打印`refresh before!`\n\n**3.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新删除态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshRemove/{id}\")\n      public String refreshRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshRemove(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ----------------------------------------------------------------------   \n     /**\n       * 刷新删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshRemove(User user) {\n         remove(user);\n         user.setName(\"refresh remove before！\");\n         refresh(user);\n          user.setName(\"refresh remove after！\");\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshRemove/{id}\n\n- 结果：返回`ERROR!`抛异常\n\n  ```java\n  2019-01-26 00:40:57.713 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 刷新(refresh)一个删除态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n**4.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新游离态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshDetached/{id}\")\n      public String refreshDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshDetached(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ----------------------------------------------------------------------\n     /**\n       * 刷新游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshDetached(User user) {\n          clear();\n          refresh(user);\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshDetached/{id},`\n\n- 结果:返回`ERROR！`抛异常！\n\n  ```java\n  2019-01-26 00:42:09.598 ERROR 10136 --- [nio-8080-exec-7] c.e.demo.controller.UserController       : 刷新(refresh)一个游离态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n<h2 id='3'>参考链接</h2>\n\n- [JPA EntityManager的四个主要方法 ——persist,merge,refresh和remove](https://blog.csdn.net/javavenus/article/details/6289616)\n- [JPA 实体生命周期理解和总结](https://blog.csdn.net/yingxiake/article/details/50968059)\n\n\n\n","slug":"2019-01-19-Spring Data JPA实体的生命周期总结","published":1,"updated":"2019-03-04T13:49:49.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3d4fgec0008ikvkhxl4a8yn","content":"<p>Spring Data JPA是对JPA规范的再次封装和抽象，底层使用HIbernate JPA实现，Hibernate实体有三种状态，而Spring Data JPA实体生命周期也有类似的瞬时、托管、删除、游离四种状态，本文记录对实体四种状态的理解和验证过程。<br><a id=\"more\"></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#1\"><strong>四种状态</strong></a></p>\n</li>\n<li><p><a href=\"#2\"><strong>API示例</strong></a></p>\n<ul>\n<li><a href=\"#2.1\"><strong>persist</strong></a></li>\n<li><a href=\"#2.2\"><strong>remove</strong></a></li>\n<li><a href=\"#2.3\"><strong>merge</strong></a></li>\n<li><a href=\"#2.4\"><strong>refresh</strong></a></li>\n</ul>\n</li>\n<li><p><a href=\"#3\"><strong>参考链接</strong></a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"1\">四种状态</h2>\n\n<p>首先以一张图，简单介绍写实体生命周期中四种状态之间的转换关系：</p>\n<p><img src=\"/images/20190120/jpa-entity.png\" alt=\"jpa-entity\"></p>\n<p><strong>瞬时（New）：</strong>瞬时对象，刚New出来的对象，无id，还未和持久化上下文（Persistence Context）建立关联。</p>\n<p><strong>托管（Managed）：</strong>托管对象，有id，已和持久化上下文（Persistence Context）建立关联，对象属性的所有改动均会影响到数据库中对应记录。</p>\n<ul>\n<li>瞬时对象调用em.persist（）方法之后，对象由瞬时状态转换为托管状态</li>\n<li>通过find、get、query等方法，查询出来的对象为托管状态</li>\n<li>游离状态的对象调用em.merge方法，对象由游离状态转换为托管状态</li>\n</ul>\n<p><strong>游离（Datached）：</strong>游离对象，有id值，但没有和持久化上下文（Persistence Context）建立关联。</p>\n<ul>\n<li>托管状态对象提交事务之后，对象状态由托管状态转换为游离状态</li>\n<li>托管状态对象调用em.clear()方法之后，对象状态由托管状态转换为游离状态</li>\n<li>New出来的对象，id赋值之后，也为游离状态</li>\n</ul>\n<p><strong>删除（Removed）：</strong>执行删除方法（em.remove()）但未提交事务的对象，有id值，没有和持久化上下文（Persistence Context）建立关联，即将从数据库中删除。</p>\n<h2 id=\"2\">API示例</h2>\n\n<blockquote>\n<p>针对JPA规范的四个方法，写了一个简单的Demo，进行了一一的验证，以下进行验证过程说明，完整代码传送门：<a href=\"https://github.com/hdlxt/SpringDataJpaDemo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/hdlxt/SpringDataJpaDemo.git</a></p>\n</blockquote>\n<p>整体结构如下：</p>\n<p><img src=\"/images/20190124/demo.png\" alt=\"com.example.demo.controller\"></p>\n<h3 id=\"2.1\">persist</h3>\n\n<p><strong>不同状态下执行em.persist()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：转化为托管态</li>\n<li>托管态：不发生改变，但执行instert语句</li>\n<li>删除态：转化为托管态</li>\n<li>游离态：<strong>抛异常</strong></li>\n</ul>\n<p><strong>验证删除态和游离态持久化如下</strong>:</p>\n<p><strong>1.持久化删除态</strong></p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">      *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/persistRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">persistRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.persistRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"持久化一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">persistRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        persist(user);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"persist remove success!\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>步骤<ul>\n<li><a href=\"http://localhost:8080/user/persisNew/lxt/001，插入一条数据\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisNew/lxt/001，插入一条数据</a></li>\n<li><a href=\"http://localhost:8080/user/list，检查插入结果，并获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，检查插入结果，并获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persistRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persistRemove/{id}</a> ,返回<code>SUCCESS！</code></li>\n<li><a href=\"http://localhost:8080/user/list\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list</a>  查看结果</li>\n</ul>\n</li>\n<li>结果：结果数据并未删除，而且<code>name</code>由<code>lxt</code>变为<code>persist remove success!</code></li>\n</ul>\n<p><strong>2.持久化游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 持久化游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">  *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/persisDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">persisDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         User user = userDao.findById(id);</span><br><span class=\"line\">         userDao.clear();</span><br><span class=\"line\">         userDao.persist(user);</span><br><span class=\"line\">     &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">         logger.error(<span class=\"string\">\"持久化一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persisDetached/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisDetached/{id}</a> 返回<code>ERROR！</code></li>\n</ul>\n</li>\n<li><p>结果：抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">34.090</span> ERROR <span class=\"number\">5228</span> --- [io-<span class=\"number\">8080</span>-exec-<span class=\"number\">10</span>] c.e.demo.controller.UserController       : 持久化一个游离态的对象!</span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.example.demo.entity.User; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.example.demo.entity.User</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:<span class=\"number\">317</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">253</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:<span class=\"number\">242</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t....</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2.2\">remove</h3>\n\n<p><strong>不同状态下执行em.remove()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：对状态无影响，后台打印日志</li>\n<li>托管态：转化为托管态</li>\n<li>删除态：无影响，什么都不发生</li>\n<li>游离态：抛异常<code>Removing a detached instance com.example.demo.entity.User...</code></li>\n</ul>\n<p><strong>验证过程如下：</strong></p>\n<p><strong>1.瞬时态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除new出来的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeNew\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeNew</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User().setName(<span class=\"string\">\"lxt\"</span>).setNumber(<span class=\"string\">\"007\"</span>);</span><br><span class=\"line\">        userDao.remove(user);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\"删除(remove)一个new的对象!\"</span>,e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/removeNew\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/removeNew</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>SUCCESS!</code>后台输出日志</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">17</span>:<span class=\"number\">32.811</span>  INFO <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">5</span>] o.h.e.i.DefaultDeleteEventListener       : HHH000114: Handling <span class=\"keyword\">transient</span> entity in delete processing</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除 删除态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.removeRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"删除(remove)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">-----------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除 删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/removeRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/removeRemove/{id}</a> </li>\n</ul>\n</li>\n<li><p>结果：返回<code>SUCCESS！</code>，后台输出一个查询sql和一个删除sql，证明第二个删除没有影响</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?</span><br><span class=\"line\">Hibernate: delete from t_user where id=?</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>3.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除游离态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.removeDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"删除(remove)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">-------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persisDetached/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisDetached/{id}</a> </li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-01-26 00:14:11.071 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 删除(remove)一个游离态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Removing a detached instance com.example.demo.entity.User#5; nested exception is java.lang.IllegalArgumentException: Removing a detached instance com.example.demo.entity.User#5</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2.3\">merge</h3>\n\n<p><strong>不同状态下执行em.merge()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：提交到数据库，返回一个新的托管态的对象</li>\n<li>托管态：根据原对象返回一个新的托管态的对象</li>\n<li>删除态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]...</code></li>\n<li>游离态：提交到数据库，进行更新或插入，返回一个新的托管态的对象</li>\n</ul>\n<p><strong>合并（merge）删除态和游离态验证过程如下：</strong></p>\n<p><strong>1.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/mergeRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">mergeRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.mergeRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"合并(merge)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        merge(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/mergeRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/mergeRemove/{id}</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR</code>抛异常！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">23</span>:<span class=\"number\">01.187</span>  INFO <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory</span><br><span class=\"line\">Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?</span><br><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">23</span>:<span class=\"number\">01.322</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 合并(merge)一个删除态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]; nested exception is java.lang.IllegalArgumentException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/mergeDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">mergeDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.mergeDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"合并(merge)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        User newUser = merge(user);</span><br><span class=\"line\">        newUser.setName(<span class=\"string\">\"newUser merge detached success!\"</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"user merge detached success!\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`</a></li>\n<li><a href=\"http://localhost:8080/user/list，查看\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，查看</a></li>\n</ul>\n</li>\n<li><p>结果:对应实体的<code>name</code>值变为<code>newUser merge detached success!</code>，证明返回新的对象为托管态对象</p>\n</li>\n</ul>\n<p><strong>2.游离态</strong></p>\n<h3 id=\"2.4\">refresh</h3>\n\n<blockquote>\n<p>方法可以保证当前的实例与数据库中的实例的内容一致，<strong>注意：是反向同步，将数据库中的数据同步到实体中</strong></p>\n</blockquote>\n<p><strong>不同状态下执行em.refresh()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n<li>托管态： 将数据库中的数据同步到实体中，返回一个托管态的对象。</li>\n<li>删除态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n<li>游离态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n</ul>\n<p><strong>总结：</strong>只有被托管的对象才可以被refresh。</p>\n<p><strong>1.瞬时态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 刷新new出来的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshNew\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshNew</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User().setName(<span class=\"string\">\"lxt\"</span>).setNumber(<span class=\"string\">\"007\"</span>);</span><br><span class=\"line\">        userDao.refresh(user);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\"刷新(refresh)一个new的对象!\"</span>,e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/refreshNew\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshNew</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">38</span>:<span class=\"number\">18.037</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个<span class=\"keyword\">new</span>的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.托管态：</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新托管态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshManaged/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshManaged</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshManaged(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个托管态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">------------------------------------------------------------------</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新托管态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshManaged</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"refresh before!\"</span>);</span><br><span class=\"line\">        refresh(user);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"user:\"</span>+user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`</a></li>\n<li><a href=\"http://localhost:8080/user/list\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list</a></li>\n</ul>\n</li>\n<li><p>结果:数据库中数据并无变化，日志打印为数据库中查询出的值，并未打印<code>refresh before!</code></p>\n</li>\n</ul>\n<p><strong>3.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新删除态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">----------------------------------------------------------------------   </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">       remove(user);</span><br><span class=\"line\">       user.setName(<span class=\"string\">\"refresh remove before！\"</span>);</span><br><span class=\"line\">       refresh(user);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"refresh remove after！\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshRemove/{id}</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">40</span>:<span class=\"number\">57.713</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个删除态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>4.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新游离态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">----------------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        refresh(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshDetached/{id},`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshDetached/{id},`</a></li>\n</ul>\n</li>\n<li><p>结果:返回<code>ERROR！</code>抛异常！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">42</span>:<span class=\"number\">09.598</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">7</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个游离态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3\">参考链接</h2>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/javavenus/article/details/6289616\" target=\"_blank\" rel=\"noopener\">JPA EntityManager的四个主要方法 ——persist,merge,refresh和remove</a></li>\n<li><a href=\"https://blog.csdn.net/yingxiake/article/details/50968059\" target=\"_blank\" rel=\"noopener\">JPA 实体生命周期理解和总结</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Spring Data JPA是对JPA规范的再次封装和抽象，底层使用HIbernate JPA实现，Hibernate实体有三种状态，而Spring Data JPA实体生命周期也有类似的瞬时、托管、删除、游离四种状态，本文记录对实体四种状态的理解和验证过程。<br>","more":"</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#1\"><strong>四种状态</strong></a></p>\n</li>\n<li><p><a href=\"#2\"><strong>API示例</strong></a></p>\n<ul>\n<li><a href=\"#2.1\"><strong>persist</strong></a></li>\n<li><a href=\"#2.2\"><strong>remove</strong></a></li>\n<li><a href=\"#2.3\"><strong>merge</strong></a></li>\n<li><a href=\"#2.4\"><strong>refresh</strong></a></li>\n</ul>\n</li>\n<li><p><a href=\"#3\"><strong>参考链接</strong></a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"1\">四种状态</h2>\n\n<p>首先以一张图，简单介绍写实体生命周期中四种状态之间的转换关系：</p>\n<p><img src=\"/images/20190120/jpa-entity.png\" alt=\"jpa-entity\"></p>\n<p><strong>瞬时（New）：</strong>瞬时对象，刚New出来的对象，无id，还未和持久化上下文（Persistence Context）建立关联。</p>\n<p><strong>托管（Managed）：</strong>托管对象，有id，已和持久化上下文（Persistence Context）建立关联，对象属性的所有改动均会影响到数据库中对应记录。</p>\n<ul>\n<li>瞬时对象调用em.persist（）方法之后，对象由瞬时状态转换为托管状态</li>\n<li>通过find、get、query等方法，查询出来的对象为托管状态</li>\n<li>游离状态的对象调用em.merge方法，对象由游离状态转换为托管状态</li>\n</ul>\n<p><strong>游离（Datached）：</strong>游离对象，有id值，但没有和持久化上下文（Persistence Context）建立关联。</p>\n<ul>\n<li>托管状态对象提交事务之后，对象状态由托管状态转换为游离状态</li>\n<li>托管状态对象调用em.clear()方法之后，对象状态由托管状态转换为游离状态</li>\n<li>New出来的对象，id赋值之后，也为游离状态</li>\n</ul>\n<p><strong>删除（Removed）：</strong>执行删除方法（em.remove()）但未提交事务的对象，有id值，没有和持久化上下文（Persistence Context）建立关联，即将从数据库中删除。</p>\n<h2 id=\"2\">API示例</h2>\n\n<blockquote>\n<p>针对JPA规范的四个方法，写了一个简单的Demo，进行了一一的验证，以下进行验证过程说明，完整代码传送门：<a href=\"https://github.com/hdlxt/SpringDataJpaDemo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/hdlxt/SpringDataJpaDemo.git</a></p>\n</blockquote>\n<p>整体结构如下：</p>\n<p><img src=\"/images/20190124/demo.png\" alt=\"com.example.demo.controller\"></p>\n<h3 id=\"2.1\">persist</h3>\n\n<p><strong>不同状态下执行em.persist()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：转化为托管态</li>\n<li>托管态：不发生改变，但执行instert语句</li>\n<li>删除态：转化为托管态</li>\n<li>游离态：<strong>抛异常</strong></li>\n</ul>\n<p><strong>验证删除态和游离态持久化如下</strong>:</p>\n<p><strong>1.持久化删除态</strong></p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">      *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/persistRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">persistRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.persistRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"持久化一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">persistRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        persist(user);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"persist remove success!\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>步骤<ul>\n<li><a href=\"http://localhost:8080/user/persisNew/lxt/001，插入一条数据\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisNew/lxt/001，插入一条数据</a></li>\n<li><a href=\"http://localhost:8080/user/list，检查插入结果，并获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，检查插入结果，并获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persistRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persistRemove/{id}</a> ,返回<code>SUCCESS！</code></li>\n<li><a href=\"http://localhost:8080/user/list\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list</a>  查看结果</li>\n</ul>\n</li>\n<li>结果：结果数据并未删除，而且<code>name</code>由<code>lxt</code>变为<code>persist remove success!</code></li>\n</ul>\n<p><strong>2.持久化游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 持久化游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">  *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/persisDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">persisDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         User user = userDao.findById(id);</span><br><span class=\"line\">         userDao.clear();</span><br><span class=\"line\">         userDao.persist(user);</span><br><span class=\"line\">     &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">         logger.error(<span class=\"string\">\"持久化一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persisDetached/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisDetached/{id}</a> 返回<code>ERROR！</code></li>\n</ul>\n</li>\n<li><p>结果：抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">34.090</span> ERROR <span class=\"number\">5228</span> --- [io-<span class=\"number\">8080</span>-exec-<span class=\"number\">10</span>] c.e.demo.controller.UserController       : 持久化一个游离态的对象!</span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.example.demo.entity.User; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.example.demo.entity.User</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:<span class=\"number\">317</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">253</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:<span class=\"number\">242</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t....</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2.2\">remove</h3>\n\n<p><strong>不同状态下执行em.remove()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：对状态无影响，后台打印日志</li>\n<li>托管态：转化为托管态</li>\n<li>删除态：无影响，什么都不发生</li>\n<li>游离态：抛异常<code>Removing a detached instance com.example.demo.entity.User...</code></li>\n</ul>\n<p><strong>验证过程如下：</strong></p>\n<p><strong>1.瞬时态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除new出来的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeNew\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeNew</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User().setName(<span class=\"string\">\"lxt\"</span>).setNumber(<span class=\"string\">\"007\"</span>);</span><br><span class=\"line\">        userDao.remove(user);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\"删除(remove)一个new的对象!\"</span>,e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/removeNew\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/removeNew</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>SUCCESS!</code>后台输出日志</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">17</span>:<span class=\"number\">32.811</span>  INFO <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">5</span>] o.h.e.i.DefaultDeleteEventListener       : HHH000114: Handling <span class=\"keyword\">transient</span> entity in delete processing</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除 删除态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.removeRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"删除(remove)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">-----------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除 删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/removeRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/removeRemove/{id}</a> </li>\n</ul>\n</li>\n<li><p>结果：返回<code>SUCCESS！</code>，后台输出一个查询sql和一个删除sql，证明第二个删除没有影响</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?</span><br><span class=\"line\">Hibernate: delete from t_user where id=?</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>3.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除游离态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.removeDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"删除(remove)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">-------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persisDetached/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisDetached/{id}</a> </li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-01-26 00:14:11.071 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 删除(remove)一个游离态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Removing a detached instance com.example.demo.entity.User#5; nested exception is java.lang.IllegalArgumentException: Removing a detached instance com.example.demo.entity.User#5</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2.3\">merge</h3>\n\n<p><strong>不同状态下执行em.merge()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：提交到数据库，返回一个新的托管态的对象</li>\n<li>托管态：根据原对象返回一个新的托管态的对象</li>\n<li>删除态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]...</code></li>\n<li>游离态：提交到数据库，进行更新或插入，返回一个新的托管态的对象</li>\n</ul>\n<p><strong>合并（merge）删除态和游离态验证过程如下：</strong></p>\n<p><strong>1.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/mergeRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">mergeRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.mergeRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"合并(merge)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        merge(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/mergeRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/mergeRemove/{id}</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR</code>抛异常！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">23</span>:<span class=\"number\">01.187</span>  INFO <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory</span><br><span class=\"line\">Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?</span><br><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">23</span>:<span class=\"number\">01.322</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 合并(merge)一个删除态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]; nested exception is java.lang.IllegalArgumentException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/mergeDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">mergeDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.mergeDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"合并(merge)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        User newUser = merge(user);</span><br><span class=\"line\">        newUser.setName(<span class=\"string\">\"newUser merge detached success!\"</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"user merge detached success!\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`</a></li>\n<li><a href=\"http://localhost:8080/user/list，查看\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，查看</a></li>\n</ul>\n</li>\n<li><p>结果:对应实体的<code>name</code>值变为<code>newUser merge detached success!</code>，证明返回新的对象为托管态对象</p>\n</li>\n</ul>\n<p><strong>2.游离态</strong></p>\n<h3 id=\"2.4\">refresh</h3>\n\n<blockquote>\n<p>方法可以保证当前的实例与数据库中的实例的内容一致，<strong>注意：是反向同步，将数据库中的数据同步到实体中</strong></p>\n</blockquote>\n<p><strong>不同状态下执行em.refresh()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n<li>托管态： 将数据库中的数据同步到实体中，返回一个托管态的对象。</li>\n<li>删除态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n<li>游离态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n</ul>\n<p><strong>总结：</strong>只有被托管的对象才可以被refresh。</p>\n<p><strong>1.瞬时态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 刷新new出来的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshNew\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshNew</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User().setName(<span class=\"string\">\"lxt\"</span>).setNumber(<span class=\"string\">\"007\"</span>);</span><br><span class=\"line\">        userDao.refresh(user);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\"刷新(refresh)一个new的对象!\"</span>,e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/refreshNew\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshNew</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">38</span>:<span class=\"number\">18.037</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个<span class=\"keyword\">new</span>的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.托管态：</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新托管态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshManaged/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshManaged</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshManaged(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个托管态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">------------------------------------------------------------------</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新托管态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshManaged</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"refresh before!\"</span>);</span><br><span class=\"line\">        refresh(user);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"user:\"</span>+user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`</a></li>\n<li><a href=\"http://localhost:8080/user/list\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list</a></li>\n</ul>\n</li>\n<li><p>结果:数据库中数据并无变化，日志打印为数据库中查询出的值，并未打印<code>refresh before!</code></p>\n</li>\n</ul>\n<p><strong>3.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新删除态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">----------------------------------------------------------------------   </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">       remove(user);</span><br><span class=\"line\">       user.setName(<span class=\"string\">\"refresh remove before！\"</span>);</span><br><span class=\"line\">       refresh(user);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"refresh remove after！\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshRemove/{id}</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">40</span>:<span class=\"number\">57.713</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个删除态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>4.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新游离态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">----------------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        refresh(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshDetached/{id},`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshDetached/{id},`</a></li>\n</ul>\n</li>\n<li><p>结果:返回<code>ERROR！</code>抛异常！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">42</span>:<span class=\"number\">09.598</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">7</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个游离态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3\">参考链接</h2>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/javavenus/article/details/6289616\" target=\"_blank\" rel=\"noopener\">JPA EntityManager的四个主要方法 ——persist,merge,refresh和remove</a></li>\n<li><a href=\"https://blog.csdn.net/yingxiake/article/details/50968059\" target=\"_blank\" rel=\"noopener\">JPA 实体生命周期理解和总结</a></li>\n</ul>"},{"title":"Spring Boot & 极验验证滑动验证码","date":"2019-03-04T12:30:12.000Z","copyright":"true。","_content":"基于极验验证官网 java版[gt3-java-sdk](https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip)改编,使用Spring Boot 整合的极验滑动验证，包含form表单登录和ajax登录两种情况。\n\n<!--more-->\n\n## 目录\n* [**注册账户获取ID和KEY**](#1)\n* [**Demo源码说明**](#2)\n* [**Demo演示**](#3)\n* [**源码地址**](#4)\n\n---\n<h2 id='1'>注册账户获取ID和KEY</h2>\n\n1.进入[官网](https://www.geetest.com/)注册账户\n\n![1](/images/20190304/1.png)\n\n2.登录后台选择`行为认证`\n\n![2](/images/20190304/2.png)\n\n3.增加认证\n\n![3](/images/20190304/3.png)\n\n4.输入信息\n\n![3](/images/20190304/4.png)\n\n5.获取ID和KEY\n\n![4](/images/20190304/5.png)\n\n<h2 id='2'>Demo源码说明</h2>\n\n1.Demo结构\n\n![6](/images/20190304/6.png)\n\n2.关键代码说明\n\n- sdk包下类和gt.js为极验验证官方提供\n- GeetestConfig.java：ID和KEY配置位置\n\n  ```java\n\t// 填入自己的captcha_id和private_key\n\tprivate static final String geetest_id = \"978b73ea94b4393026524553045ed2ab\";\n\tprivate static final String geetest_key = \"7cd60bfef0a65a78ace8ba085aad023d\";\n\tprivate static final boolean newfailback = true;\n\n\tpublic static final String getGeetest_id() {\n\t\treturn geetest_id;\n\t}\n\n\tpublic static final String getGeetest_key() {\n\t\treturn geetest_key;\n\t}\n\t\n\tpublic static final boolean isnewfailback() {\n\t\treturn newfailback;\n\t}\n  ```\n\n\n\n- GeeTestUtil.java：自定义极验验证工具类，对用户操作结果进行验证\n\n```java\n/**\n     *\n     * @param httpSession\n     * @param challenge\n     * @param validate\n     * @param seccode\n     * @return\n     */\n    public static boolean validate(HttpSession httpSession,String challenge, String validate, String seccode){\n        GeetestLib gtSdk = new GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),\n                GeetestConfig.isnewfailback());\n        //从session中获取gt-server状态\n        int gt_server_status_code = (Integer) httpSession.getAttribute(gtSdk.gtServerStatusSessionKey);\n        //从session中获取userid\n        String userid = (String)httpSession.getAttribute(\"userid\");\n        //自定义参数,可选择添加\n        HashMap<String, String> param = new HashMap<String, String>();\n        param.put(\"user_id\", userid); //网站用户id\n        param.put(\"client_type\", \"web\"); //web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式\n        param.put(\"ip_address\", \"127.0.0.1\"); //传输用户请求验证时所携带的IP\n        int gtResult = RESULT_FAIL;\n        boolean flag = false;\n        if (gt_server_status_code == GT_SERVER_STATUS_CODE_OK) {\n            //gt-server正常，向gt-server进行二次验证\n            gtResult = gtSdk.enhencedValidateRequest(challenge, validate, seccode, param);\n        } else {\n            // gt-server非正常情况下，进行failback模式验证\n            System.out.println(\"failback:use your own server captcha validate\");\n            gtResult = gtSdk.failbackValidateRequest(challenge, validate, seccode);\n            System.out.println(gtResult);\n        }\n        return gtResult == RESULT_OK;\n    }\n```\n\n\n\n- GeetTestController.java：注册验证码，获取流水号，加载验证码时调用\n\n  ```java\n   /**\n       * 验证1初始化\n       * @return\n       */\n      @ResponseBody\n      @GetMapping(\"register1\")\n      public String register1(){\n          GeetestLib gtSdk = new GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),\n                  GeetestConfig.isnewfailback());\n          String resStr = \"{}\";\n          String userid = \"test\";\n          //自定义参数,可选择添加\n          HashMap<String, String> param = new HashMap<String, String>();\n          param.put(\"user_id\", userid); //网站用户id\n          param.put(\"client_type\", \"web\"); //web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式\n          param.put(\"ip_address\", \"127.0.0.1\"); //传输用户请求验证时所携带的IP\n          //进行验证预处理\n          int gtServerStatus = gtSdk.preProcess(param);\n          //将服务器状态设置到session中\n          httpSession.setAttribute(gtSdk.gtServerStatusSessionKey, gtServerStatus);\n          //将userid设置到session中\n          httpSession.setAttribute(\"userid\", userid);\n          resStr = gtSdk.getResponseStr();\n          return resStr;\n      }\n      /**\n       * 验证2 二次验证\n       * @return\n       */\n      @ResponseBody\n      @GetMapping(\"register2\")\n      public String register2(){\n          GeetestLib gtSdk = new GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),\n                  GeetestConfig.isnewfailback());\n          String resStr = \"{}\";\n          //自定义userid\n          String userid = \"test\";\n          //自定义参数,可选择添加\n          HashMap<String, String> param = new HashMap<String, String>();\n          param.put(\"user_id\", userid); //网站用户id\n          param.put(\"client_type\", \"web\"); //web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式\n          param.put(\"ip_address\", \"127.0.0.1\"); //传输用户请求验证时所携带的IP\n          //进行验证预处理\n          int gtServerStatus = gtSdk.preProcess(param);\n          //将服务器状态设置到session中\n          httpSession.setAttribute(gtSdk.gtServerStatusSessionKey, gtServerStatus);\n          //将userid设置到session中\n          httpSession.setAttribute(\"userid\", userid);\n          resStr = gtSdk.getResponseStr();\n          return resStr;\n      }\n  ```\n\n  \n\n- LoginController.java：登录验证类，控制验证码和账号密码验证结果\n\n  ```java\n   /**\n       *模拟表单登录\n       * @param model\n       * @param geetest_challenge\n       * @param geetest_validate\n       * @param geetest_seccode\n       * @param username1\n       * @param password1\n       * @return\n       */\n      @RequestMapping(\"/loginForm\")\n      public String loginForm(Model model,String geetest_challenge, String geetest_validate, String geetest_seccode\n              ,String username1, String password1){\n          if(!GeeTestUtil.validate(httpSession,geetest_challenge,geetest_validate,geetest_seccode)){\n              model.addAttribute(\"result\",\"验证失败!!!\");\n              return \"result\";\n          }\n          if(\"admin1\".equals(username1) && \"admin1\".equals(password1)){\n              model.addAttribute(\"result\",\"登录成功!!!\");\n          }else{\n              model.addAttribute(\"result\",\"登录失败!!!\");\n          }\n          return \"result\";\n      }\n  \n      /**\n       * 模拟AJAX登录\n       * @param geetest_challenge\n       * @param geetest_validate\n       * @param geetest_seccode\n       * @param username2\n       * @param password2\n       * @return\n       */\n      @ResponseBody\n      @RequestMapping(\"/loginAJAX\")\n      public String loginAJAX(String geetest_challenge, String geetest_validate, String geetest_seccode\n              ,String username2, String password2){\n          if(!GeeTestUtil.validate(httpSession,geetest_challenge,geetest_validate,geetest_seccode)){\n              return \"验证失败!!!\";\n          }\n          if(\"admin2\".equals(username2) && \"admin2\".equals(password2)){\n              return \"登录成功!!!\";\n          }else{\n              return \"登录失败!!!\";\n          }\n      }\n  ```\n\n  \n\n- login.html：登录界面和验证码\n\n  ```html\n  <form action=\"/login/loginForm\" method=\"post\" target=\"_blank\">\n      <h2>大图点击Demo，使用表单进行二次验证</h2>\n      <br>\n      <div>\n          <label for=\"username1\">用户名：</label>\n          <input class=\"inp\" id=\"username1\" name=\"username1\" type=\"text\" value=\"admin1\">\n      </div>\n      <br>\n      <div>\n          <label for=\"password1\">密码：</label>\n          <input class=\"inp\" id=\"password1\" name=\"password1\" type=\"password\" value=\"admin1\">\n      </div>\n      <br>\n      <div>\n          <label>完成验证：</label>\n          <div id=\"captcha1\">\n              <p id=\"wait1\" class=\"show\">正在加载验证码......</p>\n          </div>\n      </div>\n      <br>\n      <p id=\"notice1\" class=\"hide\">请先完成验证</p>\n      <input class=\"btn\" id=\"submit1\" type=\"submit\" value=\"提交\">\n  </form>\n  <br><br>\n  <hr>\n  <form>\n      <h2>滑动demo，使用ajax进行二次验证</h2>\n      <br>\n      <div>\n          <label for=\"username2\">用户名：</label>\n          <input class=\"inp\" id=\"username2\" type=\"text\" value=\"admin2\">\n      </div>\n      <br>\n      <div>\n          <label for=\"password2\">密码：</label>\n          <input class=\"inp\" id=\"password2\" type=\"password\" value=\"admin2\">\n      </div>\n      <br>\n      <div>\n          <label>完成验证：</label>\n          <div id=\"captcha2\">\n              <p id=\"wait2\" class=\"show\">正在加载验证码......</p>\n          </div>\n      </div>\n      <br>\n      <p id=\"notice2\" class=\"hide\">请先完成验证</p>\n      <input class=\"btn\" id=\"submit2\" type=\"submit\" value=\"提交\">\n  </form>\n  <!-- 注意，验证码本身是不需要 jquery 库，此处使用 jquery 仅为了在 demo 使用，减少代码量 -->\n  <script src=\"http://apps.bdimg.com/libs/jquery/1.9.1/jquery.js\"></script>\n  <!-- 引入 gt.js，既可以使用其中提供的 initGeetest 初始化函数 -->\n  <script src=\"gt.js\"></script>\n  <script>\n      var handler1 = function (captchaObj) {\n          $(\"#submit1\").click(function (e) {\n              var result = captchaObj.getValidate();\n              if (!result) {\n                  $(\"#notice1\").show();\n                  setTimeout(function () {\n                      $(\"#notice1\").hide();\n                  }, 2000);\n                  e.preventDefault();\n              }\n          });\n          // 将验证码加到id为captcha的元素里，同时会有三个input的值用于表单提交\n          captchaObj.appendTo(\"#captcha1\");\n          captchaObj.onReady(function () {\n              $(\"#wait1\").hide();\n          });\n          // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html\n      };\n      $.ajax({\n          url: \"geetTest/register1?t=\" + (new Date()).getTime(), // 加随机数防止缓存\n          type: \"get\",\n          dataType: \"json\",\n          success: function (data) {\n              // 调用 initGeetest 初始化参数\n              // 参数1：配置参数\n              // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它调用相应的接口\n              initGeetest({\n                  gt: data.gt,\n                  challenge: data.challenge,\n                  new_captcha: data.new_captcha, // 用于宕机时表示是新验证码的宕机\n                  offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注\n                  product: \"float\", // 产品形式，包括：float，popup\n                  width: \"100%\"\n                  // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config\n              }, handler1);\n          }\n      });\n  \n      var handler2 = function (captchaObj) {\n          $(\"#submit2\").click(function (e) {\n              var result = captchaObj.getValidate();\n              if (!result) {\n                  $(\"#notice2\").show();\n                  setTimeout(function () {\n                      $(\"#notice2\").hide();\n                  }, 2000);\n              } else {\n                  $.ajax({\n                      url: 'login/loginAJAX',\n                      type: 'POST',\n                      // dataType: 'json',\n                      data: {\n                          username2: $('#username2').val(),\n                          password2: $('#password2').val(),\n                          geetest_challenge: result.geetest_challenge,\n                          geetest_validate: result.geetest_validate,\n                          geetest_seccode: result.geetest_seccode\n                      },\n                      success: function (data) {\n                          alert(data);\n                      }\n                  })\n              }\n              e.preventDefault();\n          });\n          // 将验证码加到id为captcha的元素里，同时会有三个input的值用于表单提交\n          captchaObj.appendTo(\"#captcha2\");\n          captchaObj.onReady(function () {\n              $(\"#wait2\").hide();\n          });\n          // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html\n      };\n      $.ajax({\n          url: \"geetTest/register2?t=\" + (new Date()).getTime(), // 加随机数防止缓存\n          type: \"get\",\n          dataType: \"json\",\n          success: function (data) {\n              // 调用 initGeetest 初始化参数\n              // 参数1：配置参数\n              // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它调用相应的接口\n              initGeetest({\n                  gt: data.gt,\n                  challenge: data.challenge,\n                  new_captcha: data.new_captcha, // 用于宕机时表示是新验证码的宕机\n                  offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注\n                  product: \"popup\", // 产品形式，包括：float，popup\n                  width: \"100%\"\n                  // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config\n              }, handler2);\n          }\n      });\n  </script>\n  ```\n\n  <h2 id='3'>Demo演示</h2>\n\n  1.登录界面，正在加载的验证码\n\n  ![7](/images/20190304/7.png)\n\n  2.验证码展示\n\n  ![8](/images/20190304/8.png)\n\n  3.验证成功之后，提交跳转到登录页面，再次点击提交显示验证失败，一个验证码只能使用一次。（AJAX登录同理）\n\n  ![9](/images/20190304/9.png)\n\n  ![10](/images/20190304/10.png)\n\n  <h2 id='4'>源码地址</h2>\n\n  - [官网Demo gt3-java-sdk](https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip)\n  - github:   git@github.com:hdlxt/lxtDaily.git","source":"_posts/2019-03-04-Spring Boot & 极验滑动验证.md","raw":"---\ntitle: Spring Boot & 极验验证滑动验证码\ndate: 2019-03-04 20:30:12\ntags:\n- Spring Boot\n- 极验验证\n- 滑动验证码\ncategories:\n- Spring\ncopyright: true。\n---\n基于极验验证官网 java版[gt3-java-sdk](https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip)改编,使用Spring Boot 整合的极验滑动验证，包含form表单登录和ajax登录两种情况。\n\n<!--more-->\n\n## 目录\n* [**注册账户获取ID和KEY**](#1)\n* [**Demo源码说明**](#2)\n* [**Demo演示**](#3)\n* [**源码地址**](#4)\n\n---\n<h2 id='1'>注册账户获取ID和KEY</h2>\n\n1.进入[官网](https://www.geetest.com/)注册账户\n\n![1](/images/20190304/1.png)\n\n2.登录后台选择`行为认证`\n\n![2](/images/20190304/2.png)\n\n3.增加认证\n\n![3](/images/20190304/3.png)\n\n4.输入信息\n\n![3](/images/20190304/4.png)\n\n5.获取ID和KEY\n\n![4](/images/20190304/5.png)\n\n<h2 id='2'>Demo源码说明</h2>\n\n1.Demo结构\n\n![6](/images/20190304/6.png)\n\n2.关键代码说明\n\n- sdk包下类和gt.js为极验验证官方提供\n- GeetestConfig.java：ID和KEY配置位置\n\n  ```java\n\t// 填入自己的captcha_id和private_key\n\tprivate static final String geetest_id = \"978b73ea94b4393026524553045ed2ab\";\n\tprivate static final String geetest_key = \"7cd60bfef0a65a78ace8ba085aad023d\";\n\tprivate static final boolean newfailback = true;\n\n\tpublic static final String getGeetest_id() {\n\t\treturn geetest_id;\n\t}\n\n\tpublic static final String getGeetest_key() {\n\t\treturn geetest_key;\n\t}\n\t\n\tpublic static final boolean isnewfailback() {\n\t\treturn newfailback;\n\t}\n  ```\n\n\n\n- GeeTestUtil.java：自定义极验验证工具类，对用户操作结果进行验证\n\n```java\n/**\n     *\n     * @param httpSession\n     * @param challenge\n     * @param validate\n     * @param seccode\n     * @return\n     */\n    public static boolean validate(HttpSession httpSession,String challenge, String validate, String seccode){\n        GeetestLib gtSdk = new GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),\n                GeetestConfig.isnewfailback());\n        //从session中获取gt-server状态\n        int gt_server_status_code = (Integer) httpSession.getAttribute(gtSdk.gtServerStatusSessionKey);\n        //从session中获取userid\n        String userid = (String)httpSession.getAttribute(\"userid\");\n        //自定义参数,可选择添加\n        HashMap<String, String> param = new HashMap<String, String>();\n        param.put(\"user_id\", userid); //网站用户id\n        param.put(\"client_type\", \"web\"); //web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式\n        param.put(\"ip_address\", \"127.0.0.1\"); //传输用户请求验证时所携带的IP\n        int gtResult = RESULT_FAIL;\n        boolean flag = false;\n        if (gt_server_status_code == GT_SERVER_STATUS_CODE_OK) {\n            //gt-server正常，向gt-server进行二次验证\n            gtResult = gtSdk.enhencedValidateRequest(challenge, validate, seccode, param);\n        } else {\n            // gt-server非正常情况下，进行failback模式验证\n            System.out.println(\"failback:use your own server captcha validate\");\n            gtResult = gtSdk.failbackValidateRequest(challenge, validate, seccode);\n            System.out.println(gtResult);\n        }\n        return gtResult == RESULT_OK;\n    }\n```\n\n\n\n- GeetTestController.java：注册验证码，获取流水号，加载验证码时调用\n\n  ```java\n   /**\n       * 验证1初始化\n       * @return\n       */\n      @ResponseBody\n      @GetMapping(\"register1\")\n      public String register1(){\n          GeetestLib gtSdk = new GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),\n                  GeetestConfig.isnewfailback());\n          String resStr = \"{}\";\n          String userid = \"test\";\n          //自定义参数,可选择添加\n          HashMap<String, String> param = new HashMap<String, String>();\n          param.put(\"user_id\", userid); //网站用户id\n          param.put(\"client_type\", \"web\"); //web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式\n          param.put(\"ip_address\", \"127.0.0.1\"); //传输用户请求验证时所携带的IP\n          //进行验证预处理\n          int gtServerStatus = gtSdk.preProcess(param);\n          //将服务器状态设置到session中\n          httpSession.setAttribute(gtSdk.gtServerStatusSessionKey, gtServerStatus);\n          //将userid设置到session中\n          httpSession.setAttribute(\"userid\", userid);\n          resStr = gtSdk.getResponseStr();\n          return resStr;\n      }\n      /**\n       * 验证2 二次验证\n       * @return\n       */\n      @ResponseBody\n      @GetMapping(\"register2\")\n      public String register2(){\n          GeetestLib gtSdk = new GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),\n                  GeetestConfig.isnewfailback());\n          String resStr = \"{}\";\n          //自定义userid\n          String userid = \"test\";\n          //自定义参数,可选择添加\n          HashMap<String, String> param = new HashMap<String, String>();\n          param.put(\"user_id\", userid); //网站用户id\n          param.put(\"client_type\", \"web\"); //web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式\n          param.put(\"ip_address\", \"127.0.0.1\"); //传输用户请求验证时所携带的IP\n          //进行验证预处理\n          int gtServerStatus = gtSdk.preProcess(param);\n          //将服务器状态设置到session中\n          httpSession.setAttribute(gtSdk.gtServerStatusSessionKey, gtServerStatus);\n          //将userid设置到session中\n          httpSession.setAttribute(\"userid\", userid);\n          resStr = gtSdk.getResponseStr();\n          return resStr;\n      }\n  ```\n\n  \n\n- LoginController.java：登录验证类，控制验证码和账号密码验证结果\n\n  ```java\n   /**\n       *模拟表单登录\n       * @param model\n       * @param geetest_challenge\n       * @param geetest_validate\n       * @param geetest_seccode\n       * @param username1\n       * @param password1\n       * @return\n       */\n      @RequestMapping(\"/loginForm\")\n      public String loginForm(Model model,String geetest_challenge, String geetest_validate, String geetest_seccode\n              ,String username1, String password1){\n          if(!GeeTestUtil.validate(httpSession,geetest_challenge,geetest_validate,geetest_seccode)){\n              model.addAttribute(\"result\",\"验证失败!!!\");\n              return \"result\";\n          }\n          if(\"admin1\".equals(username1) && \"admin1\".equals(password1)){\n              model.addAttribute(\"result\",\"登录成功!!!\");\n          }else{\n              model.addAttribute(\"result\",\"登录失败!!!\");\n          }\n          return \"result\";\n      }\n  \n      /**\n       * 模拟AJAX登录\n       * @param geetest_challenge\n       * @param geetest_validate\n       * @param geetest_seccode\n       * @param username2\n       * @param password2\n       * @return\n       */\n      @ResponseBody\n      @RequestMapping(\"/loginAJAX\")\n      public String loginAJAX(String geetest_challenge, String geetest_validate, String geetest_seccode\n              ,String username2, String password2){\n          if(!GeeTestUtil.validate(httpSession,geetest_challenge,geetest_validate,geetest_seccode)){\n              return \"验证失败!!!\";\n          }\n          if(\"admin2\".equals(username2) && \"admin2\".equals(password2)){\n              return \"登录成功!!!\";\n          }else{\n              return \"登录失败!!!\";\n          }\n      }\n  ```\n\n  \n\n- login.html：登录界面和验证码\n\n  ```html\n  <form action=\"/login/loginForm\" method=\"post\" target=\"_blank\">\n      <h2>大图点击Demo，使用表单进行二次验证</h2>\n      <br>\n      <div>\n          <label for=\"username1\">用户名：</label>\n          <input class=\"inp\" id=\"username1\" name=\"username1\" type=\"text\" value=\"admin1\">\n      </div>\n      <br>\n      <div>\n          <label for=\"password1\">密码：</label>\n          <input class=\"inp\" id=\"password1\" name=\"password1\" type=\"password\" value=\"admin1\">\n      </div>\n      <br>\n      <div>\n          <label>完成验证：</label>\n          <div id=\"captcha1\">\n              <p id=\"wait1\" class=\"show\">正在加载验证码......</p>\n          </div>\n      </div>\n      <br>\n      <p id=\"notice1\" class=\"hide\">请先完成验证</p>\n      <input class=\"btn\" id=\"submit1\" type=\"submit\" value=\"提交\">\n  </form>\n  <br><br>\n  <hr>\n  <form>\n      <h2>滑动demo，使用ajax进行二次验证</h2>\n      <br>\n      <div>\n          <label for=\"username2\">用户名：</label>\n          <input class=\"inp\" id=\"username2\" type=\"text\" value=\"admin2\">\n      </div>\n      <br>\n      <div>\n          <label for=\"password2\">密码：</label>\n          <input class=\"inp\" id=\"password2\" type=\"password\" value=\"admin2\">\n      </div>\n      <br>\n      <div>\n          <label>完成验证：</label>\n          <div id=\"captcha2\">\n              <p id=\"wait2\" class=\"show\">正在加载验证码......</p>\n          </div>\n      </div>\n      <br>\n      <p id=\"notice2\" class=\"hide\">请先完成验证</p>\n      <input class=\"btn\" id=\"submit2\" type=\"submit\" value=\"提交\">\n  </form>\n  <!-- 注意，验证码本身是不需要 jquery 库，此处使用 jquery 仅为了在 demo 使用，减少代码量 -->\n  <script src=\"http://apps.bdimg.com/libs/jquery/1.9.1/jquery.js\"></script>\n  <!-- 引入 gt.js，既可以使用其中提供的 initGeetest 初始化函数 -->\n  <script src=\"gt.js\"></script>\n  <script>\n      var handler1 = function (captchaObj) {\n          $(\"#submit1\").click(function (e) {\n              var result = captchaObj.getValidate();\n              if (!result) {\n                  $(\"#notice1\").show();\n                  setTimeout(function () {\n                      $(\"#notice1\").hide();\n                  }, 2000);\n                  e.preventDefault();\n              }\n          });\n          // 将验证码加到id为captcha的元素里，同时会有三个input的值用于表单提交\n          captchaObj.appendTo(\"#captcha1\");\n          captchaObj.onReady(function () {\n              $(\"#wait1\").hide();\n          });\n          // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html\n      };\n      $.ajax({\n          url: \"geetTest/register1?t=\" + (new Date()).getTime(), // 加随机数防止缓存\n          type: \"get\",\n          dataType: \"json\",\n          success: function (data) {\n              // 调用 initGeetest 初始化参数\n              // 参数1：配置参数\n              // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它调用相应的接口\n              initGeetest({\n                  gt: data.gt,\n                  challenge: data.challenge,\n                  new_captcha: data.new_captcha, // 用于宕机时表示是新验证码的宕机\n                  offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注\n                  product: \"float\", // 产品形式，包括：float，popup\n                  width: \"100%\"\n                  // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config\n              }, handler1);\n          }\n      });\n  \n      var handler2 = function (captchaObj) {\n          $(\"#submit2\").click(function (e) {\n              var result = captchaObj.getValidate();\n              if (!result) {\n                  $(\"#notice2\").show();\n                  setTimeout(function () {\n                      $(\"#notice2\").hide();\n                  }, 2000);\n              } else {\n                  $.ajax({\n                      url: 'login/loginAJAX',\n                      type: 'POST',\n                      // dataType: 'json',\n                      data: {\n                          username2: $('#username2').val(),\n                          password2: $('#password2').val(),\n                          geetest_challenge: result.geetest_challenge,\n                          geetest_validate: result.geetest_validate,\n                          geetest_seccode: result.geetest_seccode\n                      },\n                      success: function (data) {\n                          alert(data);\n                      }\n                  })\n              }\n              e.preventDefault();\n          });\n          // 将验证码加到id为captcha的元素里，同时会有三个input的值用于表单提交\n          captchaObj.appendTo(\"#captcha2\");\n          captchaObj.onReady(function () {\n              $(\"#wait2\").hide();\n          });\n          // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html\n      };\n      $.ajax({\n          url: \"geetTest/register2?t=\" + (new Date()).getTime(), // 加随机数防止缓存\n          type: \"get\",\n          dataType: \"json\",\n          success: function (data) {\n              // 调用 initGeetest 初始化参数\n              // 参数1：配置参数\n              // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它调用相应的接口\n              initGeetest({\n                  gt: data.gt,\n                  challenge: data.challenge,\n                  new_captcha: data.new_captcha, // 用于宕机时表示是新验证码的宕机\n                  offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注\n                  product: \"popup\", // 产品形式，包括：float，popup\n                  width: \"100%\"\n                  // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config\n              }, handler2);\n          }\n      });\n  </script>\n  ```\n\n  <h2 id='3'>Demo演示</h2>\n\n  1.登录界面，正在加载的验证码\n\n  ![7](/images/20190304/7.png)\n\n  2.验证码展示\n\n  ![8](/images/20190304/8.png)\n\n  3.验证成功之后，提交跳转到登录页面，再次点击提交显示验证失败，一个验证码只能使用一次。（AJAX登录同理）\n\n  ![9](/images/20190304/9.png)\n\n  ![10](/images/20190304/10.png)\n\n  <h2 id='4'>源码地址</h2>\n\n  - [官网Demo gt3-java-sdk](https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip)\n  - github:   git@github.com:hdlxt/lxtDaily.git","slug":"2019-03-04-Spring Boot & 极验滑动验证","published":1,"updated":"2019-03-04T13:49:49.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3d4fgf3000eikvk8kkq066i","content":"<p>基于极验验证官网 java版<a href=\"https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip\" target=\"_blank\" rel=\"noopener\">gt3-java-sdk</a>改编,使用Spring Boot 整合的极验滑动验证，包含form表单登录和ajax登录两种情况。</p>\n<a id=\"more\"></a>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>注册账户获取ID和KEY</strong></a></li>\n<li><a href=\"#2\"><strong>Demo源码说明</strong></a></li>\n<li><a href=\"#3\"><strong>Demo演示</strong></a></li>\n<li><a href=\"#4\"><strong>源码地址</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">注册账户获取ID和KEY</h2>\n\n<p>1.进入<a href=\"https://www.geetest.com/\" target=\"_blank\" rel=\"noopener\">官网</a>注册账户</p>\n<p><img src=\"/images/20190304/1.png\" alt=\"1\"></p>\n<p>2.登录后台选择<code>行为认证</code></p>\n<p><img src=\"/images/20190304/2.png\" alt=\"2\"></p>\n<p>3.增加认证</p>\n<p><img src=\"/images/20190304/3.png\" alt=\"3\"></p>\n<p>4.输入信息</p>\n<p><img src=\"/images/20190304/4.png\" alt=\"3\"></p>\n<p>5.获取ID和KEY</p>\n<p><img src=\"/images/20190304/5.png\" alt=\"4\"></p>\n<h2 id=\"2\">Demo源码说明</h2>\n\n<p>1.Demo结构</p>\n<p><img src=\"/images/20190304/6.png\" alt=\"6\"></p>\n<p>2.关键代码说明</p>\n<ul>\n<li>sdk包下类和gt.js为极验验证官方提供</li>\n<li><p>GeetestConfig.java：ID和KEY配置位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 填入自己的captcha_id和private_key</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String geetest_id = <span class=\"string\">\"978b73ea94b4393026524553045ed2ab\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String geetest_key = <span class=\"string\">\"7cd60bfef0a65a78ace8ba085aad023d\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> newfailback = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String <span class=\"title\">getGeetest_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> geetest_id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String <span class=\"title\">getGeetest_key</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> geetest_key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isnewfailback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newfailback;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>GeeTestUtil.java：自定义极验验证工具类，对用户操作结果进行验证</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> httpSession</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> challenge</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> validate</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> seccode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validate</span><span class=\"params\">(HttpSession httpSession,String challenge, String validate, String seccode)</span></span>&#123;</span><br><span class=\"line\">        GeetestLib gtSdk = <span class=\"keyword\">new</span> GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),</span><br><span class=\"line\">                GeetestConfig.isnewfailback());</span><br><span class=\"line\">        <span class=\"comment\">//从session中获取gt-server状态</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> gt_server_status_code = (Integer) httpSession.getAttribute(gtSdk.gtServerStatusSessionKey);</span><br><span class=\"line\">        <span class=\"comment\">//从session中获取userid</span></span><br><span class=\"line\">        String userid = (String)httpSession.getAttribute(<span class=\"string\">\"userid\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//自定义参数,可选择添加</span></span><br><span class=\"line\">        HashMap&lt;String, String&gt; param = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        param.put(<span class=\"string\">\"user_id\"</span>, userid); <span class=\"comment\">//网站用户id</span></span><br><span class=\"line\">        param.put(<span class=\"string\">\"client_type\"</span>, <span class=\"string\">\"web\"</span>); <span class=\"comment\">//web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式</span></span><br><span class=\"line\">        param.put(<span class=\"string\">\"ip_address\"</span>, <span class=\"string\">\"127.0.0.1\"</span>); <span class=\"comment\">//传输用户请求验证时所携带的IP</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> gtResult = RESULT_FAIL;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (gt_server_status_code == GT_SERVER_STATUS_CODE_OK) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//gt-server正常，向gt-server进行二次验证</span></span><br><span class=\"line\">            gtResult = gtSdk.enhencedValidateRequest(challenge, validate, seccode, param);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// gt-server非正常情况下，进行failback模式验证</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"failback:use your own server captcha validate\"</span>);</span><br><span class=\"line\">            gtResult = gtSdk.failbackValidateRequest(challenge, validate, seccode);</span><br><span class=\"line\">            System.out.println(gtResult);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gtResult == RESULT_OK;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>GeetTestController.java：注册验证码，获取流水号，加载验证码时调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 验证1初始化</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"register1\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       GeetestLib gtSdk = <span class=\"keyword\">new</span> GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),</span><br><span class=\"line\">               GeetestConfig.isnewfailback());</span><br><span class=\"line\">       String resStr = <span class=\"string\">\"&#123;&#125;\"</span>;</span><br><span class=\"line\">       String userid = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">       <span class=\"comment\">//自定义参数,可选择添加</span></span><br><span class=\"line\">       HashMap&lt;String, String&gt; param = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">       param.put(<span class=\"string\">\"user_id\"</span>, userid); <span class=\"comment\">//网站用户id</span></span><br><span class=\"line\">       param.put(<span class=\"string\">\"client_type\"</span>, <span class=\"string\">\"web\"</span>); <span class=\"comment\">//web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式</span></span><br><span class=\"line\">       param.put(<span class=\"string\">\"ip_address\"</span>, <span class=\"string\">\"127.0.0.1\"</span>); <span class=\"comment\">//传输用户请求验证时所携带的IP</span></span><br><span class=\"line\">       <span class=\"comment\">//进行验证预处理</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> gtServerStatus = gtSdk.preProcess(param);</span><br><span class=\"line\">       <span class=\"comment\">//将服务器状态设置到session中</span></span><br><span class=\"line\">       httpSession.setAttribute(gtSdk.gtServerStatusSessionKey, gtServerStatus);</span><br><span class=\"line\">       <span class=\"comment\">//将userid设置到session中</span></span><br><span class=\"line\">       httpSession.setAttribute(<span class=\"string\">\"userid\"</span>, userid);</span><br><span class=\"line\">       resStr = gtSdk.getResponseStr();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> resStr;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 验证2 二次验证</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"register2\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       GeetestLib gtSdk = <span class=\"keyword\">new</span> GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),</span><br><span class=\"line\">               GeetestConfig.isnewfailback());</span><br><span class=\"line\">       String resStr = <span class=\"string\">\"&#123;&#125;\"</span>;</span><br><span class=\"line\">       <span class=\"comment\">//自定义userid</span></span><br><span class=\"line\">       String userid = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">       <span class=\"comment\">//自定义参数,可选择添加</span></span><br><span class=\"line\">       HashMap&lt;String, String&gt; param = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">       param.put(<span class=\"string\">\"user_id\"</span>, userid); <span class=\"comment\">//网站用户id</span></span><br><span class=\"line\">       param.put(<span class=\"string\">\"client_type\"</span>, <span class=\"string\">\"web\"</span>); <span class=\"comment\">//web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式</span></span><br><span class=\"line\">       param.put(<span class=\"string\">\"ip_address\"</span>, <span class=\"string\">\"127.0.0.1\"</span>); <span class=\"comment\">//传输用户请求验证时所携带的IP</span></span><br><span class=\"line\">       <span class=\"comment\">//进行验证预处理</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> gtServerStatus = gtSdk.preProcess(param);</span><br><span class=\"line\">       <span class=\"comment\">//将服务器状态设置到session中</span></span><br><span class=\"line\">       httpSession.setAttribute(gtSdk.gtServerStatusSessionKey, gtServerStatus);</span><br><span class=\"line\">       <span class=\"comment\">//将userid设置到session中</span></span><br><span class=\"line\">       httpSession.setAttribute(<span class=\"string\">\"userid\"</span>, userid);</span><br><span class=\"line\">       resStr = gtSdk.getResponseStr();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> resStr;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>LoginController.java：登录验证类，控制验证码和账号密码验证结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *模拟表单登录</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_challenge</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_validate</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_seccode</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> username1</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> password1</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/loginForm\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginForm</span><span class=\"params\">(Model model,String geetest_challenge, String geetest_validate, String geetest_seccode</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           ,String username1, String password1)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(!GeeTestUtil.validate(httpSession,geetest_challenge,geetest_validate,geetest_seccode))&#123;</span><br><span class=\"line\">           model.addAttribute(<span class=\"string\">\"result\"</span>,<span class=\"string\">\"验证失败!!!\"</span>);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"result\"</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(<span class=\"string\">\"admin1\"</span>.equals(username1) &amp;&amp; <span class=\"string\">\"admin1\"</span>.equals(password1))&#123;</span><br><span class=\"line\">           model.addAttribute(<span class=\"string\">\"result\"</span>,<span class=\"string\">\"登录成功!!!\"</span>);</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           model.addAttribute(<span class=\"string\">\"result\"</span>,<span class=\"string\">\"登录失败!!!\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"result\"</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 模拟AJAX登录</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_challenge</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_validate</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_seccode</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> username2</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> password2</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/loginAJAX\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginAJAX</span><span class=\"params\">(String geetest_challenge, String geetest_validate, String geetest_seccode</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           ,String username2, String password2)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(!GeeTestUtil.validate(httpSession,geetest_challenge,geetest_validate,geetest_seccode))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"验证失败!!!\"</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(<span class=\"string\">\"admin2\"</span>.equals(username2) &amp;&amp; <span class=\"string\">\"admin2\"</span>.equals(password2))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"登录成功!!!\"</span>;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"登录失败!!!\"</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>login.html：登录界面和验证码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/login/loginForm\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>大图点击Demo，使用表单进行二次验证<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username1\"</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inp\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username1\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"admin1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password1\"</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inp\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password1\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"admin1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>完成验证：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"captcha1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wait1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show\"</span>&gt;</span>正在加载验证码......<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"notice1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hide\"</span>&gt;</span>请先完成验证<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"submit1\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>滑动demo，使用ajax进行二次验证<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username2\"</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inp\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"admin2\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password2\"</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inp\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"admin2\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>完成验证：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"captcha2\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wait2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show\"</span>&gt;</span>正在加载验证码......<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"notice2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hide\"</span>&gt;</span>请先完成验证<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"submit2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意，验证码本身是不需要 jquery 库，此处使用 jquery 仅为了在 demo 使用，减少代码量 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://apps.bdimg.com/libs/jquery/1.9.1/jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 gt.js，既可以使用其中提供的 initGeetest 初始化函数 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"gt.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var handler1 = function (captchaObj) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        $(\"#submit1\").click(function (e) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            var result = captchaObj.getValidate();</span></span><br><span class=\"line\"><span class=\"undefined\">            if (!result) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                $(\"#notice1\").show();</span></span><br><span class=\"line\"><span class=\"undefined\">                setTimeout(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    $(\"#notice1\").hide();</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;, 2000);</span></span><br><span class=\"line\"><span class=\"undefined\">                e.preventDefault();</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        // 将验证码加到id为captcha的元素里，同时会有三个input的值用于表单提交</span></span><br><span class=\"line\"><span class=\"undefined\">        captchaObj.appendTo(\"#captcha1\");</span></span><br><span class=\"line\"><span class=\"undefined\">        captchaObj.onReady(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            $(\"#wait1\").hide();</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        url: \"geetTest/register1?t=\" + (new Date()).getTime(), // 加随机数防止缓存</span></span><br><span class=\"line\"><span class=\"undefined\">        type: \"get\",</span></span><br><span class=\"line\"><span class=\"undefined\">        dataType: \"json\",</span></span><br><span class=\"line\"><span class=\"undefined\">        success: function (data) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            // 调用 initGeetest 初始化参数</span></span><br><span class=\"line\"><span class=\"undefined\">            // 参数1：配置参数</span></span><br><span class=\"line\"><span class=\"undefined\">            // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它调用相应的接口</span></span><br><span class=\"line\"><span class=\"undefined\">            initGeetest(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                gt: data.gt,</span></span><br><span class=\"line\"><span class=\"undefined\">                challenge: data.challenge,</span></span><br><span class=\"line\"><span class=\"undefined\">                new_captcha: data.new_captcha, // 用于宕机时表示是新验证码的宕机</span></span><br><span class=\"line\"><span class=\"undefined\">                offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注</span></span><br><span class=\"line\"><span class=\"undefined\">                product: \"float\", // 产品形式，包括：float，popup</span></span><br><span class=\"line\"><span class=\"undefined\">                width: \"100%\"</span></span><br><span class=\"line\"><span class=\"undefined\">                // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, handler1);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var handler2 = function (captchaObj) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        $(\"#submit2\").click(function (e) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            var result = captchaObj.getValidate();</span></span><br><span class=\"line\"><span class=\"undefined\">            if (!result) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                $(\"#notice2\").show();</span></span><br><span class=\"line\"><span class=\"undefined\">                setTimeout(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    $(\"#notice2\").hide();</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;, 2000);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    url: 'login/loginAJAX',</span></span><br><span class=\"line\"><span class=\"undefined\">                    type: 'POST',</span></span><br><span class=\"line\"><span class=\"undefined\">                    // dataType: 'json',</span></span><br><span class=\"line\"><span class=\"undefined\">                    data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        username2: $('#username2').val(),</span></span><br><span class=\"line\"><span class=\"undefined\">                        password2: $('#password2').val(),</span></span><br><span class=\"line\"><span class=\"undefined\">                        geetest_challenge: result.geetest_challenge,</span></span><br><span class=\"line\"><span class=\"undefined\">                        geetest_validate: result.geetest_validate,</span></span><br><span class=\"line\"><span class=\"undefined\">                        geetest_seccode: result.geetest_seccode</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">                    success: function (data) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        alert(data);</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            e.preventDefault();</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        // 将验证码加到id为captcha的元素里，同时会有三个input的值用于表单提交</span></span><br><span class=\"line\"><span class=\"undefined\">        captchaObj.appendTo(\"#captcha2\");</span></span><br><span class=\"line\"><span class=\"undefined\">        captchaObj.onReady(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            $(\"#wait2\").hide();</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        url: \"geetTest/register2?t=\" + (new Date()).getTime(), // 加随机数防止缓存</span></span><br><span class=\"line\"><span class=\"undefined\">        type: \"get\",</span></span><br><span class=\"line\"><span class=\"undefined\">        dataType: \"json\",</span></span><br><span class=\"line\"><span class=\"undefined\">        success: function (data) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            // 调用 initGeetest 初始化参数</span></span><br><span class=\"line\"><span class=\"undefined\">            // 参数1：配置参数</span></span><br><span class=\"line\"><span class=\"undefined\">            // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它调用相应的接口</span></span><br><span class=\"line\"><span class=\"undefined\">            initGeetest(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                gt: data.gt,</span></span><br><span class=\"line\"><span class=\"undefined\">                challenge: data.challenge,</span></span><br><span class=\"line\"><span class=\"undefined\">                new_captcha: data.new_captcha, // 用于宕机时表示是新验证码的宕机</span></span><br><span class=\"line\"><span class=\"undefined\">                offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注</span></span><br><span class=\"line\"><span class=\"undefined\">                product: \"popup\", // 产品形式，包括：float，popup</span></span><br><span class=\"line\"><span class=\"undefined\">                width: \"100%\"</span></span><br><span class=\"line\"><span class=\"undefined\">                // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, handler2);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3\">Demo演示</h2>\n\n<p>1.登录界面，正在加载的验证码</p>\n<p><img src=\"/images/20190304/7.png\" alt=\"7\"></p>\n<p>2.验证码展示</p>\n<p><img src=\"/images/20190304/8.png\" alt=\"8\"></p>\n<p>3.验证成功之后，提交跳转到登录页面，再次点击提交显示验证失败，一个验证码只能使用一次。（AJAX登录同理）</p>\n<p><img src=\"/images/20190304/9.png\" alt=\"9\"></p>\n<p><img src=\"/images/20190304/10.png\" alt=\"10\"></p>\n<h2 id=\"4\">源码地址</h2>\n\n<ul>\n<li><a href=\"https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip\" target=\"_blank\" rel=\"noopener\">官网Demo gt3-java-sdk</a></li>\n<li>github:   <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:hdlxt/lxtDaily.git</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>基于极验验证官网 java版<a href=\"https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip\" target=\"_blank\" rel=\"noopener\">gt3-java-sdk</a>改编,使用Spring Boot 整合的极验滑动验证，包含form表单登录和ajax登录两种情况。</p>","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>注册账户获取ID和KEY</strong></a></li>\n<li><a href=\"#2\"><strong>Demo源码说明</strong></a></li>\n<li><a href=\"#3\"><strong>Demo演示</strong></a></li>\n<li><a href=\"#4\"><strong>源码地址</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">注册账户获取ID和KEY</h2>\n\n<p>1.进入<a href=\"https://www.geetest.com/\" target=\"_blank\" rel=\"noopener\">官网</a>注册账户</p>\n<p><img src=\"/images/20190304/1.png\" alt=\"1\"></p>\n<p>2.登录后台选择<code>行为认证</code></p>\n<p><img src=\"/images/20190304/2.png\" alt=\"2\"></p>\n<p>3.增加认证</p>\n<p><img src=\"/images/20190304/3.png\" alt=\"3\"></p>\n<p>4.输入信息</p>\n<p><img src=\"/images/20190304/4.png\" alt=\"3\"></p>\n<p>5.获取ID和KEY</p>\n<p><img src=\"/images/20190304/5.png\" alt=\"4\"></p>\n<h2 id=\"2\">Demo源码说明</h2>\n\n<p>1.Demo结构</p>\n<p><img src=\"/images/20190304/6.png\" alt=\"6\"></p>\n<p>2.关键代码说明</p>\n<ul>\n<li>sdk包下类和gt.js为极验验证官方提供</li>\n<li><p>GeetestConfig.java：ID和KEY配置位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 填入自己的captcha_id和private_key</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String geetest_id = <span class=\"string\">\"978b73ea94b4393026524553045ed2ab\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String geetest_key = <span class=\"string\">\"7cd60bfef0a65a78ace8ba085aad023d\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> newfailback = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String <span class=\"title\">getGeetest_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> geetest_id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String <span class=\"title\">getGeetest_key</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> geetest_key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isnewfailback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newfailback;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>GeeTestUtil.java：自定义极验验证工具类，对用户操作结果进行验证</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> httpSession</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> challenge</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> validate</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> seccode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validate</span><span class=\"params\">(HttpSession httpSession,String challenge, String validate, String seccode)</span></span>&#123;</span><br><span class=\"line\">        GeetestLib gtSdk = <span class=\"keyword\">new</span> GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),</span><br><span class=\"line\">                GeetestConfig.isnewfailback());</span><br><span class=\"line\">        <span class=\"comment\">//从session中获取gt-server状态</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> gt_server_status_code = (Integer) httpSession.getAttribute(gtSdk.gtServerStatusSessionKey);</span><br><span class=\"line\">        <span class=\"comment\">//从session中获取userid</span></span><br><span class=\"line\">        String userid = (String)httpSession.getAttribute(<span class=\"string\">\"userid\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//自定义参数,可选择添加</span></span><br><span class=\"line\">        HashMap&lt;String, String&gt; param = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        param.put(<span class=\"string\">\"user_id\"</span>, userid); <span class=\"comment\">//网站用户id</span></span><br><span class=\"line\">        param.put(<span class=\"string\">\"client_type\"</span>, <span class=\"string\">\"web\"</span>); <span class=\"comment\">//web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式</span></span><br><span class=\"line\">        param.put(<span class=\"string\">\"ip_address\"</span>, <span class=\"string\">\"127.0.0.1\"</span>); <span class=\"comment\">//传输用户请求验证时所携带的IP</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> gtResult = RESULT_FAIL;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (gt_server_status_code == GT_SERVER_STATUS_CODE_OK) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//gt-server正常，向gt-server进行二次验证</span></span><br><span class=\"line\">            gtResult = gtSdk.enhencedValidateRequest(challenge, validate, seccode, param);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// gt-server非正常情况下，进行failback模式验证</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"failback:use your own server captcha validate\"</span>);</span><br><span class=\"line\">            gtResult = gtSdk.failbackValidateRequest(challenge, validate, seccode);</span><br><span class=\"line\">            System.out.println(gtResult);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gtResult == RESULT_OK;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>GeetTestController.java：注册验证码，获取流水号，加载验证码时调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 验证1初始化</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"register1\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       GeetestLib gtSdk = <span class=\"keyword\">new</span> GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),</span><br><span class=\"line\">               GeetestConfig.isnewfailback());</span><br><span class=\"line\">       String resStr = <span class=\"string\">\"&#123;&#125;\"</span>;</span><br><span class=\"line\">       String userid = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">       <span class=\"comment\">//自定义参数,可选择添加</span></span><br><span class=\"line\">       HashMap&lt;String, String&gt; param = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">       param.put(<span class=\"string\">\"user_id\"</span>, userid); <span class=\"comment\">//网站用户id</span></span><br><span class=\"line\">       param.put(<span class=\"string\">\"client_type\"</span>, <span class=\"string\">\"web\"</span>); <span class=\"comment\">//web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式</span></span><br><span class=\"line\">       param.put(<span class=\"string\">\"ip_address\"</span>, <span class=\"string\">\"127.0.0.1\"</span>); <span class=\"comment\">//传输用户请求验证时所携带的IP</span></span><br><span class=\"line\">       <span class=\"comment\">//进行验证预处理</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> gtServerStatus = gtSdk.preProcess(param);</span><br><span class=\"line\">       <span class=\"comment\">//将服务器状态设置到session中</span></span><br><span class=\"line\">       httpSession.setAttribute(gtSdk.gtServerStatusSessionKey, gtServerStatus);</span><br><span class=\"line\">       <span class=\"comment\">//将userid设置到session中</span></span><br><span class=\"line\">       httpSession.setAttribute(<span class=\"string\">\"userid\"</span>, userid);</span><br><span class=\"line\">       resStr = gtSdk.getResponseStr();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> resStr;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 验证2 二次验证</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"register2\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       GeetestLib gtSdk = <span class=\"keyword\">new</span> GeetestLib(GeetestConfig.getGeetest_id(), GeetestConfig.getGeetest_key(),</span><br><span class=\"line\">               GeetestConfig.isnewfailback());</span><br><span class=\"line\">       String resStr = <span class=\"string\">\"&#123;&#125;\"</span>;</span><br><span class=\"line\">       <span class=\"comment\">//自定义userid</span></span><br><span class=\"line\">       String userid = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">       <span class=\"comment\">//自定义参数,可选择添加</span></span><br><span class=\"line\">       HashMap&lt;String, String&gt; param = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">       param.put(<span class=\"string\">\"user_id\"</span>, userid); <span class=\"comment\">//网站用户id</span></span><br><span class=\"line\">       param.put(<span class=\"string\">\"client_type\"</span>, <span class=\"string\">\"web\"</span>); <span class=\"comment\">//web:电脑上的浏览器；h5:手机上的浏览器，包括移动应用内完全内置的web_view；native：通过原生SDK植入APP应用的方式</span></span><br><span class=\"line\">       param.put(<span class=\"string\">\"ip_address\"</span>, <span class=\"string\">\"127.0.0.1\"</span>); <span class=\"comment\">//传输用户请求验证时所携带的IP</span></span><br><span class=\"line\">       <span class=\"comment\">//进行验证预处理</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> gtServerStatus = gtSdk.preProcess(param);</span><br><span class=\"line\">       <span class=\"comment\">//将服务器状态设置到session中</span></span><br><span class=\"line\">       httpSession.setAttribute(gtSdk.gtServerStatusSessionKey, gtServerStatus);</span><br><span class=\"line\">       <span class=\"comment\">//将userid设置到session中</span></span><br><span class=\"line\">       httpSession.setAttribute(<span class=\"string\">\"userid\"</span>, userid);</span><br><span class=\"line\">       resStr = gtSdk.getResponseStr();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> resStr;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>LoginController.java：登录验证类，控制验证码和账号密码验证结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *模拟表单登录</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_challenge</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_validate</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_seccode</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> username1</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> password1</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/loginForm\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginForm</span><span class=\"params\">(Model model,String geetest_challenge, String geetest_validate, String geetest_seccode</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           ,String username1, String password1)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(!GeeTestUtil.validate(httpSession,geetest_challenge,geetest_validate,geetest_seccode))&#123;</span><br><span class=\"line\">           model.addAttribute(<span class=\"string\">\"result\"</span>,<span class=\"string\">\"验证失败!!!\"</span>);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"result\"</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(<span class=\"string\">\"admin1\"</span>.equals(username1) &amp;&amp; <span class=\"string\">\"admin1\"</span>.equals(password1))&#123;</span><br><span class=\"line\">           model.addAttribute(<span class=\"string\">\"result\"</span>,<span class=\"string\">\"登录成功!!!\"</span>);</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           model.addAttribute(<span class=\"string\">\"result\"</span>,<span class=\"string\">\"登录失败!!!\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"result\"</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 模拟AJAX登录</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_challenge</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_validate</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> geetest_seccode</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> username2</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> password2</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/loginAJAX\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginAJAX</span><span class=\"params\">(String geetest_challenge, String geetest_validate, String geetest_seccode</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           ,String username2, String password2)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(!GeeTestUtil.validate(httpSession,geetest_challenge,geetest_validate,geetest_seccode))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"验证失败!!!\"</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(<span class=\"string\">\"admin2\"</span>.equals(username2) &amp;&amp; <span class=\"string\">\"admin2\"</span>.equals(password2))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"登录成功!!!\"</span>;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"登录失败!!!\"</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>login.html：登录界面和验证码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/login/loginForm\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>大图点击Demo，使用表单进行二次验证<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username1\"</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inp\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username1\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"admin1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password1\"</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inp\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password1\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"admin1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>完成验证：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"captcha1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wait1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show\"</span>&gt;</span>正在加载验证码......<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"notice1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hide\"</span>&gt;</span>请先完成验证<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"submit1\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>滑动demo，使用ajax进行二次验证<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username2\"</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inp\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"admin2\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password2\"</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inp\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"admin2\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>完成验证：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"captcha2\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wait2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show\"</span>&gt;</span>正在加载验证码......<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"notice2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hide\"</span>&gt;</span>请先完成验证<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"submit2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意，验证码本身是不需要 jquery 库，此处使用 jquery 仅为了在 demo 使用，减少代码量 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://apps.bdimg.com/libs/jquery/1.9.1/jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 gt.js，既可以使用其中提供的 initGeetest 初始化函数 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"gt.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var handler1 = function (captchaObj) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        $(\"#submit1\").click(function (e) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            var result = captchaObj.getValidate();</span></span><br><span class=\"line\"><span class=\"undefined\">            if (!result) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                $(\"#notice1\").show();</span></span><br><span class=\"line\"><span class=\"undefined\">                setTimeout(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    $(\"#notice1\").hide();</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;, 2000);</span></span><br><span class=\"line\"><span class=\"undefined\">                e.preventDefault();</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        // 将验证码加到id为captcha的元素里，同时会有三个input的值用于表单提交</span></span><br><span class=\"line\"><span class=\"undefined\">        captchaObj.appendTo(\"#captcha1\");</span></span><br><span class=\"line\"><span class=\"undefined\">        captchaObj.onReady(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            $(\"#wait1\").hide();</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        url: \"geetTest/register1?t=\" + (new Date()).getTime(), // 加随机数防止缓存</span></span><br><span class=\"line\"><span class=\"undefined\">        type: \"get\",</span></span><br><span class=\"line\"><span class=\"undefined\">        dataType: \"json\",</span></span><br><span class=\"line\"><span class=\"undefined\">        success: function (data) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            // 调用 initGeetest 初始化参数</span></span><br><span class=\"line\"><span class=\"undefined\">            // 参数1：配置参数</span></span><br><span class=\"line\"><span class=\"undefined\">            // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它调用相应的接口</span></span><br><span class=\"line\"><span class=\"undefined\">            initGeetest(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                gt: data.gt,</span></span><br><span class=\"line\"><span class=\"undefined\">                challenge: data.challenge,</span></span><br><span class=\"line\"><span class=\"undefined\">                new_captcha: data.new_captcha, // 用于宕机时表示是新验证码的宕机</span></span><br><span class=\"line\"><span class=\"undefined\">                offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注</span></span><br><span class=\"line\"><span class=\"undefined\">                product: \"float\", // 产品形式，包括：float，popup</span></span><br><span class=\"line\"><span class=\"undefined\">                width: \"100%\"</span></span><br><span class=\"line\"><span class=\"undefined\">                // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, handler1);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var handler2 = function (captchaObj) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        $(\"#submit2\").click(function (e) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            var result = captchaObj.getValidate();</span></span><br><span class=\"line\"><span class=\"undefined\">            if (!result) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                $(\"#notice2\").show();</span></span><br><span class=\"line\"><span class=\"undefined\">                setTimeout(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    $(\"#notice2\").hide();</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;, 2000);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    url: 'login/loginAJAX',</span></span><br><span class=\"line\"><span class=\"undefined\">                    type: 'POST',</span></span><br><span class=\"line\"><span class=\"undefined\">                    // dataType: 'json',</span></span><br><span class=\"line\"><span class=\"undefined\">                    data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        username2: $('#username2').val(),</span></span><br><span class=\"line\"><span class=\"undefined\">                        password2: $('#password2').val(),</span></span><br><span class=\"line\"><span class=\"undefined\">                        geetest_challenge: result.geetest_challenge,</span></span><br><span class=\"line\"><span class=\"undefined\">                        geetest_validate: result.geetest_validate,</span></span><br><span class=\"line\"><span class=\"undefined\">                        geetest_seccode: result.geetest_seccode</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">                    success: function (data) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        alert(data);</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            e.preventDefault();</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        // 将验证码加到id为captcha的元素里，同时会有三个input的值用于表单提交</span></span><br><span class=\"line\"><span class=\"undefined\">        captchaObj.appendTo(\"#captcha2\");</span></span><br><span class=\"line\"><span class=\"undefined\">        captchaObj.onReady(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            $(\"#wait2\").hide();</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        url: \"geetTest/register2?t=\" + (new Date()).getTime(), // 加随机数防止缓存</span></span><br><span class=\"line\"><span class=\"undefined\">        type: \"get\",</span></span><br><span class=\"line\"><span class=\"undefined\">        dataType: \"json\",</span></span><br><span class=\"line\"><span class=\"undefined\">        success: function (data) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            // 调用 initGeetest 初始化参数</span></span><br><span class=\"line\"><span class=\"undefined\">            // 参数1：配置参数</span></span><br><span class=\"line\"><span class=\"undefined\">            // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它调用相应的接口</span></span><br><span class=\"line\"><span class=\"undefined\">            initGeetest(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                gt: data.gt,</span></span><br><span class=\"line\"><span class=\"undefined\">                challenge: data.challenge,</span></span><br><span class=\"line\"><span class=\"undefined\">                new_captcha: data.new_captcha, // 用于宕机时表示是新验证码的宕机</span></span><br><span class=\"line\"><span class=\"undefined\">                offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注</span></span><br><span class=\"line\"><span class=\"undefined\">                product: \"popup\", // 产品形式，包括：float，popup</span></span><br><span class=\"line\"><span class=\"undefined\">                width: \"100%\"</span></span><br><span class=\"line\"><span class=\"undefined\">                // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, handler2);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3\">Demo演示</h2>\n\n<p>1.登录界面，正在加载的验证码</p>\n<p><img src=\"/images/20190304/7.png\" alt=\"7\"></p>\n<p>2.验证码展示</p>\n<p><img src=\"/images/20190304/8.png\" alt=\"8\"></p>\n<p>3.验证成功之后，提交跳转到登录页面，再次点击提交显示验证失败，一个验证码只能使用一次。（AJAX登录同理）</p>\n<p><img src=\"/images/20190304/9.png\" alt=\"9\"></p>\n<p><img src=\"/images/20190304/10.png\" alt=\"10\"></p>\n<h2 id=\"4\">源码地址</h2>\n\n<ul>\n<li><a href=\"https://github.com/GeeTeam/gt3-java-sdk/archive/master.zip\" target=\"_blank\" rel=\"noopener\">官网Demo gt3-java-sdk</a></li>\n<li>github:   <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:hdlxt/lxtDaily.git</li>\n</ul>\n</li>\n</ul>"},{"title":"【Spring Cloud 笔记和总结】二、注册中心Eureka","date":"2019-10-07T13:05:12.000Z","copyright":"true。","_content":"\n#### 一、关于注册中心\n**主要功能如下**\n\n- 服务注册表：记录分布式架构中所有服务和服务地址的映射关系，用于服务直接相互调用\t\n\n- 服务注册与发现：服务启动时将自己的信息注册到注册中心；服务直接相互调用时从注册中心获取目标服务信息\n\n- 服务健康检查 ：使用一定机制检查注册中心的服务是否正常，如果长时间无法访问，则将其移除\n\n  <!--more-->\n\n**常见注册中心**\n- Eureka\n\n- Consul\n\n- Zookeeper\n\n- Nacos\n  ...\n  `本文以Eureka为例，后续会更新其他注册中心`\n\n  <!--more-->\n\n#### 二、主要内容\n结构如下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191112220323391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n配置文件`application.yml`如下\n\n```yml\nspring:\n  application:\n    name: spring-cloud-eureka #服务名称\nserver:\n  port: 8000\neureka:\n  instance:\n    hostname: localhost\n  client:\n    register-with-eureka: false #表示是否将自己注册到Eureka Server，默认为true。\n    fetch-registry: false #表示是否从Eureka Server获取注册信息，默认为true。\n    serviceUrl:\n      defaultZone: http://localhost:8000/eureka #服务地址，多个可用逗号【,】分隔\n```\n`pom`文件如下\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lxt</groupId>\n        <artifactId>springcloud</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <groupId>com.lxt</groupId>\n    <artifactId>exureka-server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>exureka-server</name>\n    <description>Demo project for Spring Boot</description>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n运行结果如下图所示，注册中心目前无服务注册\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191112221221519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\n#### 三、集群高可用\n`C:\\Windows\\System32\\drivers\\etc\\host`文件添加映射\n\n```bash\n127.0.0.1       center\n127.0.0.1       center1\n127.0.0.1       center2\n```\n\n使用yml配置文件连接符`---`添加三个集群的节点`center、center1、center2`,修改后配置文件如下：\n\n```yml\n\n\nspring:\n  application:\n    name: spring-cloud-eureka #服务名称\n---\nserver:\n  port: 8000\neureka:\n  instance:\n    hostname: localhost\n  client:\n    register-with-eureka: false #表示是否将自己注册到Eureka Server，默认为true。\n    fetch-registry: false #表示是否从Eureka Server获取注册信息，默认为true。\n    serviceUrl:\n      defaultZone: http://localhost:8000/eureka/ #服务地址，多个可用逗号【,】分隔\n---\nspring:\n  profiles: center\nserver:\n  port: 8000\neureka:\n  instance:\n    hostname: center\n  client:\n    #register-with-eureka: false #表示是否将自己注册到Eureka Server，默认为true。\n    ##fetch-registry: false #表示是否从Eureka Server获取注册信息，默认为true。\n    serviceUrl:\n      defaultZone: http://center1:8100/eureka/,http://center2:8200/eureka/ #服务地址，多个可用逗号【,】分隔\n---\nspring:\n  profiles: center1\nserver:\n  port: 8100\neureka:\n  instance:\n    hostname: center1\n  client:\n    serviceUrl:\n      defaultZone: http://center:8000/eureka/,http://center2:8200/eureka/ #服务地址，多个可用逗号【,】分隔\n---\nspring:\n  profiles: center2\nserver:\n  port: 8200\neureka:\n  instance:\n    hostname: center2\n  client:\n    serviceUrl:\n      defaultZone: http://center:8000/eureka/,http://center1:8100/eureka/ #服务地址，多个可用逗号【,】分隔\n---\n\n\n\n\n```\n启动：\n- mvn package 打成jar包\n- cmd 切入到jar所在目录\n- 分别运行：\n\n\t```bash\n\tjava -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center\n\tjava -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center1\n\tjava -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center2\n\t```\n- 浏览器查看，集群搭建成功\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191112230009761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n#### 四、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)","source":"_posts/2019-10-07-【Spring Cloud 笔记和总结】二、注册中心Eureka.md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】二、注册中心Eureka\ndate: 2019-10-07 21:05:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 分布式\n- 注册中心\n- Eureka\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n\n---\n\n#### 一、关于注册中心\n**主要功能如下**\n\n- 服务注册表：记录分布式架构中所有服务和服务地址的映射关系，用于服务直接相互调用\t\n\n- 服务注册与发现：服务启动时将自己的信息注册到注册中心；服务直接相互调用时从注册中心获取目标服务信息\n\n- 服务健康检查 ：使用一定机制检查注册中心的服务是否正常，如果长时间无法访问，则将其移除\n\n  <!--more-->\n\n**常见注册中心**\n- Eureka\n\n- Consul\n\n- Zookeeper\n\n- Nacos\n  ...\n  `本文以Eureka为例，后续会更新其他注册中心`\n\n  <!--more-->\n\n#### 二、主要内容\n结构如下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191112220323391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n配置文件`application.yml`如下\n\n```yml\nspring:\n  application:\n    name: spring-cloud-eureka #服务名称\nserver:\n  port: 8000\neureka:\n  instance:\n    hostname: localhost\n  client:\n    register-with-eureka: false #表示是否将自己注册到Eureka Server，默认为true。\n    fetch-registry: false #表示是否从Eureka Server获取注册信息，默认为true。\n    serviceUrl:\n      defaultZone: http://localhost:8000/eureka #服务地址，多个可用逗号【,】分隔\n```\n`pom`文件如下\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lxt</groupId>\n        <artifactId>springcloud</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <groupId>com.lxt</groupId>\n    <artifactId>exureka-server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>exureka-server</name>\n    <description>Demo project for Spring Boot</description>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n运行结果如下图所示，注册中心目前无服务注册\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191112221221519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\n#### 三、集群高可用\n`C:\\Windows\\System32\\drivers\\etc\\host`文件添加映射\n\n```bash\n127.0.0.1       center\n127.0.0.1       center1\n127.0.0.1       center2\n```\n\n使用yml配置文件连接符`---`添加三个集群的节点`center、center1、center2`,修改后配置文件如下：\n\n```yml\n\n\nspring:\n  application:\n    name: spring-cloud-eureka #服务名称\n---\nserver:\n  port: 8000\neureka:\n  instance:\n    hostname: localhost\n  client:\n    register-with-eureka: false #表示是否将自己注册到Eureka Server，默认为true。\n    fetch-registry: false #表示是否从Eureka Server获取注册信息，默认为true。\n    serviceUrl:\n      defaultZone: http://localhost:8000/eureka/ #服务地址，多个可用逗号【,】分隔\n---\nspring:\n  profiles: center\nserver:\n  port: 8000\neureka:\n  instance:\n    hostname: center\n  client:\n    #register-with-eureka: false #表示是否将自己注册到Eureka Server，默认为true。\n    ##fetch-registry: false #表示是否从Eureka Server获取注册信息，默认为true。\n    serviceUrl:\n      defaultZone: http://center1:8100/eureka/,http://center2:8200/eureka/ #服务地址，多个可用逗号【,】分隔\n---\nspring:\n  profiles: center1\nserver:\n  port: 8100\neureka:\n  instance:\n    hostname: center1\n  client:\n    serviceUrl:\n      defaultZone: http://center:8000/eureka/,http://center2:8200/eureka/ #服务地址，多个可用逗号【,】分隔\n---\nspring:\n  profiles: center2\nserver:\n  port: 8200\neureka:\n  instance:\n    hostname: center2\n  client:\n    serviceUrl:\n      defaultZone: http://center:8000/eureka/,http://center1:8100/eureka/ #服务地址，多个可用逗号【,】分隔\n---\n\n\n\n\n```\n启动：\n- mvn package 打成jar包\n- cmd 切入到jar所在目录\n- 分别运行：\n\n\t```bash\n\tjava -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center\n\tjava -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center1\n\tjava -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center2\n\t```\n- 浏览器查看，集群搭建成功\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191112230009761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n#### 四、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)","slug":"2019-10-07-【Spring Cloud 笔记和总结】二、注册中心Eureka","published":1,"updated":"2019-11-24T15:05:45.639Z","_id":"ck3d4r6lx003ss8vkmr6lg7cz","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一、关于注册中心\"><a href=\"#一、关于注册中心\" class=\"headerlink\" title=\"一、关于注册中心\"></a>一、关于注册中心</h4><p><strong>主要功能如下</strong></p>\n<ul>\n<li><p>服务注册表：记录分布式架构中所有服务和服务地址的映射关系，用于服务直接相互调用    </p>\n</li>\n<li><p>服务注册与发现：服务启动时将自己的信息注册到注册中心；服务直接相互调用时从注册中心获取目标服务信息</p>\n</li>\n<li><p>服务健康检查 ：使用一定机制检查注册中心的服务是否正常，如果长时间无法访问，则将其移除</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<p><strong>常见注册中心</strong></p>\n<ul>\n<li><p>Eureka</p>\n</li>\n<li><p>Consul</p>\n</li>\n<li><p>Zookeeper</p>\n</li>\n<li><p>Nacos<br>…<br><code>本文以Eureka为例，后续会更新其他注册中心</code></p>\n<!--more-->\n</li>\n</ul>\n<h4 id=\"二、主要内容\"><a href=\"#二、主要内容\" class=\"headerlink\" title=\"二、主要内容\"></a>二、主要内容</h4><p>结构如下<br><img src=\"https://img-blog.csdnimg.cn/20191112220323391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>配置文件<code>application.yml</code>如下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-eureka</span> <span class=\"comment\">#服务名称</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#表示是否将自己注册到Eureka Server，默认为true。</span></span><br><span class=\"line\"><span class=\"attr\">    fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\">#表示是否从Eureka Server获取注册信息，默认为true。</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka</span> <span class=\"comment\">#服务地址，多个可用逗号【,】分隔</span></span><br></pre></td></tr></table></figure>\n<p><code>pom</code>文件如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;exureka-server&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;exureka-server&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下图所示，注册中心目前无服务注册<br><img src=\"https://img-blog.csdnimg.cn/20191112221221519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"三、集群高可用\"><a href=\"#三、集群高可用\" class=\"headerlink\" title=\"三、集群高可用\"></a>三、集群高可用</h4><p><code>C:\\Windows\\System32\\drivers\\etc\\host</code>文件添加映射</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1       center</span><br><span class=\"line\">127.0.0.1       center1</span><br><span class=\"line\">127.0.0.1       center2</span><br></pre></td></tr></table></figure>\n<p>使用yml配置文件连接符<code>---</code>添加三个集群的节点<code>center、center1、center2</code>,修改后配置文件如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-eureka</span> <span class=\"comment\">#服务名称</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#表示是否将自己注册到Eureka Server，默认为true。</span></span><br><span class=\"line\"><span class=\"attr\">    fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\">#表示是否从Eureka Server获取注册信息，默认为true。</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span> <span class=\"comment\">#服务地址，多个可用逗号【,】分隔</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">center</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">center</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\">    <span class=\"comment\">#register-with-eureka: false #表示是否将自己注册到Eureka Server，默认为true。</span></span><br><span class=\"line\">    <span class=\"comment\">##fetch-registry: false #表示是否从Eureka Server获取注册信息，默认为true。</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://center1:8100/eureka/,http://center2:8200/eureka/</span> <span class=\"comment\">#服务地址，多个可用逗号【,】分隔</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">center1</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8100</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">center1</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://center:8000/eureka/,http://center2:8200/eureka/</span> <span class=\"comment\">#服务地址，多个可用逗号【,】分隔</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">center2</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8200</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">center2</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://center:8000/eureka/,http://center1:8100/eureka/</span> <span class=\"comment\">#服务地址，多个可用逗号【,】分隔</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>启动：</p>\n<ul>\n<li>mvn package 打成jar包</li>\n<li>cmd 切入到jar所在目录</li>\n<li><p>分别运行：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center</span><br><span class=\"line\">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center1</span><br><span class=\"line\">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览器查看，集群搭建成功<br><img src=\"https://img-blog.csdnimg.cn/20191112230009761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"四、相关\"><a href=\"#四、相关\" class=\"headerlink\" title=\"四、相关\"></a>四、相关</h4></li>\n<li>父模块介绍<a href=\"https://blog.csdn.net/qq_25283709/article/category/9462287\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n<li>源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"一、关于注册中心\"><a href=\"#一、关于注册中心\" class=\"headerlink\" title=\"一、关于注册中心\"></a>一、关于注册中心</h4><p><strong>主要功能如下</strong></p>\n<ul>\n<li><p>服务注册表：记录分布式架构中所有服务和服务地址的映射关系，用于服务直接相互调用    </p>\n</li>\n<li><p>服务注册与发现：服务启动时将自己的信息注册到注册中心；服务直接相互调用时从注册中心获取目标服务信息</p>\n</li>\n<li><p>服务健康检查 ：使用一定机制检查注册中心的服务是否正常，如果长时间无法访问，则将其移除</p>","more":"</li>\n</ul>\n<p><strong>常见注册中心</strong></p>\n<ul>\n<li><p>Eureka</p>\n</li>\n<li><p>Consul</p>\n</li>\n<li><p>Zookeeper</p>\n</li>\n<li><p>Nacos<br>…<br><code>本文以Eureka为例，后续会更新其他注册中心</code></p>\n<!--more-->\n</li>\n</ul>\n<h4 id=\"二、主要内容\"><a href=\"#二、主要内容\" class=\"headerlink\" title=\"二、主要内容\"></a>二、主要内容</h4><p>结构如下<br><img src=\"https://img-blog.csdnimg.cn/20191112220323391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>配置文件<code>application.yml</code>如下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-eureka</span> <span class=\"comment\">#服务名称</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#表示是否将自己注册到Eureka Server，默认为true。</span></span><br><span class=\"line\"><span class=\"attr\">    fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\">#表示是否从Eureka Server获取注册信息，默认为true。</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka</span> <span class=\"comment\">#服务地址，多个可用逗号【,】分隔</span></span><br></pre></td></tr></table></figure>\n<p><code>pom</code>文件如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;exureka-server&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;exureka-server&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下图所示，注册中心目前无服务注册<br><img src=\"https://img-blog.csdnimg.cn/20191112221221519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"三、集群高可用\"><a href=\"#三、集群高可用\" class=\"headerlink\" title=\"三、集群高可用\"></a>三、集群高可用</h4><p><code>C:\\Windows\\System32\\drivers\\etc\\host</code>文件添加映射</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1       center</span><br><span class=\"line\">127.0.0.1       center1</span><br><span class=\"line\">127.0.0.1       center2</span><br></pre></td></tr></table></figure>\n<p>使用yml配置文件连接符<code>---</code>添加三个集群的节点<code>center、center1、center2</code>,修改后配置文件如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-eureka</span> <span class=\"comment\">#服务名称</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#表示是否将自己注册到Eureka Server，默认为true。</span></span><br><span class=\"line\"><span class=\"attr\">    fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\">#表示是否从Eureka Server获取注册信息，默认为true。</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span> <span class=\"comment\">#服务地址，多个可用逗号【,】分隔</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">center</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">center</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\">    <span class=\"comment\">#register-with-eureka: false #表示是否将自己注册到Eureka Server，默认为true。</span></span><br><span class=\"line\">    <span class=\"comment\">##fetch-registry: false #表示是否从Eureka Server获取注册信息，默认为true。</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://center1:8100/eureka/,http://center2:8200/eureka/</span> <span class=\"comment\">#服务地址，多个可用逗号【,】分隔</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">center1</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8100</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">center1</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://center:8000/eureka/,http://center2:8200/eureka/</span> <span class=\"comment\">#服务地址，多个可用逗号【,】分隔</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">center2</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8200</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">center2</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://center:8000/eureka/,http://center1:8100/eureka/</span> <span class=\"comment\">#服务地址，多个可用逗号【,】分隔</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>启动：</p>\n<ul>\n<li>mvn package 打成jar包</li>\n<li>cmd 切入到jar所在目录</li>\n<li><p>分别运行：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center</span><br><span class=\"line\">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center1</span><br><span class=\"line\">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=center2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览器查看，集群搭建成功<br><img src=\"https://img-blog.csdnimg.cn/20191112230009761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"四、相关\"><a href=\"#四、相关\" class=\"headerlink\" title=\"四、相关\"></a>四、相关</h4></li>\n<li>父模块介绍<a href=\"https://blog.csdn.net/qq_25283709/article/category/9462287\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n<li>源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n</ul>"},{"title":"【Spring Cloud 笔记和总结】三、服务提供与消费和实现客户端负载均衡","date":"2019-10-18T12:30:12.000Z","copyright":"true。","_content":"\n#### 一、简介\n注册中心Eureka架构图如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191113212752597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**分别是注册中心（Eureka）、服务提供（Service Provider）和服务消费（Service Consumer），后两者均为注册到注册中心的服务，因调用关系不同而身份不同，不同的业务场景下身份可能会互换。**\n\n<!--more-->\n\n#### 二、主要内容\n\n###### 1、服务提供者\n结构如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191113214038821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n`HelloController`添加注解`@RestController`,核心代码如下\n\n```java\n    @RequestMapping(value = \"/hello\",method = RequestMethod.GET)\n    public String index(String name) {\n        return \"hello \"+name+\"，this is first messge\";\n    }\n    @RequestMapping(value = \"/foo\")\n    public String foo(String foo) {\n        return \"hello \"+foo+\"，this is first messge\";\n    }\n```\n`application.yml`配置文件\n\n```yml\nspring:\n    application:\n        name: spring-cloud-provider\nserver:\n    port: 9000\neureka:\n    client:\n        serviceUrl:\n            defaultZone: http://localhost:8000/eureka/\n```\n`pom.xml`文件\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lxt</groupId>\n        <artifactId>springcloud</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <groupId>com.lxt</groupId>\n    <artifactId>service-provider</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>service-provider</name>\n    <description>Demo project for Spring Boot</description>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n###### 2、服务消费者\n结构如下，暂时忽略`hystrix`包\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117004121974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n`HelloRemote`代码\n\n```java\n@Component\npublic class HelloRest {\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    public String hello(String name){\n        String response = restTemplate.getForObject(\"http://spring-cloud-provider/foo?foo=\"+name,String.class);\n        return response;\n    }\n\n\n    @Bean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n\n}\n\n```\n\n`ConsumerController`核心代码\n\n```bash\n@RestController\npublic class ConsumerController {\n    @Autowired\n    private HelloRest helloRest;\n\n    @RequestMapping(\"/hello/{name}\")\n    public String index(@PathVariable(\"name\") String name) {\n        return helloRest.hello(name);\n    }\n    @RequestMapping(\"/test\")\n    public String test() {\n        return \"test success!\";\n    }\n}\n```\n`application.yml`配文件\n\n```bash\nspring:\n    application:\n        name: spring-cloud-consumer\nserver:\n    port: 9001\neureka:\n    client:\n        serviceUrl:\n            defaultZone: http://localhost:8000/eureka/\n```\n`pom.xml`文件\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lxt</groupId>\n        <artifactId>springcloud</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <groupId>com.lxt</groupId>\n    <artifactId>service-consumer</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>service-consumer</name>\n    <description>Demo project for Spring Boot</description>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n#### 三、结果演示\n- 分别启动注册中心、服务提供者和服务消费者，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191113220952945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 调用服务消费者测试\n\t\t- 浏览器输入`http://localhost:9001/hello/lxt`\n\t\t- 返回`hello lxt，this is first messge`，测试成功\n\n#### 四、整合Feign实现负载均衡\n**简介**\n\nFegin是Netfix开发的声明式、模板化的HTTP客户端，Spring Cloud 对Fegin进行了增强，使Fegin支持了Spring MVC注解，并整合了Ribbon和Eureka，从而让Fegin的使用更加方便。\n\nRibbon是基于Netfix发布的客户端负载均衡器，默认提供了轮询、随机等负载均衡算法，开发者也可以自定义负载均衡算法。\n\n**Eureka Server 和 Fegin整合使用大致架构如下**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117004857162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**实现负载均衡**\n\n- 依赖\n\n\t```bash\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-openfeign</artifactId>\n\t        </dependency>\n\t```\n- 启动类添加注解`@EnableFeignClients`启用feign进行远程调用\n\n\t```java\n\t@SpringBootApplication\n\t@EnableDiscoveryClient//启用服务注册与发现\n\t@EnableFeignClients//启用feign进行远程调用\n\tpublic class ServiceConsumerApplication {\n\t\n\t    public static void main(String[] args) {\n\t        SpringApplication.run(ServiceConsumerApplication.class, args);\n\t    }\n\t\n\t}\n\t```\n\n- 使用`@FeignClient`实现负载均衡\n\t```java\n\t// name:配置服务提供者名称，用于从注册中心获取服务提供者信息\n\t@FeignClient(name= \"spring-cloud-provider\")\n\tpublic interface HelloFegin {\n\t    @RequestMapping(value = \"/hello\")\n\t    public String hello(@RequestParam(value = \"name\") String name);\n\t\n\t}\n\t```\n- 复制`service-provider`,重命名`service-provider1`\n- 修改配置文件端口为9002\n- 修改`HelloController.index`返回值为`\"hello \"+name+\"，this is two messge\"`\n\t如下图：\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191113222048474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 注册中心\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191113222346477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 多次测试`http://localhost:9001/hello/lxt`分别返回`hello lxt，this is first messge`和`hello lxt，this is two messge`\n#### 五、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)","source":"_posts/2019-10-18-【Spring Cloud 笔记和总结】三、服务提供与消费和实现客户端负载均衡.md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】三、服务提供与消费和实现客户端负载均衡\ndate: 2019-10-18 20:30:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 负载均衡\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n\n---\n\n#### 一、简介\n注册中心Eureka架构图如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191113212752597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**分别是注册中心（Eureka）、服务提供（Service Provider）和服务消费（Service Consumer），后两者均为注册到注册中心的服务，因调用关系不同而身份不同，不同的业务场景下身份可能会互换。**\n\n<!--more-->\n\n#### 二、主要内容\n\n###### 1、服务提供者\n结构如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191113214038821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n`HelloController`添加注解`@RestController`,核心代码如下\n\n```java\n    @RequestMapping(value = \"/hello\",method = RequestMethod.GET)\n    public String index(String name) {\n        return \"hello \"+name+\"，this is first messge\";\n    }\n    @RequestMapping(value = \"/foo\")\n    public String foo(String foo) {\n        return \"hello \"+foo+\"，this is first messge\";\n    }\n```\n`application.yml`配置文件\n\n```yml\nspring:\n    application:\n        name: spring-cloud-provider\nserver:\n    port: 9000\neureka:\n    client:\n        serviceUrl:\n            defaultZone: http://localhost:8000/eureka/\n```\n`pom.xml`文件\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lxt</groupId>\n        <artifactId>springcloud</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <groupId>com.lxt</groupId>\n    <artifactId>service-provider</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>service-provider</name>\n    <description>Demo project for Spring Boot</description>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n###### 2、服务消费者\n结构如下，暂时忽略`hystrix`包\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117004121974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n`HelloRemote`代码\n\n```java\n@Component\npublic class HelloRest {\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    public String hello(String name){\n        String response = restTemplate.getForObject(\"http://spring-cloud-provider/foo?foo=\"+name,String.class);\n        return response;\n    }\n\n\n    @Bean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n\n}\n\n```\n\n`ConsumerController`核心代码\n\n```bash\n@RestController\npublic class ConsumerController {\n    @Autowired\n    private HelloRest helloRest;\n\n    @RequestMapping(\"/hello/{name}\")\n    public String index(@PathVariable(\"name\") String name) {\n        return helloRest.hello(name);\n    }\n    @RequestMapping(\"/test\")\n    public String test() {\n        return \"test success!\";\n    }\n}\n```\n`application.yml`配文件\n\n```bash\nspring:\n    application:\n        name: spring-cloud-consumer\nserver:\n    port: 9001\neureka:\n    client:\n        serviceUrl:\n            defaultZone: http://localhost:8000/eureka/\n```\n`pom.xml`文件\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lxt</groupId>\n        <artifactId>springcloud</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <groupId>com.lxt</groupId>\n    <artifactId>service-consumer</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>service-consumer</name>\n    <description>Demo project for Spring Boot</description>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n#### 三、结果演示\n- 分别启动注册中心、服务提供者和服务消费者，如下图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191113220952945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 调用服务消费者测试\n\t\t- 浏览器输入`http://localhost:9001/hello/lxt`\n\t\t- 返回`hello lxt，this is first messge`，测试成功\n\n#### 四、整合Feign实现负载均衡\n**简介**\n\nFegin是Netfix开发的声明式、模板化的HTTP客户端，Spring Cloud 对Fegin进行了增强，使Fegin支持了Spring MVC注解，并整合了Ribbon和Eureka，从而让Fegin的使用更加方便。\n\nRibbon是基于Netfix发布的客户端负载均衡器，默认提供了轮询、随机等负载均衡算法，开发者也可以自定义负载均衡算法。\n\n**Eureka Server 和 Fegin整合使用大致架构如下**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117004857162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**实现负载均衡**\n\n- 依赖\n\n\t```bash\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-openfeign</artifactId>\n\t        </dependency>\n\t```\n- 启动类添加注解`@EnableFeignClients`启用feign进行远程调用\n\n\t```java\n\t@SpringBootApplication\n\t@EnableDiscoveryClient//启用服务注册与发现\n\t@EnableFeignClients//启用feign进行远程调用\n\tpublic class ServiceConsumerApplication {\n\t\n\t    public static void main(String[] args) {\n\t        SpringApplication.run(ServiceConsumerApplication.class, args);\n\t    }\n\t\n\t}\n\t```\n\n- 使用`@FeignClient`实现负载均衡\n\t```java\n\t// name:配置服务提供者名称，用于从注册中心获取服务提供者信息\n\t@FeignClient(name= \"spring-cloud-provider\")\n\tpublic interface HelloFegin {\n\t    @RequestMapping(value = \"/hello\")\n\t    public String hello(@RequestParam(value = \"name\") String name);\n\t\n\t}\n\t```\n- 复制`service-provider`,重命名`service-provider1`\n- 修改配置文件端口为9002\n- 修改`HelloController.index`返回值为`\"hello \"+name+\"，this is two messge\"`\n\t如下图：\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191113222048474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 注册中心\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191113222346477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 多次测试`http://localhost:9001/hello/lxt`分别返回`hello lxt，this is first messge`和`hello lxt，this is two messge`\n#### 五、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)","slug":"2019-10-18-【Spring Cloud 笔记和总结】三、服务提供与消费和实现客户端负载均衡","published":1,"updated":"2019-11-24T15:06:55.690Z","_id":"ck3d4w1370043s8vkzkod6jxu","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h4><p>注册中心Eureka架构图如下：<br><img src=\"https://img-blog.csdnimg.cn/20191113212752597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>分别是注册中心（Eureka）、服务提供（Service Provider）和服务消费（Service Consumer），后两者均为注册到注册中心的服务，因调用关系不同而身份不同，不同的业务场景下身份可能会互换。</strong></p>\n<a id=\"more\"></a>\n<h4 id=\"二、主要内容\"><a href=\"#二、主要内容\" class=\"headerlink\" title=\"二、主要内容\"></a>二、主要内容</h4><h6 id=\"1、服务提供者\"><a href=\"#1、服务提供者\" class=\"headerlink\" title=\"1、服务提供者\"></a>1、服务提供者</h6><p>结构如下：<br><img src=\"https://img-blog.csdnimg.cn/20191113214038821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><code>HelloController</code>添加注解<code>@RestController</code>,核心代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>,method = RequestMethod.GET)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span>+name+<span class=\"string\">\"，this is first messge\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/foo\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String foo)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span>+foo+<span class=\"string\">\"，this is first messge\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>application.yml</code>配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">    application:</span></span><br><span class=\"line\"><span class=\"attr\">        name:</span> <span class=\"string\">spring-cloud-provider</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">    client:</span></span><br><span class=\"line\"><span class=\"attr\">        serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">            defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>\n<p><code>pom.xml</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;service-provider&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;service-provider&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2、服务消费者\"><a href=\"#2、服务消费者\" class=\"headerlink\" title=\"2、服务消费者\"></a>2、服务消费者</h6><p>结构如下，暂时忽略<code>hystrix</code>包<br><img src=\"https://img-blog.csdnimg.cn/20191117004121974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><code>HelloRemote</code>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloRest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        String response = restTemplate.getForObject(<span class=\"string\">\"http://spring-cloud-provider/foo?foo=\"</span>+name,String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ConsumerController</code>核心代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class ConsumerController &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private HelloRest helloRest;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(<span class=\"string\">\"/hello/&#123;name&#125;\"</span>)</span><br><span class=\"line\">    public String index(@PathVariable(<span class=\"string\">\"name\"</span>) String name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> helloRest.hello(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @RequestMapping(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">test</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"test success!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>application.yml</code>配文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">    application:</span><br><span class=\"line\">        name: spring-cloud-consumer</span><br><span class=\"line\">server:</span><br><span class=\"line\">    port: 9001</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">    client:</span><br><span class=\"line\">        serviceUrl:</span><br><span class=\"line\">            defaultZone: http://localhost:8000/eureka/</span><br></pre></td></tr></table></figure>\n<p><code>pom.xml</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;service-consumer&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;service-consumer&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、结果演示\"><a href=\"#三、结果演示\" class=\"headerlink\" title=\"三、结果演示\"></a>三、结果演示</h4><ul>\n<li>分别启动注册中心、服务提供者和服务消费者，如下图<br><img src=\"https://img-blog.csdnimg.cn/20191113220952945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>调用服务消费者测试<pre><code>- 浏览器输入`http://localhost:9001/hello/lxt`\n- 返回`hello lxt，this is first messge`，测试成功\n</code></pre></li>\n</ul>\n<h4 id=\"四、整合Feign实现负载均衡\"><a href=\"#四、整合Feign实现负载均衡\" class=\"headerlink\" title=\"四、整合Feign实现负载均衡\"></a>四、整合Feign实现负载均衡</h4><p><strong>简介</strong></p>\n<p>Fegin是Netfix开发的声明式、模板化的HTTP客户端，Spring Cloud 对Fegin进行了增强，使Fegin支持了Spring MVC注解，并整合了Ribbon和Eureka，从而让Fegin的使用更加方便。</p>\n<p>Ribbon是基于Netfix发布的客户端负载均衡器，默认提供了轮询、随机等负载均衡算法，开发者也可以自定义负载均衡算法。</p>\n<p><strong>Eureka Server 和 Fegin整合使用大致架构如下</strong><br><img src=\"https://img-blog.csdnimg.cn/20191117004857162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>实现负载均衡</strong></p>\n<ul>\n<li><p>依赖</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动类添加注解<code>@EnableFeignClients</code>启用feign进行远程调用</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span><span class=\"comment\">//启用服务注册与发现</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span><span class=\"comment\">//启用feign进行远程调用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceConsumerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>@FeignClient</code>实现负载均衡</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name:配置服务提供者名称，用于从注册中心获取服务提供者信息</span></span><br><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name= <span class=\"string\">\"spring-cloud-provider\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloFegin</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"name\"</span>)</span> String name)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制<code>service-provider</code>,重命名<code>service-provider1</code></p>\n</li>\n<li>修改配置文件端口为9002</li>\n<li>修改<code>HelloController.index</code>返回值为<code>&quot;hello &quot;+name+&quot;，this is two messge&quot;</code><br>  如下图：<br>  <img src=\"https://img-blog.csdnimg.cn/20191113222048474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>注册中心<br><img src=\"https://img-blog.csdnimg.cn/20191113222346477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>多次测试<code>http://localhost:9001/hello/lxt</code>分别返回<code>hello lxt，this is first messge</code>和<code>hello lxt，this is two messge</code><h4 id=\"五、相关\"><a href=\"#五、相关\" class=\"headerlink\" title=\"五、相关\"></a>五、相关</h4></li>\n<li>父模块介绍<a href=\"https://blog.csdn.net/qq_25283709/article/category/9462287\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n<li>源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h4><p>注册中心Eureka架构图如下：<br><img src=\"https://img-blog.csdnimg.cn/20191113212752597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>分别是注册中心（Eureka）、服务提供（Service Provider）和服务消费（Service Consumer），后两者均为注册到注册中心的服务，因调用关系不同而身份不同，不同的业务场景下身份可能会互换。</strong></p>","more":"<h4 id=\"二、主要内容\"><a href=\"#二、主要内容\" class=\"headerlink\" title=\"二、主要内容\"></a>二、主要内容</h4><h6 id=\"1、服务提供者\"><a href=\"#1、服务提供者\" class=\"headerlink\" title=\"1、服务提供者\"></a>1、服务提供者</h6><p>结构如下：<br><img src=\"https://img-blog.csdnimg.cn/20191113214038821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><code>HelloController</code>添加注解<code>@RestController</code>,核心代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>,method = RequestMethod.GET)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span>+name+<span class=\"string\">\"，this is first messge\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/foo\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String foo)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span>+foo+<span class=\"string\">\"，this is first messge\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>application.yml</code>配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">    application:</span></span><br><span class=\"line\"><span class=\"attr\">        name:</span> <span class=\"string\">spring-cloud-provider</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">    client:</span></span><br><span class=\"line\"><span class=\"attr\">        serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">            defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>\n<p><code>pom.xml</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;service-provider&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;service-provider&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2、服务消费者\"><a href=\"#2、服务消费者\" class=\"headerlink\" title=\"2、服务消费者\"></a>2、服务消费者</h6><p>结构如下，暂时忽略<code>hystrix</code>包<br><img src=\"https://img-blog.csdnimg.cn/20191117004121974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><code>HelloRemote</code>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloRest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        String response = restTemplate.getForObject(<span class=\"string\">\"http://spring-cloud-provider/foo?foo=\"</span>+name,String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ConsumerController</code>核心代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class ConsumerController &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private HelloRest helloRest;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(<span class=\"string\">\"/hello/&#123;name&#125;\"</span>)</span><br><span class=\"line\">    public String index(@PathVariable(<span class=\"string\">\"name\"</span>) String name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> helloRest.hello(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @RequestMapping(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">test</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"test success!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>application.yml</code>配文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">    application:</span><br><span class=\"line\">        name: spring-cloud-consumer</span><br><span class=\"line\">server:</span><br><span class=\"line\">    port: 9001</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">    client:</span><br><span class=\"line\">        serviceUrl:</span><br><span class=\"line\">            defaultZone: http://localhost:8000/eureka/</span><br></pre></td></tr></table></figure>\n<p><code>pom.xml</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;service-consumer&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;service-consumer&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、结果演示\"><a href=\"#三、结果演示\" class=\"headerlink\" title=\"三、结果演示\"></a>三、结果演示</h4><ul>\n<li>分别启动注册中心、服务提供者和服务消费者，如下图<br><img src=\"https://img-blog.csdnimg.cn/20191113220952945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>调用服务消费者测试<pre><code>- 浏览器输入`http://localhost:9001/hello/lxt`\n- 返回`hello lxt，this is first messge`，测试成功\n</code></pre></li>\n</ul>\n<h4 id=\"四、整合Feign实现负载均衡\"><a href=\"#四、整合Feign实现负载均衡\" class=\"headerlink\" title=\"四、整合Feign实现负载均衡\"></a>四、整合Feign实现负载均衡</h4><p><strong>简介</strong></p>\n<p>Fegin是Netfix开发的声明式、模板化的HTTP客户端，Spring Cloud 对Fegin进行了增强，使Fegin支持了Spring MVC注解，并整合了Ribbon和Eureka，从而让Fegin的使用更加方便。</p>\n<p>Ribbon是基于Netfix发布的客户端负载均衡器，默认提供了轮询、随机等负载均衡算法，开发者也可以自定义负载均衡算法。</p>\n<p><strong>Eureka Server 和 Fegin整合使用大致架构如下</strong><br><img src=\"https://img-blog.csdnimg.cn/20191117004857162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>实现负载均衡</strong></p>\n<ul>\n<li><p>依赖</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动类添加注解<code>@EnableFeignClients</code>启用feign进行远程调用</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span><span class=\"comment\">//启用服务注册与发现</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span><span class=\"comment\">//启用feign进行远程调用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceConsumerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>@FeignClient</code>实现负载均衡</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name:配置服务提供者名称，用于从注册中心获取服务提供者信息</span></span><br><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name= <span class=\"string\">\"spring-cloud-provider\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloFegin</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"name\"</span>)</span> String name)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制<code>service-provider</code>,重命名<code>service-provider1</code></p>\n</li>\n<li>修改配置文件端口为9002</li>\n<li>修改<code>HelloController.index</code>返回值为<code>&quot;hello &quot;+name+&quot;，this is two messge&quot;</code><br>  如下图：<br>  <img src=\"https://img-blog.csdnimg.cn/20191113222048474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>注册中心<br><img src=\"https://img-blog.csdnimg.cn/20191113222346477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>多次测试<code>http://localhost:9001/hello/lxt</code>分别返回<code>hello lxt，this is first messge</code>和<code>hello lxt，this is two messge</code><h4 id=\"五、相关\"><a href=\"#五、相关\" class=\"headerlink\" title=\"五、相关\"></a>五、相关</h4></li>\n<li>父模块介绍<a href=\"https://blog.csdn.net/qq_25283709/article/category/9462287\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n<li>源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n</ul>"},{"title":"【Spring Cloud 笔记和总结】四、熔断器Hystrix简单实现","date":"2019-10-25T14:30:12.000Z","copyright":"true。","_content":"\n\n\n- ####  一、简单实现\n\t- 基于上文服务消费者（`service-consumer`）代码。\n\t\n\t- 修改配置文件，添加：feign.hystrix.enable:true如下：\n\t\n\t\t<!--more-->\n\t\t\n\t\t```bash\n\t\tspring:\n\t\t    application:\n\t\t        name: spring-cloud-consumer\n\t\tserver:\n\t\t    port: 9001\n\t\teureka:\n\t\t    client:\n\t\t        serviceUrl:\n\t\t            defaultZone: http://localhost:8000/eureka/\n\t\tfeign:\n\t\t  hystrix:\n\t\t    enabled: true\n\t\t```\n\t\t\n\t- 添加容错回调类\n\t\t\n\t\t```java\n\t\tpackage com.lxt.serviceconsumer.hystrix;\n\t\t\n\t\timport com.lxt.serviceconsumer.dao.fegin.HelloFegin;\n\t\timport org.springframework.stereotype.Component;\n\t\timport org.springframework.web.bind.annotation.RequestParam;\n\t\t\n\t\t/**\n\t\t * @author lxt\n\t\t * @Copy Right Information: lxt\n\t\t * @Project: spring cloud\n\t\t * @CreateDate: 2018/12/16 15:58\n\t\t * @history Sr Date Modified By Why & What is modified\n\t\t * 1.2018/12/16 lxt & new\n\t\t */\n\t\t@Component\n\t\tpublic class HelloFeginHystrix implements HelloFegin {\n\t\t    @Override\n\t\t    public String hello(@RequestParam(value = \"name\") String name) {\n\t\t        return \"hello \" +name+\", this messge send failed \";\n\t\t    }\n\t\t}\n\t\t\n\t\t```\n\t\t\n\t- 修改`HelloFegin`添加回调`fallback`属性\n\t\n\t\t```bash\n\t\t@FeignClient(name= \"spring-cloud-provider\",fallback = HelloFeginHystrix.class)\n\t\t```\n\t\t\n\t- 测试\n\t\t- 分别启动注册中心、服务提供者和服务消费者 \t\n\t\t- 浏览器访问`localhost:9001/hello/lxt`,返回`hello lxt，this is first messge`\n\t\t- 停止服务提供者，再次访问\n\t\t- 返回`hello lxt，this messge send failed`\n\t\t- 测试成功\n\t####  二、相关\n\t- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n\t- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 参考\n\t\t- https://www.cnblogs.com/carrychan/p/9529418.html\n","source":"_posts/2019-10-25-【Spring Cloud 笔记和总结】四、熔断器Hystrix简单实现.md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】四、熔断器Hystrix简单实现\ndate: 2019-10-25 22:30:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 分布式\n- Hystrix\n- 熔断器\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n\n---\n\n\n\n- ####  一、简单实现\n\t- 基于上文服务消费者（`service-consumer`）代码。\n\t\n\t- 修改配置文件，添加：feign.hystrix.enable:true如下：\n\t\n\t\t<!--more-->\n\t\t\n\t\t```bash\n\t\tspring:\n\t\t    application:\n\t\t        name: spring-cloud-consumer\n\t\tserver:\n\t\t    port: 9001\n\t\teureka:\n\t\t    client:\n\t\t        serviceUrl:\n\t\t            defaultZone: http://localhost:8000/eureka/\n\t\tfeign:\n\t\t  hystrix:\n\t\t    enabled: true\n\t\t```\n\t\t\n\t- 添加容错回调类\n\t\t\n\t\t```java\n\t\tpackage com.lxt.serviceconsumer.hystrix;\n\t\t\n\t\timport com.lxt.serviceconsumer.dao.fegin.HelloFegin;\n\t\timport org.springframework.stereotype.Component;\n\t\timport org.springframework.web.bind.annotation.RequestParam;\n\t\t\n\t\t/**\n\t\t * @author lxt\n\t\t * @Copy Right Information: lxt\n\t\t * @Project: spring cloud\n\t\t * @CreateDate: 2018/12/16 15:58\n\t\t * @history Sr Date Modified By Why & What is modified\n\t\t * 1.2018/12/16 lxt & new\n\t\t */\n\t\t@Component\n\t\tpublic class HelloFeginHystrix implements HelloFegin {\n\t\t    @Override\n\t\t    public String hello(@RequestParam(value = \"name\") String name) {\n\t\t        return \"hello \" +name+\", this messge send failed \";\n\t\t    }\n\t\t}\n\t\t\n\t\t```\n\t\t\n\t- 修改`HelloFegin`添加回调`fallback`属性\n\t\n\t\t```bash\n\t\t@FeignClient(name= \"spring-cloud-provider\",fallback = HelloFeginHystrix.class)\n\t\t```\n\t\t\n\t- 测试\n\t\t- 分别启动注册中心、服务提供者和服务消费者 \t\n\t\t- 浏览器访问`localhost:9001/hello/lxt`,返回`hello lxt，this is first messge`\n\t\t- 停止服务提供者，再次访问\n\t\t- 返回`hello lxt，this messge send failed`\n\t\t- 测试成功\n\t####  二、相关\n\t- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n\t- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 参考\n\t\t- https://www.cnblogs.com/carrychan/p/9529418.html\n","slug":"2019-10-25-【Spring Cloud 笔记和总结】四、熔断器Hystrix简单实现","published":1,"updated":"2019-11-24T15:11:04.798Z","_id":"ck3d4yukn004cs8vkpioytdfu","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"一、简单实现\"><a href=\"#一、简单实现\" class=\"headerlink\" title=\"一、简单实现\"></a>一、简单实现</h4><ul>\n<li><p>基于上文服务消费者（<code>service-consumer</code>）代码。</p>\n</li>\n<li><p>修改配置文件，添加：feign.hystrix.enable:true如下：</p>\n  <a id=\"more\"></a>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">    application:</span><br><span class=\"line\">        name: spring-cloud-consumer</span><br><span class=\"line\">server:</span><br><span class=\"line\">    port: 9001</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">    client:</span><br><span class=\"line\">        serviceUrl:</span><br><span class=\"line\">            defaultZone: http://localhost:8000/eureka/</span><br><span class=\"line\">feign:</span><br><span class=\"line\">  hystrix:</span><br><span class=\"line\">    enabled: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 添加容错回调类\n\n    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxt.serviceconsumer.hystrix;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lxt.serviceconsumer.dao.fegin.HelloFegin;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> lxt</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Copy</span> Right Information: lxt</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Project</span>: spring cloud</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CreateDate</span>: 2018/12/16 15:58</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@history</span> Sr Date Modified By Why &amp; What is modified</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.2018/12/16 lxt &amp; new</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloFeginHystrix</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloFegin</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span> +name+<span class=\"string\">\", this messge send failed \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n- 修改`HelloFegin`添加回调`fallback`属性\n\n    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FeignClient(name= <span class=\"string\">\"spring-cloud-provider\"</span>,fallback = HelloFeginHystrix.class)</span><br></pre></td></tr></table></figure>\n\n\n- 测试\n    - 分别启动注册中心、服务提供者和服务消费者     \n    - 浏览器访问`localhost:9001/hello/lxt`,返回`hello lxt，this is first messge`\n    - 停止服务提供者，再次访问\n    - 返回`hello lxt，this messge send failed`\n    - 测试成功\n####  二、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n- 参考\n    - https://www.cnblogs.com/carrychan/p/9529418.html\n</code></pre>","site":{"data":{}},"excerpt":"<ul>\n<li><h4 id=\"一、简单实现\"><a href=\"#一、简单实现\" class=\"headerlink\" title=\"一、简单实现\"></a>一、简单实现</h4><ul>\n<li><p>基于上文服务消费者（<code>service-consumer</code>）代码。</p>\n</li>\n<li><p>修改配置文件，添加：feign.hystrix.enable:true如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">    application:</span><br><span class=\"line\">        name: spring-cloud-consumer</span><br><span class=\"line\">server:</span><br><span class=\"line\">    port: 9001</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">    client:</span><br><span class=\"line\">        serviceUrl:</span><br><span class=\"line\">            defaultZone: http://localhost:8000/eureka/</span><br><span class=\"line\">feign:</span><br><span class=\"line\">  hystrix:</span><br><span class=\"line\">    enabled: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 添加容错回调类\n\n    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxt.serviceconsumer.hystrix;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lxt.serviceconsumer.dao.fegin.HelloFegin;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> lxt</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Copy</span> Right Information: lxt</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Project</span>: spring cloud</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CreateDate</span>: 2018/12/16 15:58</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@history</span> Sr Date Modified By Why &amp; What is modified</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.2018/12/16 lxt &amp; new</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloFeginHystrix</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloFegin</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span> +name+<span class=\"string\">\", this messge send failed \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n- 修改`HelloFegin`添加回调`fallback`属性\n\n    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FeignClient(name= <span class=\"string\">\"spring-cloud-provider\"</span>,fallback = HelloFeginHystrix.class)</span><br></pre></td></tr></table></figure>\n\n\n- 测试\n    - 分别启动注册中心、服务提供者和服务消费者     \n    - 浏览器访问`localhost:9001/hello/lxt`,返回`hello lxt，this is first messge`\n    - 停止服务提供者，再次访问\n    - 返回`hello lxt，this messge send failed`\n    - 测试成功\n####  二、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n- 参考\n    - https://www.cnblogs.com/carrychan/p/9529418.html\n</code></pre>"},{"title":"【Spring Cloud 笔记和总结】五、 Hystrix Dashboard和Turbine监控","date":"2019-11-03T13:30:12.000Z","copyright":"true。","_content":"\n- ####  一、Hystrix Dashboard监控\n\t- 涉及项目\n\t\t\n\t\t-  service-consumer-hystrix => 基于service-consumer修改\n\t\t\n\t- 依赖\n\t\t\n\t\t<!--more-->\n\t\t\n\t\t```bash\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t\t    <modelVersion>4.0.0</modelVersion>\n\t\t    <parent>\n\t\t        <groupId>com.lxt</groupId>\n\t\t        <artifactId>springcloud</artifactId>\n\t\t        <version>1.0-SNAPSHOT</version>\n\t\t    </parent>\n\t\t    <groupId>com.lxt</groupId>\n\t\t    <artifactId>service-consumer-hystrix</artifactId>\n\t\t    <version>0.0.1-SNAPSHOT</version>\n\t\t    <name>service-consumer-hystrix</name>\n\t\t    <description>Demo project for Spring Boot</description>\n\t\t\n\t\t    <dependencies>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-openfeign</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.boot</groupId>\n\t\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t\t        </dependency>\n\t\t    </dependencies>\n\t\t\n\t\t</project>\n\t\t\n\t\t\n\t\t```\n\t\t\n\t- 配置文件\n\t\n\t\t```yml\n\t\tspring:\n\t\t  application:\n\t\t    name: spring-cloud-consumer-hystrix\n\t\tserver:\n\t\t  port: 9004\n\t\tfeign:\n\t\t  hystrix:\n\t\t    enabled: true\n\t\teureka:\n\t\t  client:\n\t\t    service-url:\n\t\t      defaultZone: http://localhost:8000/eureka/\n\t\t```\n\t\n\t- 启动类添加注解,注意`getServlet()`方法，用于解决spring cloud2 hystrix没有hystrix.stream路径\n\t\t```java\n\t\tpackage com.lxt.springcloudconsumerhystrix;\n\t\n\t\timport com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;\n\t\timport org.springframework.boot.SpringApplication;\n\t\timport org.springframework.boot.autoconfigure.SpringBootApplication;\n\t\timport org.springframework.boot.web.servlet.ServletRegistrationBean;\n\t\timport org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;\n\t\timport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\t\timport org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;\n\t\timport org.springframework.cloud.openfeign.EnableFeignClients;\n\t\timport org.springframework.context.annotation.Bean;\n\t\t\n\t\t@SpringBootApplication\n\t\t@EnableDiscoveryClient\n\t\t@EnableFeignClients\n\t\t@EnableHystrixDashboard\n\t\t@EnableCircuitBreaker\n\t\tpublic class SpringCloudConsumerHystrixApplication {\n\t\t\n\t\t    public static void main(String[] args) {\n\t\t        SpringApplication.run(SpringCloudConsumerHystrixApplication.class, args);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t     * 解决：找不到/hystrix.stream 报错：=>Unable to connect to Command Metric Stream.\n\t\t     * @return\n\t\t     */\n\t\t    @Bean\n\t\t    public ServletRegistrationBean getServlet() {\n\t\t        HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet();\n\t\t        ServletRegistrationBean registrationBean = new ServletRegistrationBean(streamServlet);\n\t\t        registrationBean.setLoadOnStartup(1);\n\t\t        registrationBean.addUrlMappings(\"/hystrix.stream\");\n\t\t        registrationBean.setName(\"HystrixMetricsStreamServlet\");\n\t\t        return registrationBean;\n\t\t    }\n\t\t}\n\t\t```\n\t\n\t\n\t\t```\n\t- 启动项目，浏览器输入`http://localhost:9004/hystrix`,如下：\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117123726133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\t- 监控默认集群：http://turbine-hostname:port/turbine.stream \n\t\t- 监控指定集群：http://turbine-hostname:port/turbine.stream?cluster=[clusterName]\n\t\t- 监控的那个应用：http://hystrix-app:port/hystrix.stream\n\t- 输入`http://localhost:9004/hystrix.stream `进入监控页面，此时页面显示`Loading`\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117124843621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117125004752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 浏览器访问`http://localhost:9004/hello/lxt`之后，监控页面如下\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117124832598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 图中参数解释如下\n\t界面解读\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111712515840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\n\t实心圆：它有颜色和大小之分，分别代表实例的监控程度和流量大小。如上图所示，它的健康度从绿色、黄色、橙色、红色递减。通过该实心圆的展示，我们就可以在大量的实例中快速的发现故障实例和高压力实例。\n\t\n\t曲线：用来记录 2 分钟内流量的相对变化，我们可以通过它来观察到流量的上升和下降趋势。\n\t其他一些数量指标如下图所示\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117125216734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 测试成功\n\t####  二、Turbine集群监控\n\t  - 涉及项目\n\t  \t- hystrix-dashboard-turbine \n\t  \t- service-consumer-node01  => 基于service-consumer-hystrix\n\t  \t- service-consumer-node02  => 基于service-consumer-hystrix\n\t  \t- \n\t **hystrix-dashboard-turbine项目添加**\n\t\n\t\n\t-  依赖\n\t\t```bash\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t\t    <modelVersion>4.0.0</modelVersion>\n\t\t    <parent>\n\t\t        <groupId>com.lxt</groupId>\n\t\t        <artifactId>springcloud</artifactId>\n\t\t        <version>1.0-SNAPSHOT</version>\n\t\t    </parent>\n\t\t    <groupId>com.lxt</groupId>\n\t\t    <artifactId>hystrix-dashboard-turbine</artifactId>\n\t\t    <version>0.0.1-SNAPSHOT</version>\n\t\t    <name>hystrix-dashboard-turbine</name>\n\t\t    <description>Demo project for Spring Boot</description>\n\t\t    <dependencies>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-turbine</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.boot</groupId>\n\t\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t\t        </dependency>\n\t\t    </dependencies>\n\t\t\n\t\t</project>\n\t\t\n\t\t```\n\t- 配置文件\n\t\t```yml\n\t\tspring:\n\t\t  application:\n\t\t    name: turbine-client\n\t\tserver:\n\t\t  port: 9009\n\t\tturbine:\n\t\t  # 需要监控的应用名称，默认逗号隔开，内部使用Stringutils.commaDelimitedListToStringArray分割\n\t\t  app-config: hystrix-client1,hystrix-client2\n\t\t  aggregator:\n\t\t    cluster-config: default\n\t\t  # 集群名称\n\t\t  cluster-name-expression: new String(\"default\")\n\t\t  combine-host-port: true\n\t\teureka:\n\t\t  client:\n\t\t    service-url:\n\t\t      defaultZone: http://localhost:8000/eureka/\n\t\t  instance:\n\t\t    # 启用ip配置 这样在注册中心列表中看见的是以ip+端口呈现的\n\t\t    prefer-ip-address: true\n\t\t    # 实例名称  最后呈现地址：ip:2000\n\t\t    instance-id: ${spring.cloud.client.ip-address}:${server.port}\n\t\n\t\t```\n\t- 启动类\n\t\t\n\t\t```java\n\t\tpackage com.lxt.hystrixdashboardturbine;\n\t\t\n\t\timport com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;\n\t\timport org.springframework.boot.SpringApplication;\n\t\timport org.springframework.boot.autoconfigure.SpringBootApplication;\n\t\timport org.springframework.boot.web.servlet.ServletRegistrationBean;\n\t\timport org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;\n\t\timport org.springframework.cloud.netflix.turbine.EnableTurbine;\n\t\timport org.springframework.context.annotation.Bean;\n\t\t\n\t\t@SpringBootApplication\n\t\t@EnableHystrixDashboard\n\t\t@EnableTurbine\n\t\tpublic class HystrixDashboardTurbineApplication {\n\t\t\n\t\t    public static void main(String[] args) {\n\t\t        SpringApplication.run(HystrixDashboardTurbineApplication.class, args);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t     * @return\n\t\t     */\n\t\t    @Bean\n\t\t    public ServletRegistrationBean getServlet() {\n\t\t        HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet();\n\t\t        ServletRegistrationBean registrationBean = new ServletRegistrationBean(streamServlet);\n\t\t        registrationBean.setLoadOnStartup(1);\n\t\t        registrationBean.addUrlMappings(\"/actuator/hystrix.stream\");\n\t\t        registrationBean.setName(\"HystrixMetricsStreamServlet\");\n\t\t        return registrationBean;\n\t\t    }\n\t\t}\n\t\t```\n\t**service-consumer-node01/02的依赖、代码和service-consumer-hystrix一样，区别在于一个配置，如下**\n\t- 配置文件,关键点`management.endpoints.web.exposure.include：hystrix.stream`\n\t\t```yml\n\t\tspring:\n\t\t  application:\n\t\t    name: hystrix-client1\n\t\tserver:\n\t\t  port: 9005\n\t\t\n\t\tfeign:\n\t\t  hystrix:\n\t\t    enabled: true\n\t\tmanagement:\n\t\t  endpoints:\n\t\t    web:\n\t\t      exposure:\n\t\t        # 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问\n\t\t        include: hystrix.stream\n\t\teureka:\n\t\t  client:\n\t\t    service-url:\n\t\t      defaultZone: http://localhost:8000/eureka/\n\t\t\n\t\t```\n\t**测试**\n\t- 分别启动注册中心、服务提供者、Turbine监控和两个服务消费者(service-consumer-node01/02)\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143021668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t**TURBINE-CLIENT再注册中心显示ip:port**\n\t- 浏览器访问`http://localhost:9009/hystrix`,监控默认集群\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143330676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143406677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 浏览器访问`http://localhost:9005/hello/lxt`和`http://localhost:9006/hello/lxt`\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143526476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 测试成功\n\t####  三、相关\n\t- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n\t- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 参考\n\t\t- https://www.cnblogs.com/carrychan/p/9529418.html\n\t\t- http://www.ityouknow.com/spring-cloud.html\t\n","source":"_posts/2019-11-03-【Spring Cloud 笔记和总结】五、 Hystrix Dashboard和Turbine监控.md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】五、 Hystrix Dashboard和Turbine监控\ndate: 2019-11-03 21:30:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 分布式\n- Hystrix Dashboar\n- Turbine\n- 监控\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n\n---\n\n- ####  一、Hystrix Dashboard监控\n\t- 涉及项目\n\t\t\n\t\t-  service-consumer-hystrix => 基于service-consumer修改\n\t\t\n\t- 依赖\n\t\t\n\t\t<!--more-->\n\t\t\n\t\t```bash\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t\t    <modelVersion>4.0.0</modelVersion>\n\t\t    <parent>\n\t\t        <groupId>com.lxt</groupId>\n\t\t        <artifactId>springcloud</artifactId>\n\t\t        <version>1.0-SNAPSHOT</version>\n\t\t    </parent>\n\t\t    <groupId>com.lxt</groupId>\n\t\t    <artifactId>service-consumer-hystrix</artifactId>\n\t\t    <version>0.0.1-SNAPSHOT</version>\n\t\t    <name>service-consumer-hystrix</name>\n\t\t    <description>Demo project for Spring Boot</description>\n\t\t\n\t\t    <dependencies>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-openfeign</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.boot</groupId>\n\t\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t\t        </dependency>\n\t\t    </dependencies>\n\t\t\n\t\t</project>\n\t\t\n\t\t\n\t\t```\n\t\t\n\t- 配置文件\n\t\n\t\t```yml\n\t\tspring:\n\t\t  application:\n\t\t    name: spring-cloud-consumer-hystrix\n\t\tserver:\n\t\t  port: 9004\n\t\tfeign:\n\t\t  hystrix:\n\t\t    enabled: true\n\t\teureka:\n\t\t  client:\n\t\t    service-url:\n\t\t      defaultZone: http://localhost:8000/eureka/\n\t\t```\n\t\n\t- 启动类添加注解,注意`getServlet()`方法，用于解决spring cloud2 hystrix没有hystrix.stream路径\n\t\t```java\n\t\tpackage com.lxt.springcloudconsumerhystrix;\n\t\n\t\timport com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;\n\t\timport org.springframework.boot.SpringApplication;\n\t\timport org.springframework.boot.autoconfigure.SpringBootApplication;\n\t\timport org.springframework.boot.web.servlet.ServletRegistrationBean;\n\t\timport org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;\n\t\timport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\t\timport org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;\n\t\timport org.springframework.cloud.openfeign.EnableFeignClients;\n\t\timport org.springframework.context.annotation.Bean;\n\t\t\n\t\t@SpringBootApplication\n\t\t@EnableDiscoveryClient\n\t\t@EnableFeignClients\n\t\t@EnableHystrixDashboard\n\t\t@EnableCircuitBreaker\n\t\tpublic class SpringCloudConsumerHystrixApplication {\n\t\t\n\t\t    public static void main(String[] args) {\n\t\t        SpringApplication.run(SpringCloudConsumerHystrixApplication.class, args);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t     * 解决：找不到/hystrix.stream 报错：=>Unable to connect to Command Metric Stream.\n\t\t     * @return\n\t\t     */\n\t\t    @Bean\n\t\t    public ServletRegistrationBean getServlet() {\n\t\t        HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet();\n\t\t        ServletRegistrationBean registrationBean = new ServletRegistrationBean(streamServlet);\n\t\t        registrationBean.setLoadOnStartup(1);\n\t\t        registrationBean.addUrlMappings(\"/hystrix.stream\");\n\t\t        registrationBean.setName(\"HystrixMetricsStreamServlet\");\n\t\t        return registrationBean;\n\t\t    }\n\t\t}\n\t\t```\n\t\n\t\n\t\t```\n\t- 启动项目，浏览器输入`http://localhost:9004/hystrix`,如下：\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117123726133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\t- 监控默认集群：http://turbine-hostname:port/turbine.stream \n\t\t- 监控指定集群：http://turbine-hostname:port/turbine.stream?cluster=[clusterName]\n\t\t- 监控的那个应用：http://hystrix-app:port/hystrix.stream\n\t- 输入`http://localhost:9004/hystrix.stream `进入监控页面，此时页面显示`Loading`\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117124843621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117125004752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 浏览器访问`http://localhost:9004/hello/lxt`之后，监控页面如下\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117124832598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 图中参数解释如下\n\t界面解读\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111712515840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\n\t实心圆：它有颜色和大小之分，分别代表实例的监控程度和流量大小。如上图所示，它的健康度从绿色、黄色、橙色、红色递减。通过该实心圆的展示，我们就可以在大量的实例中快速的发现故障实例和高压力实例。\n\t\n\t曲线：用来记录 2 分钟内流量的相对变化，我们可以通过它来观察到流量的上升和下降趋势。\n\t其他一些数量指标如下图所示\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117125216734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 测试成功\n\t####  二、Turbine集群监控\n\t  - 涉及项目\n\t  \t- hystrix-dashboard-turbine \n\t  \t- service-consumer-node01  => 基于service-consumer-hystrix\n\t  \t- service-consumer-node02  => 基于service-consumer-hystrix\n\t  \t- \n\t **hystrix-dashboard-turbine项目添加**\n\t\n\t\n\t-  依赖\n\t\t```bash\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t\t    <modelVersion>4.0.0</modelVersion>\n\t\t    <parent>\n\t\t        <groupId>com.lxt</groupId>\n\t\t        <artifactId>springcloud</artifactId>\n\t\t        <version>1.0-SNAPSHOT</version>\n\t\t    </parent>\n\t\t    <groupId>com.lxt</groupId>\n\t\t    <artifactId>hystrix-dashboard-turbine</artifactId>\n\t\t    <version>0.0.1-SNAPSHOT</version>\n\t\t    <name>hystrix-dashboard-turbine</name>\n\t\t    <description>Demo project for Spring Boot</description>\n\t\t    <dependencies>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-turbine</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.boot</groupId>\n\t\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t\t        </dependency>\n\t\t    </dependencies>\n\t\t\n\t\t</project>\n\t\t\n\t\t```\n\t- 配置文件\n\t\t```yml\n\t\tspring:\n\t\t  application:\n\t\t    name: turbine-client\n\t\tserver:\n\t\t  port: 9009\n\t\tturbine:\n\t\t  # 需要监控的应用名称，默认逗号隔开，内部使用Stringutils.commaDelimitedListToStringArray分割\n\t\t  app-config: hystrix-client1,hystrix-client2\n\t\t  aggregator:\n\t\t    cluster-config: default\n\t\t  # 集群名称\n\t\t  cluster-name-expression: new String(\"default\")\n\t\t  combine-host-port: true\n\t\teureka:\n\t\t  client:\n\t\t    service-url:\n\t\t      defaultZone: http://localhost:8000/eureka/\n\t\t  instance:\n\t\t    # 启用ip配置 这样在注册中心列表中看见的是以ip+端口呈现的\n\t\t    prefer-ip-address: true\n\t\t    # 实例名称  最后呈现地址：ip:2000\n\t\t    instance-id: ${spring.cloud.client.ip-address}:${server.port}\n\t\n\t\t```\n\t- 启动类\n\t\t\n\t\t```java\n\t\tpackage com.lxt.hystrixdashboardturbine;\n\t\t\n\t\timport com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;\n\t\timport org.springframework.boot.SpringApplication;\n\t\timport org.springframework.boot.autoconfigure.SpringBootApplication;\n\t\timport org.springframework.boot.web.servlet.ServletRegistrationBean;\n\t\timport org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;\n\t\timport org.springframework.cloud.netflix.turbine.EnableTurbine;\n\t\timport org.springframework.context.annotation.Bean;\n\t\t\n\t\t@SpringBootApplication\n\t\t@EnableHystrixDashboard\n\t\t@EnableTurbine\n\t\tpublic class HystrixDashboardTurbineApplication {\n\t\t\n\t\t    public static void main(String[] args) {\n\t\t        SpringApplication.run(HystrixDashboardTurbineApplication.class, args);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t     * @return\n\t\t     */\n\t\t    @Bean\n\t\t    public ServletRegistrationBean getServlet() {\n\t\t        HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet();\n\t\t        ServletRegistrationBean registrationBean = new ServletRegistrationBean(streamServlet);\n\t\t        registrationBean.setLoadOnStartup(1);\n\t\t        registrationBean.addUrlMappings(\"/actuator/hystrix.stream\");\n\t\t        registrationBean.setName(\"HystrixMetricsStreamServlet\");\n\t\t        return registrationBean;\n\t\t    }\n\t\t}\n\t\t```\n\t**service-consumer-node01/02的依赖、代码和service-consumer-hystrix一样，区别在于一个配置，如下**\n\t- 配置文件,关键点`management.endpoints.web.exposure.include：hystrix.stream`\n\t\t```yml\n\t\tspring:\n\t\t  application:\n\t\t    name: hystrix-client1\n\t\tserver:\n\t\t  port: 9005\n\t\t\n\t\tfeign:\n\t\t  hystrix:\n\t\t    enabled: true\n\t\tmanagement:\n\t\t  endpoints:\n\t\t    web:\n\t\t      exposure:\n\t\t        # 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问\n\t\t        include: hystrix.stream\n\t\teureka:\n\t\t  client:\n\t\t    service-url:\n\t\t      defaultZone: http://localhost:8000/eureka/\n\t\t\n\t\t```\n\t**测试**\n\t- 分别启动注册中心、服务提供者、Turbine监控和两个服务消费者(service-consumer-node01/02)\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143021668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t**TURBINE-CLIENT再注册中心显示ip:port**\n\t- 浏览器访问`http://localhost:9009/hystrix`,监控默认集群\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143330676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143406677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 浏览器访问`http://localhost:9005/hello/lxt`和`http://localhost:9006/hello/lxt`\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143526476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 测试成功\n\t####  三、相关\n\t- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n\t- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 参考\n\t\t- https://www.cnblogs.com/carrychan/p/9529418.html\n\t\t- http://www.ityouknow.com/spring-cloud.html\t\n","slug":"2019-11-03-【Spring Cloud 笔记和总结】五、 Hystrix Dashboard和Turbine监控","published":1,"updated":"2019-11-24T15:10:08.238Z","_id":"ck3d50yy5004us8vkg3tpdfid","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"一、Hystrix-Dashboard监控\"><a href=\"#一、Hystrix-Dashboard监控\" class=\"headerlink\" title=\"一、Hystrix Dashboard监控\"></a>一、Hystrix Dashboard监控</h4><ul>\n<li><p>涉及项目</p>\n<ul>\n<li>service-consumer-hystrix =&gt; 基于service-consumer修改</li>\n</ul>\n</li>\n<li><p>依赖</p>\n  <a id=\"more\"></a>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;service-consumer-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;service-consumer-hystrix&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 配置文件\n\n    <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-consumer-hystrix</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9004</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\"><span class=\"attr\">  hystrix:</span></span><br><span class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>\n\n\n- 启动类添加注解,注意`getServlet()`方法，用于解决spring cloud2 hystrix没有hystrix.stream路径\n    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxt.springcloudconsumerhystrix;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrixDashboard</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCircuitBreaker</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringCloudConsumerHystrixApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudConsumerHystrixApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解决：找不到/hystrix.stream 报错：=&gt;Unable to connect to Command Metric Stream.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">getServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HystrixMetricsStreamServlet streamServlet = <span class=\"keyword\">new</span> HystrixMetricsStreamServlet();</span><br><span class=\"line\">        ServletRegistrationBean registrationBean = <span class=\"keyword\">new</span> ServletRegistrationBean(streamServlet);</span><br><span class=\"line\">        registrationBean.setLoadOnStartup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        registrationBean.addUrlMappings(<span class=\"string\">\"/hystrix.stream\"</span>);</span><br><span class=\"line\">        registrationBean.setName(<span class=\"string\">\"HystrixMetricsStreamServlet\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 启动项目，浏览器输入`http://localhost:9004/hystrix`,如下：</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117123726133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\">\t- 监控默认集群：http://turbine-hostname:port/turbine.stream </span><br><span class=\"line\">\t- 监控指定集群：http://turbine-hostname:port/turbine.stream?cluster=[clusterName]</span><br><span class=\"line\">\t- 监控的那个应用：http://hystrix-app:port/hystrix.stream</span><br><span class=\"line\">- 输入`http://localhost:9004/hystrix.stream `进入监控页面，此时页面显示`Loading`</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117124843621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117125004752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\">- 浏览器访问`http://localhost:9004/hello/lxt`之后，监控页面如下</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117124832598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\">- 图中参数解释如下</span><br><span class=\"line\">界面解读</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111712515840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\"></span><br><span class=\"line\">实心圆：它有颜色和大小之分，分别代表实例的监控程度和流量大小。如上图所示，它的健康度从绿色、黄色、橙色、红色递减。通过该实心圆的展示，我们就可以在大量的实例中快速的发现故障实例和高压力实例。</span><br><span class=\"line\"></span><br><span class=\"line\">曲线：用来记录 2 分钟内流量的相对变化，我们可以通过它来观察到流量的上升和下降趋势。</span><br><span class=\"line\">其他一些数量指标如下图所示</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117125216734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\">- 测试成功</span><br><span class=\"line\">####  二、Turbine集群监控</span><br><span class=\"line\">  - 涉及项目</span><br><span class=\"line\">  \t- hystrix-dashboard-turbine </span><br><span class=\"line\">  \t- service-consumer-node01  =&gt; 基于service-consumer-hystrix</span><br><span class=\"line\">  \t- service-consumer-node02  =&gt; 基于service-consumer-hystrix</span><br><span class=\"line\">  \t- </span><br><span class=\"line\"> **hystrix-dashboard-turbine项目添加**</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-  依赖</span><br><span class=\"line\">\t```bash</span><br><span class=\"line\">\t&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">\t&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\t         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">\t    &lt;parent&gt;</span><br><span class=\"line\">\t        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">\t        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t    &lt;/parent&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;hystrix-dashboard-turbine&lt;/artifactId&gt;</span><br><span class=\"line\">\t    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t    &lt;name&gt;hystrix-dashboard-turbine&lt;/name&gt;</span><br><span class=\"line\">\t    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class=\"line\">\t    &lt;dependencies&gt;</span><br><span class=\"line\">\t        &lt;dependency&gt;</span><br><span class=\"line\">\t            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;/dependency&gt;</span><br><span class=\"line\">\t        &lt;dependency&gt;</span><br><span class=\"line\">\t            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;/dependency&gt;</span><br><span class=\"line\">\t        &lt;dependency&gt;</span><br><span class=\"line\">\t            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;/dependency&gt;</span><br><span class=\"line\">\t        &lt;dependency&gt;</span><br><span class=\"line\">\t            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t            &lt;artifactId&gt;spring-cloud-starter-netflix-turbine&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;/dependency&gt;</span><br><span class=\"line\">\t        &lt;dependency&gt;</span><br><span class=\"line\">\t            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;/dependency&gt;</span><br><span class=\"line\">\t    &lt;/dependencies&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n- 配置文件\n    <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">turbine-client</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9009</span></span><br><span class=\"line\"><span class=\"attr\">turbine:</span></span><br><span class=\"line\">  <span class=\"comment\"># 需要监控的应用名称，默认逗号隔开，内部使用Stringutils.commaDelimitedListToStringArray分割</span></span><br><span class=\"line\"><span class=\"attr\">  app-config:</span> <span class=\"string\">hystrix-client1,hystrix-client2</span></span><br><span class=\"line\"><span class=\"attr\">  aggregator:</span></span><br><span class=\"line\"><span class=\"attr\">    cluster-config:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"comment\"># 集群名称</span></span><br><span class=\"line\"><span class=\"attr\">  cluster-name-expression:</span> <span class=\"string\">new</span> <span class=\"string\">String(\"default\")</span></span><br><span class=\"line\"><span class=\"attr\">  combine-host-port:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\">    <span class=\"comment\"># 启用ip配置 这样在注册中心列表中看见的是以ip+端口呈现的</span></span><br><span class=\"line\"><span class=\"attr\">    prefer-ip-address:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 实例名称  最后呈现地址：ip:2000</span></span><br><span class=\"line\"><span class=\"attr\">    instance-id:</span> <span class=\"string\">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure>\n\n- 启动类\n\n    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxt.hystrixdashboardturbine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.turbine.EnableTurbine;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrixDashboard</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTurbine</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixDashboardTurbineApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HystrixDashboardTurbineApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">getServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HystrixMetricsStreamServlet streamServlet = <span class=\"keyword\">new</span> HystrixMetricsStreamServlet();</span><br><span class=\"line\">        ServletRegistrationBean registrationBean = <span class=\"keyword\">new</span> ServletRegistrationBean(streamServlet);</span><br><span class=\"line\">        registrationBean.setLoadOnStartup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        registrationBean.addUrlMappings(<span class=\"string\">\"/actuator/hystrix.stream\"</span>);</span><br><span class=\"line\">        registrationBean.setName(<span class=\"string\">\"HystrixMetricsStreamServlet\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**service-consumer-node01/02的依赖、代码和service-consumer-hystrix一样，区别在于一个配置，如下**\n- 配置文件,关键点`management.endpoints.web.exposure.include：hystrix.stream`\n    <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">hystrix-client1</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9005</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\"><span class=\"attr\">  hystrix:</span></span><br><span class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">hystrix.stream</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>\n\n**测试**\n- 分别启动注册中心、服务提供者、Turbine监控和两个服务消费者(service-consumer-node01/02)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143021668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**TURBINE-CLIENT再注册中心显示ip:port**\n- 浏览器访问`http://localhost:9009/hystrix`,监控默认集群\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143330676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143406677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 浏览器访问`http://localhost:9005/hello/lxt`和`http://localhost:9006/hello/lxt`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143526476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 测试成功\n####  三、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n- 参考\n    - https://www.cnblogs.com/carrychan/p/9529418.html\n    - http://www.ityouknow.com/spring-cloud.html    \n</code></pre>","site":{"data":{}},"excerpt":"<ul>\n<li><h4 id=\"一、Hystrix-Dashboard监控\"><a href=\"#一、Hystrix-Dashboard监控\" class=\"headerlink\" title=\"一、Hystrix Dashboard监控\"></a>一、Hystrix Dashboard监控</h4><ul>\n<li><p>涉及项目</p>\n<ul>\n<li>service-consumer-hystrix =&gt; 基于service-consumer修改</li>\n</ul>\n</li>\n<li><p>依赖</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;service-consumer-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;service-consumer-hystrix&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 配置文件\n\n    <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-consumer-hystrix</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9004</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\"><span class=\"attr\">  hystrix:</span></span><br><span class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>\n\n\n- 启动类添加注解,注意`getServlet()`方法，用于解决spring cloud2 hystrix没有hystrix.stream路径\n    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxt.springcloudconsumerhystrix;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrixDashboard</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCircuitBreaker</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringCloudConsumerHystrixApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudConsumerHystrixApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解决：找不到/hystrix.stream 报错：=&gt;Unable to connect to Command Metric Stream.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">getServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HystrixMetricsStreamServlet streamServlet = <span class=\"keyword\">new</span> HystrixMetricsStreamServlet();</span><br><span class=\"line\">        ServletRegistrationBean registrationBean = <span class=\"keyword\">new</span> ServletRegistrationBean(streamServlet);</span><br><span class=\"line\">        registrationBean.setLoadOnStartup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        registrationBean.addUrlMappings(<span class=\"string\">\"/hystrix.stream\"</span>);</span><br><span class=\"line\">        registrationBean.setName(<span class=\"string\">\"HystrixMetricsStreamServlet\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 启动项目，浏览器输入`http://localhost:9004/hystrix`,如下：</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117123726133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\">\t- 监控默认集群：http://turbine-hostname:port/turbine.stream </span><br><span class=\"line\">\t- 监控指定集群：http://turbine-hostname:port/turbine.stream?cluster=[clusterName]</span><br><span class=\"line\">\t- 监控的那个应用：http://hystrix-app:port/hystrix.stream</span><br><span class=\"line\">- 输入`http://localhost:9004/hystrix.stream `进入监控页面，此时页面显示`Loading`</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117124843621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117125004752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\">- 浏览器访问`http://localhost:9004/hello/lxt`之后，监控页面如下</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117124832598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\">- 图中参数解释如下</span><br><span class=\"line\">界面解读</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111712515840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\"></span><br><span class=\"line\">实心圆：它有颜色和大小之分，分别代表实例的监控程度和流量大小。如上图所示，它的健康度从绿色、黄色、橙色、红色递减。通过该实心圆的展示，我们就可以在大量的实例中快速的发现故障实例和高压力实例。</span><br><span class=\"line\"></span><br><span class=\"line\">曲线：用来记录 2 分钟内流量的相对变化，我们可以通过它来观察到流量的上升和下降趋势。</span><br><span class=\"line\">其他一些数量指标如下图所示</span><br><span class=\"line\">![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117125216734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)</span><br><span class=\"line\">- 测试成功</span><br><span class=\"line\">####  二、Turbine集群监控</span><br><span class=\"line\">  - 涉及项目</span><br><span class=\"line\">  \t- hystrix-dashboard-turbine </span><br><span class=\"line\">  \t- service-consumer-node01  =&gt; 基于service-consumer-hystrix</span><br><span class=\"line\">  \t- service-consumer-node02  =&gt; 基于service-consumer-hystrix</span><br><span class=\"line\">  \t- </span><br><span class=\"line\"> **hystrix-dashboard-turbine项目添加**</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-  依赖</span><br><span class=\"line\">\t```bash</span><br><span class=\"line\">\t&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">\t&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\t         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">\t    &lt;parent&gt;</span><br><span class=\"line\">\t        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">\t        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t    &lt;/parent&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;hystrix-dashboard-turbine&lt;/artifactId&gt;</span><br><span class=\"line\">\t    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t    &lt;name&gt;hystrix-dashboard-turbine&lt;/name&gt;</span><br><span class=\"line\">\t    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class=\"line\">\t    &lt;dependencies&gt;</span><br><span class=\"line\">\t        &lt;dependency&gt;</span><br><span class=\"line\">\t            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;/dependency&gt;</span><br><span class=\"line\">\t        &lt;dependency&gt;</span><br><span class=\"line\">\t            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;/dependency&gt;</span><br><span class=\"line\">\t        &lt;dependency&gt;</span><br><span class=\"line\">\t            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;/dependency&gt;</span><br><span class=\"line\">\t        &lt;dependency&gt;</span><br><span class=\"line\">\t            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t            &lt;artifactId&gt;spring-cloud-starter-netflix-turbine&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;/dependency&gt;</span><br><span class=\"line\">\t        &lt;dependency&gt;</span><br><span class=\"line\">\t            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">\t        &lt;/dependency&gt;</span><br><span class=\"line\">\t    &lt;/dependencies&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n- 配置文件\n    <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">turbine-client</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9009</span></span><br><span class=\"line\"><span class=\"attr\">turbine:</span></span><br><span class=\"line\">  <span class=\"comment\"># 需要监控的应用名称，默认逗号隔开，内部使用Stringutils.commaDelimitedListToStringArray分割</span></span><br><span class=\"line\"><span class=\"attr\">  app-config:</span> <span class=\"string\">hystrix-client1,hystrix-client2</span></span><br><span class=\"line\"><span class=\"attr\">  aggregator:</span></span><br><span class=\"line\"><span class=\"attr\">    cluster-config:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"comment\"># 集群名称</span></span><br><span class=\"line\"><span class=\"attr\">  cluster-name-expression:</span> <span class=\"string\">new</span> <span class=\"string\">String(\"default\")</span></span><br><span class=\"line\"><span class=\"attr\">  combine-host-port:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\">    <span class=\"comment\"># 启用ip配置 这样在注册中心列表中看见的是以ip+端口呈现的</span></span><br><span class=\"line\"><span class=\"attr\">    prefer-ip-address:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 实例名称  最后呈现地址：ip:2000</span></span><br><span class=\"line\"><span class=\"attr\">    instance-id:</span> <span class=\"string\">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure>\n\n- 启动类\n\n    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxt.hystrixdashboardturbine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.turbine.EnableTurbine;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrixDashboard</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTurbine</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixDashboardTurbineApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HystrixDashboardTurbineApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">getServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HystrixMetricsStreamServlet streamServlet = <span class=\"keyword\">new</span> HystrixMetricsStreamServlet();</span><br><span class=\"line\">        ServletRegistrationBean registrationBean = <span class=\"keyword\">new</span> ServletRegistrationBean(streamServlet);</span><br><span class=\"line\">        registrationBean.setLoadOnStartup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        registrationBean.addUrlMappings(<span class=\"string\">\"/actuator/hystrix.stream\"</span>);</span><br><span class=\"line\">        registrationBean.setName(<span class=\"string\">\"HystrixMetricsStreamServlet\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**service-consumer-node01/02的依赖、代码和service-consumer-hystrix一样，区别在于一个配置，如下**\n- 配置文件,关键点`management.endpoints.web.exposure.include：hystrix.stream`\n    <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">hystrix-client1</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9005</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\"><span class=\"attr\">  hystrix:</span></span><br><span class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">hystrix.stream</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>\n\n**测试**\n- 分别启动注册中心、服务提供者、Turbine监控和两个服务消费者(service-consumer-node01/02)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143021668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**TURBINE-CLIENT再注册中心显示ip:port**\n- 浏览器访问`http://localhost:9009/hystrix`,监控默认集群\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143330676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143406677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 浏览器访问`http://localhost:9005/hello/lxt`和`http://localhost:9006/hello/lxt`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117143526476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 测试成功\n####  三、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n- 参考\n    - https://www.cnblogs.com/carrychan/p/9529418.html\n    - http://www.ityouknow.com/spring-cloud.html    \n</code></pre>"},{"title":"【Spring Cloud 笔记和总结】六、Spring Cloud Config统一配置中心（Git+Spring Cloud Bus+RabbitMQ+Git WebHook）","date":"2019-11-05T12:30:12.000Z","copyright":"true。","_content":"\n\n\n\n\n- ####  一、简介\n\t基于Spring Cloud Config实现统一配置中心，将配置文件存放于Git(GitHub)上，通过Spring Cloud Bus消息总线&RabbitMQ消息中间件进行服务间消息通信。\n\t\n\t**涉及项目**\n\t\n\t- exureka-server\n\t\n\t- config-server\n\t\n\t- config-client\n\t\n\t  <!--more-->\n\t\n\t**整体架构图大致如下，使用GitHub Webhooks 触发配置中心刷新配置**\n\t\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117200225699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\n\t上图来源：`http://blog.didispace.com/springcloud7/`\n\t\n\t####  二、配置中心服务端实现\n\t**依赖**\t \t\n\t```bash\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t    <modelVersion>4.0.0</modelVersion>\n\t    <parent>\n\t        <groupId>com.lxt</groupId>\n\t        <artifactId>springcloud</artifactId>\n\t        <version>1.0-SNAPSHOT</version>\n\t    </parent>\n\t    <groupId>com.lxt</groupId>\n\t    <artifactId>config-server</artifactId>\n\t    <version>0.0.1-SNAPSHOT</version>\n\t    <name>config-server</name>\n\t    <description>Demo project for Spring Boot</description>\n\t    <dependencies>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-config-server</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n\t        </dependency>\n\t        <!--集成Git Webhooks之后，使用/monitor即可实现配置更新，通知其他服务-->\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-config-monitor</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.boot</groupId>\n\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t        </dependency>\n\t    </dependencies>\n\t</project>\n\t\n\t```\n\t**配置文件**\n\t```yml\n\tserver:\n\t  port: 8080\n\tspring:\n\t  application:\n\t    name: spring-cloud-config-server\n\t  cloud:\n\t    config:\n\t      server:\n\t        git:\n\t          uri: https://github.com/hdlxt/springcloud # 配置git仓库的地址\n\t          search-paths: config-repo                     # git仓库地址下的相对地址，可以配置多个，用,分割。\n\t          username:                     # git仓库的账号\n\t          password:           # git仓库的密码\n\t  rabbitmq:\n\t    host: 111.231.xxxx.xx\n\t    port: 5672\n\t    username: guest\n\t    password: guest\n\teureka:\n\t  client:\n\t    serviceUrl:\n\t      defaultZone: http://localhost:8000/eureka/   #注册中心eurka地址\n\tmanagement:\n\t  endpoints:\n\t    web:\n\t      exposure:\n\t       # 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问\n\t        include: bus-refresh\n\t\n\t```\n\t- 主要内容\n\t\t- 添加配置中心文件存放于github\n\t\t- 配置rabbitmq连接信息\n\t\t- 暴露bus-refresh\n\t- github配置文件内容\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117211411126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 仓库中的配置文件会被转换成 Web 接口，访问可以参照以下的规则：\n\t\t - /{application}/{profile}[/{label}]\n\t\t- /{application}-{profile}.yml\n\t\t- /{label}/{application}-{profile}.yml\n\t\t- /{application}-{profile}.properties\n\t\t- /{label}/{application}-{profile}.properties\n\t  - 上面的 URL 会映射 {application}-{profile}.yml 对应的配置文件，其中 {label} 对应 Git 上不同的分支，默认为 master。\n\t\t\n\t\n\t**启动类比较简单,声明是服务、配置中心服务端**\n\t```java\n\t@EnableConfigServer\n\t@EnableDiscoveryClient\n\t@SpringBootApplication\n\tpublic class ConfigServerApplication {\n\t\n\t    public static void main(String[] args) {\n\t        SpringApplication.run(ConfigServerApplication.class, args);\n\t    }\n\t\n\t}\n\t```\n\t到此配置中心服务端完毕。\n\t\n\t####  二、配置中心客户端实现\n\t- 依赖\n\t\t```bash\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t\t    <modelVersion>4.0.0</modelVersion>\n\t\t    <parent>\n\t\t        <groupId>com.lxt</groupId>\n\t\t        <artifactId>springcloud</artifactId>\n\t\t        <version>1.0-SNAPSHOT</version>\n\t\t    </parent>\n\t\t    <groupId>com.lxt</groupId>\n\t\t    <artifactId>config-client</artifactId>\n\t\t    <version>0.0.1-SNAPSHOT</version>\n\t\t    <name>config-client</name>\n\t\t    <description>Demo project for Spring Boot</description>\n\t\t    <dependencies>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-config</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.boot</groupId>\n\t\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n\t\t        </dependency>\n\t\t    </dependencies>\n\t\t</project>\n\t\t\n\t\t```\n\t- 配置文件\n\t\t- 关于` bootstrap.yml`和`application.yml`\n\t\t\t- bootstrap.yml（bootstrap.properties） 用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等\t\n\t\t\t- application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。\n\t\t\t- bootstrap.yml 先于 application.yml 加载\n\t\t- bootstrap.yml\n\t\t\t```yml\n\t\t\tserver:\n\t\t\t  port: 8003\n\t\t\tspring:\n\t\t\t  cloud:\n\t\t\t    config:\n\t\t\t      name: lxt-config\n\t\t\t      profile: dev\n\t\t\t      label: master\n\t\t\t      discovery:\n\t\t\t        #开启Config服务发现支持\n\t\t\t        enabled: true\n\t\t\t        #指定server端的name,也就是server端spring.application.name的值\n\t\t\t        service-id: spring-cloud-config-server\n\t\t\teureka:\n\t\t\t  client:\n\t\t\t    service-url:\n\t\t\t      defaultZone: http://localhost:8000/eureka/\n\t\t\t```\n\t \t- application.yml\n\t\t\t```yml\n\t\t\tspring:\n\t\t\t  application:\n\t\t\t    name: spring-cloud-config-client\n\t\t\t  cloud:\n\t\t\t    bus:\n\t\t\t     trace:\n\t\t\t       # 开启消息跟踪事件\n\t\t\t       enabled: true\n\t\t\t  rabbitmq:\n\t\t\t    host: 111.231.29.249\n\t\t\t    port: 5672\n\t\t\t    username: guest\n\t\t\t    password: guest\n\t\t\tmanagement:\n\t\t\t  endpoints:\n\t\t\t    web:\n\t\t\t      exposure:\n\t\t\t        include: refresh\n\t\t\t\n\t\t```\n\t- 主要代码\n\t\t-  核心\n\t\t\t- @EnableDiscoveryClient\n\t\t\t- @RefreshScope:使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n\t\t- 启动类\n\t\t\t```bash\n\t\t\t\n\t\t\t@EnableDiscoveryClient\n\t\t\t@SpringBootApplication\n\t\t\tpublic class ConfigClientApplication {\n\t\t\t\n\t\t\t    public static void main(String[] args) {\n\t\t\t        SpringApplication.run(ConfigClientApplication.class, args);\n\t\t\t    }\n\t\t\t\n\t\t\t}\n\t\t\t```\n\t\t- 测试\n\t\t\t```bash\n\t\t\t/**\n\t\t\t * @author lxt\n\t\t\t * @Copy Right Information: lxt\n\t\t\t * @Project: spring cloud\n\t\t\t * @CreateDate: 2018/12/16 20:04\n\t\t\t * @history Sr Date Modified By Why & What is modified\n\t\t\t * 1.2018/12/16 lxt & new\n\t\t\t */\n\t\t\t@RestController\n\t\t\t@RefreshScope // 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n\t\t\tpublic class HelloController {\n\t\t\t    @Value(\"${lxt.hello}\")\n\t\t\t    private String hello;\n\t\t\t\n\t\t\t    @RequestMapping(\"/hello\")\n\t\t\t    public String from() {\n\t\t\t        return this.hello;\n\t\t\t    }\n\t\t\t}\n\t\t\t```\n\t####  三、整合\n\t **以安装包或者docker方式安装RabbitMQ，启动**![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213514487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\n\t **配置GitHub Webhooks**\n\t- （可选，云服务器可跳过）内网穿透工具下载[natapp](#https://natapp.cn/)安装和配置（有免费通道），目的可给本机电脑映射一个外网域名，用于配置Webhooks\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111721323258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 配置Webhooks，配置中心服务端需引入`spring-cloud-config-monitor`依赖\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117214212673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t####  四、测试\n\t- 分别启动注册中心、配置中心服务端\n\t- 启动多个客户端\n\t\t- 可通过打jar包形式启动\n\t\t- 也可通过idea添加启动类，指定不同端口启动\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213813171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 修改配置文件，push到github上触发回调`http://t23b4j.natappfree.cc/monitor`,通知配置中心服务端更新配置，服务端以mq形式通过消息总线通知客户端更新配置。\n\t\n\t####  五、相关\n\t- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n\t- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 参考\n\t\t- http://www.ityouknow.com/spring-cloud.html\t \n","source":"_posts/2019-11-05-【Spring Cloud 笔记和总结】六、Spring Cloud Config统一配置中心（Git+Spring Cloud Bus+RabbitMQ+Git WebHook）.md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】六、Spring Cloud Config统一配置中心（Git+Spring Cloud Bus+RabbitMQ+Git WebHook）\ndate: 2019-11-05 20:30:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 分布式\n- 统一配置中心\n- Spring Cloud Bus\n- RabbitMQ\n- Git WebHook\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n\n---\n\n\n\n\n\n- ####  一、简介\n\t基于Spring Cloud Config实现统一配置中心，将配置文件存放于Git(GitHub)上，通过Spring Cloud Bus消息总线&RabbitMQ消息中间件进行服务间消息通信。\n\t\n\t**涉及项目**\n\t\n\t- exureka-server\n\t\n\t- config-server\n\t\n\t- config-client\n\t\n\t  <!--more-->\n\t\n\t**整体架构图大致如下，使用GitHub Webhooks 触发配置中心刷新配置**\n\t\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117200225699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\n\t上图来源：`http://blog.didispace.com/springcloud7/`\n\t\n\t####  二、配置中心服务端实现\n\t**依赖**\t \t\n\t```bash\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t    <modelVersion>4.0.0</modelVersion>\n\t    <parent>\n\t        <groupId>com.lxt</groupId>\n\t        <artifactId>springcloud</artifactId>\n\t        <version>1.0-SNAPSHOT</version>\n\t    </parent>\n\t    <groupId>com.lxt</groupId>\n\t    <artifactId>config-server</artifactId>\n\t    <version>0.0.1-SNAPSHOT</version>\n\t    <name>config-server</name>\n\t    <description>Demo project for Spring Boot</description>\n\t    <dependencies>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-config-server</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n\t        </dependency>\n\t        <!--集成Git Webhooks之后，使用/monitor即可实现配置更新，通知其他服务-->\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-config-monitor</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.boot</groupId>\n\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t        </dependency>\n\t    </dependencies>\n\t</project>\n\t\n\t```\n\t**配置文件**\n\t```yml\n\tserver:\n\t  port: 8080\n\tspring:\n\t  application:\n\t    name: spring-cloud-config-server\n\t  cloud:\n\t    config:\n\t      server:\n\t        git:\n\t          uri: https://github.com/hdlxt/springcloud # 配置git仓库的地址\n\t          search-paths: config-repo                     # git仓库地址下的相对地址，可以配置多个，用,分割。\n\t          username:                     # git仓库的账号\n\t          password:           # git仓库的密码\n\t  rabbitmq:\n\t    host: 111.231.xxxx.xx\n\t    port: 5672\n\t    username: guest\n\t    password: guest\n\teureka:\n\t  client:\n\t    serviceUrl:\n\t      defaultZone: http://localhost:8000/eureka/   #注册中心eurka地址\n\tmanagement:\n\t  endpoints:\n\t    web:\n\t      exposure:\n\t       # 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问\n\t        include: bus-refresh\n\t\n\t```\n\t- 主要内容\n\t\t- 添加配置中心文件存放于github\n\t\t- 配置rabbitmq连接信息\n\t\t- 暴露bus-refresh\n\t- github配置文件内容\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117211411126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 仓库中的配置文件会被转换成 Web 接口，访问可以参照以下的规则：\n\t\t - /{application}/{profile}[/{label}]\n\t\t- /{application}-{profile}.yml\n\t\t- /{label}/{application}-{profile}.yml\n\t\t- /{application}-{profile}.properties\n\t\t- /{label}/{application}-{profile}.properties\n\t  - 上面的 URL 会映射 {application}-{profile}.yml 对应的配置文件，其中 {label} 对应 Git 上不同的分支，默认为 master。\n\t\t\n\t\n\t**启动类比较简单,声明是服务、配置中心服务端**\n\t```java\n\t@EnableConfigServer\n\t@EnableDiscoveryClient\n\t@SpringBootApplication\n\tpublic class ConfigServerApplication {\n\t\n\t    public static void main(String[] args) {\n\t        SpringApplication.run(ConfigServerApplication.class, args);\n\t    }\n\t\n\t}\n\t```\n\t到此配置中心服务端完毕。\n\t\n\t####  二、配置中心客户端实现\n\t- 依赖\n\t\t```bash\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t\t    <modelVersion>4.0.0</modelVersion>\n\t\t    <parent>\n\t\t        <groupId>com.lxt</groupId>\n\t\t        <artifactId>springcloud</artifactId>\n\t\t        <version>1.0-SNAPSHOT</version>\n\t\t    </parent>\n\t\t    <groupId>com.lxt</groupId>\n\t\t    <artifactId>config-client</artifactId>\n\t\t    <version>0.0.1-SNAPSHOT</version>\n\t\t    <name>config-client</name>\n\t\t    <description>Demo project for Spring Boot</description>\n\t\t    <dependencies>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-config</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.boot</groupId>\n\t\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n\t\t        </dependency>\n\t\t    </dependencies>\n\t\t</project>\n\t\t\n\t\t```\n\t- 配置文件\n\t\t- 关于` bootstrap.yml`和`application.yml`\n\t\t\t- bootstrap.yml（bootstrap.properties） 用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等\t\n\t\t\t- application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。\n\t\t\t- bootstrap.yml 先于 application.yml 加载\n\t\t- bootstrap.yml\n\t\t\t```yml\n\t\t\tserver:\n\t\t\t  port: 8003\n\t\t\tspring:\n\t\t\t  cloud:\n\t\t\t    config:\n\t\t\t      name: lxt-config\n\t\t\t      profile: dev\n\t\t\t      label: master\n\t\t\t      discovery:\n\t\t\t        #开启Config服务发现支持\n\t\t\t        enabled: true\n\t\t\t        #指定server端的name,也就是server端spring.application.name的值\n\t\t\t        service-id: spring-cloud-config-server\n\t\t\teureka:\n\t\t\t  client:\n\t\t\t    service-url:\n\t\t\t      defaultZone: http://localhost:8000/eureka/\n\t\t\t```\n\t \t- application.yml\n\t\t\t```yml\n\t\t\tspring:\n\t\t\t  application:\n\t\t\t    name: spring-cloud-config-client\n\t\t\t  cloud:\n\t\t\t    bus:\n\t\t\t     trace:\n\t\t\t       # 开启消息跟踪事件\n\t\t\t       enabled: true\n\t\t\t  rabbitmq:\n\t\t\t    host: 111.231.29.249\n\t\t\t    port: 5672\n\t\t\t    username: guest\n\t\t\t    password: guest\n\t\t\tmanagement:\n\t\t\t  endpoints:\n\t\t\t    web:\n\t\t\t      exposure:\n\t\t\t        include: refresh\n\t\t\t\n\t\t```\n\t- 主要代码\n\t\t-  核心\n\t\t\t- @EnableDiscoveryClient\n\t\t\t- @RefreshScope:使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n\t\t- 启动类\n\t\t\t```bash\n\t\t\t\n\t\t\t@EnableDiscoveryClient\n\t\t\t@SpringBootApplication\n\t\t\tpublic class ConfigClientApplication {\n\t\t\t\n\t\t\t    public static void main(String[] args) {\n\t\t\t        SpringApplication.run(ConfigClientApplication.class, args);\n\t\t\t    }\n\t\t\t\n\t\t\t}\n\t\t\t```\n\t\t- 测试\n\t\t\t```bash\n\t\t\t/**\n\t\t\t * @author lxt\n\t\t\t * @Copy Right Information: lxt\n\t\t\t * @Project: spring cloud\n\t\t\t * @CreateDate: 2018/12/16 20:04\n\t\t\t * @history Sr Date Modified By Why & What is modified\n\t\t\t * 1.2018/12/16 lxt & new\n\t\t\t */\n\t\t\t@RestController\n\t\t\t@RefreshScope // 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n\t\t\tpublic class HelloController {\n\t\t\t    @Value(\"${lxt.hello}\")\n\t\t\t    private String hello;\n\t\t\t\n\t\t\t    @RequestMapping(\"/hello\")\n\t\t\t    public String from() {\n\t\t\t        return this.hello;\n\t\t\t    }\n\t\t\t}\n\t\t\t```\n\t####  三、整合\n\t **以安装包或者docker方式安装RabbitMQ，启动**![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213514487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\n\t **配置GitHub Webhooks**\n\t- （可选，云服务器可跳过）内网穿透工具下载[natapp](#https://natapp.cn/)安装和配置（有免费通道），目的可给本机电脑映射一个外网域名，用于配置Webhooks\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111721323258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 配置Webhooks，配置中心服务端需引入`spring-cloud-config-monitor`依赖\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117214212673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t####  四、测试\n\t- 分别启动注册中心、配置中心服务端\n\t- 启动多个客户端\n\t\t- 可通过打jar包形式启动\n\t\t- 也可通过idea添加启动类，指定不同端口启动\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213813171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 修改配置文件，push到github上触发回调`http://t23b4j.natappfree.cc/monitor`,通知配置中心服务端更新配置，服务端以mq形式通过消息总线通知客户端更新配置。\n\t\n\t####  五、相关\n\t- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n\t- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 参考\n\t\t- http://www.ityouknow.com/spring-cloud.html\t \n","slug":"2019-11-05-【Spring Cloud 笔记和总结】六、Spring Cloud Config统一配置中心（Git+Spring Cloud Bus+RabbitMQ+Git WebHook）","published":1,"updated":"2019-11-24T15:13:47.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3d57scu005ms8vk04hrw73m","content":"<ul>\n<li><h4 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h4><p>  基于Spring Cloud Config实现统一配置中心，将配置文件存放于Git(GitHub)上，通过Spring Cloud Bus消息总线&amp;RabbitMQ消息中间件进行服务间消息通信。</p>\n<p>  <strong>涉及项目</strong></p>\n<ul>\n<li><p>exureka-server</p>\n</li>\n<li><p>config-server</p>\n</li>\n<li><p>config-client</p>\n<a id=\"more\"></a>\n<p><strong>整体架构图大致如下，使用GitHub Webhooks 触发配置中心刷新配置</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117200225699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>上图来源：<code>http://blog.didispace.com/springcloud7/</code></p>\n<h4 id=\"二、配置中心服务端实现\"><a href=\"#二、配置中心服务端实现\" class=\"headerlink\" title=\"二、配置中心服务端实现\"></a>二、配置中心服务端实现</h4><p><strong>依赖</strong>         </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;config-server&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;config-server&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!--集成Git Webhooks之后，使用/monitor即可实现配置更新，通知其他服务--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-monitor&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-config-server</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      server:</span></span><br><span class=\"line\"><span class=\"attr\">        git:</span></span><br><span class=\"line\"><span class=\"attr\">          uri:</span> <span class=\"attr\">https://github.com/hdlxt/springcloud</span> <span class=\"comment\"># 配置git仓库的地址</span></span><br><span class=\"line\"><span class=\"attr\">          search-paths:</span> <span class=\"string\">config-repo</span>                     <span class=\"comment\"># git仓库地址下的相对地址，可以配置多个，用,分割。</span></span><br><span class=\"line\"><span class=\"attr\">          username:</span>                     <span class=\"comment\"># git仓库的账号</span></span><br><span class=\"line\"><span class=\"attr\">          password:</span>           <span class=\"comment\"># git仓库的密码</span></span><br><span class=\"line\"><span class=\"attr\">  rabbitmq:</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"number\">111.231</span><span class=\"string\">.xxxx.xx</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\"><span class=\"attr\">    username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span>   <span class=\"comment\">#注册中心eurka地址</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\">       <span class=\"comment\"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">bus-refresh</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主要内容</p>\n<ul>\n<li>添加配置中心文件存放于github</li>\n<li>配置rabbitmq连接信息</li>\n<li>暴露bus-refresh</li>\n</ul>\n</li>\n<li>github配置文件内容    <img src=\"https://img-blog.csdnimg.cn/20191117211411126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>仓库中的配置文件会被转换成 Web 接口，访问可以参照以下的规则：<ul>\n<li>/{application}/{profile}[/{label}]<ul>\n<li>/{application}-{profile}.yml</li>\n<li>/{label}/{application}-{profile}.yml</li>\n<li>/{application}-{profile}.properties</li>\n<li>/{label}/{application}-{profile}.properties</li>\n<li>上面的 URL 会映射 {application}-{profile}.yml 对应的配置文件，其中 {label} 对应 Git 上不同的分支，默认为 master。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>**启动类比较简单,声明是服务、配置中心服务端**\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigServer</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n到此配置中心服务端完毕。\n\n####  二、配置中心客户端实现\n- 依赖\n    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;config-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;config-client&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n- 配置文件\n    - 关于` bootstrap.yml`和`application.yml`\n        - bootstrap.yml（bootstrap.properties） 用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等    \n        - application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。\n        - bootstrap.yml 先于 application.yml 加载\n    - bootstrap.yml\n        <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8003</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">lxt-config</span></span><br><span class=\"line\"><span class=\"attr\">      profile:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">      label:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">      discovery:</span></span><br><span class=\"line\">        <span class=\"comment\">#开启Config服务发现支持</span></span><br><span class=\"line\"><span class=\"attr\">        enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">#指定server端的name,也就是server端spring.application.name的值</span></span><br><span class=\"line\"><span class=\"attr\">        service-id:</span> <span class=\"string\">spring-cloud-config-server</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>\n\n     - application.yml\n        <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-config-client</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    bus:</span></span><br><span class=\"line\"><span class=\"attr\">     trace:</span></span><br><span class=\"line\">       <span class=\"comment\"># 开启消息跟踪事件</span></span><br><span class=\"line\"><span class=\"attr\">       enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  rabbitmq:</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"number\">111.231</span><span class=\"number\">.29</span><span class=\"number\">.249</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\"><span class=\"attr\">    username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">refresh</span></span><br></pre></td></tr></table></figure>\n\n- 主要代码\n    -  核心\n        - @EnableDiscoveryClient\n        - @RefreshScope:使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n    - 启动类\n        <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ConfigClientApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ConfigClientApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n    - 测试\n        <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author lxt</span><br><span class=\"line\"> * @Copy Right Information: lxt</span><br><span class=\"line\"> * @Project: spring cloud</span><br><span class=\"line\"> * @CreateDate: 2018/12/16 20:04</span><br><span class=\"line\"> * @<span class=\"built_in\">history</span> Sr Date Modified By Why &amp; What is modified</span><br><span class=\"line\"> * 1.2018/12/16 lxt &amp; new</span><br><span class=\"line\"> */</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RefreshScope // 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"<span class=\"variable\">$&#123;lxt.hello&#125;</span>\"</span>)</span><br><span class=\"line\">    private String hello;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">from</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.hello;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n####  三、整合\n **以安装包或者docker方式安装RabbitMQ，启动**![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213514487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\n **配置GitHub Webhooks**\n- （可选，云服务器可跳过）内网穿透工具下载[natapp](#https://natapp.cn/)安装和配置（有免费通道），目的可给本机电脑映射一个外网域名，用于配置Webhooks\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111721323258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 配置Webhooks，配置中心服务端需引入`spring-cloud-config-monitor`依赖\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117214212673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n####  四、测试\n- 分别启动注册中心、配置中心服务端\n- 启动多个客户端\n    - 可通过打jar包形式启动\n    - 也可通过idea添加启动类，指定不同端口启动\n    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213813171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 修改配置文件，push到github上触发回调`http://t23b4j.natappfree.cc/monitor`,通知配置中心服务端更新配置，服务端以mq形式通过消息总线通知客户端更新配置。\n\n####  五、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n- 参考\n    - http://www.ityouknow.com/spring-cloud.html     \n</code></pre>","site":{"data":{}},"excerpt":"<ul>\n<li><h4 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h4><p>  基于Spring Cloud Config实现统一配置中心，将配置文件存放于Git(GitHub)上，通过Spring Cloud Bus消息总线&amp;RabbitMQ消息中间件进行服务间消息通信。</p>\n<p>  <strong>涉及项目</strong></p>\n<ul>\n<li><p>exureka-server</p>\n</li>\n<li><p>config-server</p>\n</li>\n<li><p>config-client</p>","more":"<p><strong>整体架构图大致如下，使用GitHub Webhooks 触发配置中心刷新配置</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117200225699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>上图来源：<code>http://blog.didispace.com/springcloud7/</code></p>\n<h4 id=\"二、配置中心服务端实现\"><a href=\"#二、配置中心服务端实现\" class=\"headerlink\" title=\"二、配置中心服务端实现\"></a>二、配置中心服务端实现</h4><p><strong>依赖</strong>         </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;config-server&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;config-server&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!--集成Git Webhooks之后，使用/monitor即可实现配置更新，通知其他服务--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-monitor&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-config-server</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      server:</span></span><br><span class=\"line\"><span class=\"attr\">        git:</span></span><br><span class=\"line\"><span class=\"attr\">          uri:</span> <span class=\"attr\">https://github.com/hdlxt/springcloud</span> <span class=\"comment\"># 配置git仓库的地址</span></span><br><span class=\"line\"><span class=\"attr\">          search-paths:</span> <span class=\"string\">config-repo</span>                     <span class=\"comment\"># git仓库地址下的相对地址，可以配置多个，用,分割。</span></span><br><span class=\"line\"><span class=\"attr\">          username:</span>                     <span class=\"comment\"># git仓库的账号</span></span><br><span class=\"line\"><span class=\"attr\">          password:</span>           <span class=\"comment\"># git仓库的密码</span></span><br><span class=\"line\"><span class=\"attr\">  rabbitmq:</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"number\">111.231</span><span class=\"string\">.xxxx.xx</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\"><span class=\"attr\">    username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span>   <span class=\"comment\">#注册中心eurka地址</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\">       <span class=\"comment\"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">bus-refresh</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主要内容</p>\n<ul>\n<li>添加配置中心文件存放于github</li>\n<li>配置rabbitmq连接信息</li>\n<li>暴露bus-refresh</li>\n</ul>\n</li>\n<li>github配置文件内容    <img src=\"https://img-blog.csdnimg.cn/20191117211411126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>仓库中的配置文件会被转换成 Web 接口，访问可以参照以下的规则：<ul>\n<li>/{application}/{profile}[/{label}]<ul>\n<li>/{application}-{profile}.yml</li>\n<li>/{label}/{application}-{profile}.yml</li>\n<li>/{application}-{profile}.properties</li>\n<li>/{label}/{application}-{profile}.properties</li>\n<li>上面的 URL 会映射 {application}-{profile}.yml 对应的配置文件，其中 {label} 对应 Git 上不同的分支，默认为 master。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>**启动类比较简单,声明是服务、配置中心服务端**\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigServer</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n到此配置中心服务端完毕。\n\n####  二、配置中心客户端实现\n- 依赖\n    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;config-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;config-client&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n- 配置文件\n    - 关于` bootstrap.yml`和`application.yml`\n        - bootstrap.yml（bootstrap.properties） 用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等    \n        - application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。\n        - bootstrap.yml 先于 application.yml 加载\n    - bootstrap.yml\n        <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8003</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">lxt-config</span></span><br><span class=\"line\"><span class=\"attr\">      profile:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">      label:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">      discovery:</span></span><br><span class=\"line\">        <span class=\"comment\">#开启Config服务发现支持</span></span><br><span class=\"line\"><span class=\"attr\">        enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">#指定server端的name,也就是server端spring.application.name的值</span></span><br><span class=\"line\"><span class=\"attr\">        service-id:</span> <span class=\"string\">spring-cloud-config-server</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>\n\n     - application.yml\n        <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-config-client</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    bus:</span></span><br><span class=\"line\"><span class=\"attr\">     trace:</span></span><br><span class=\"line\">       <span class=\"comment\"># 开启消息跟踪事件</span></span><br><span class=\"line\"><span class=\"attr\">       enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  rabbitmq:</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"number\">111.231</span><span class=\"number\">.29</span><span class=\"number\">.249</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\"><span class=\"attr\">    username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">refresh</span></span><br></pre></td></tr></table></figure>\n\n- 主要代码\n    -  核心\n        - @EnableDiscoveryClient\n        - @RefreshScope:使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n    - 启动类\n        <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ConfigClientApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ConfigClientApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n    - 测试\n        <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author lxt</span><br><span class=\"line\"> * @Copy Right Information: lxt</span><br><span class=\"line\"> * @Project: spring cloud</span><br><span class=\"line\"> * @CreateDate: 2018/12/16 20:04</span><br><span class=\"line\"> * @<span class=\"built_in\">history</span> Sr Date Modified By Why &amp; What is modified</span><br><span class=\"line\"> * 1.2018/12/16 lxt &amp; new</span><br><span class=\"line\"> */</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RefreshScope // 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"<span class=\"variable\">$&#123;lxt.hello&#125;</span>\"</span>)</span><br><span class=\"line\">    private String hello;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">from</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.hello;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n####  三、整合\n **以安装包或者docker方式安装RabbitMQ，启动**![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213514487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\n **配置GitHub Webhooks**\n- （可选，云服务器可跳过）内网穿透工具下载[natapp](#https://natapp.cn/)安装和配置（有免费通道），目的可给本机电脑映射一个外网域名，用于配置Webhooks\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111721323258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 配置Webhooks，配置中心服务端需引入`spring-cloud-config-monitor`依赖\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117214212673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n####  四、测试\n- 分别启动注册中心、配置中心服务端\n- 启动多个客户端\n    - 可通过打jar包形式启动\n    - 也可通过idea添加启动类，指定不同端口启动\n    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213813171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 修改配置文件，push到github上触发回调`http://t23b4j.natappfree.cc/monitor`,通知配置中心服务端更新配置，服务端以mq形式通过消息总线通知客户端更新配置。\n\n####  五、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n- 参考\n    - http://www.ityouknow.com/spring-cloud.html     \n</code></pre>"},{"title":"【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&Spring Cloud Greenwich.RELEASE）","date":"2019-10-01T12:30:12.000Z","copyright":"true。","_content":"\n今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。\n\n<!--more-->\n\n- 之前的源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 版本\n\t\t- jdk1.8\n\t\t- Spring Boot ：2.1.1.RELEASE\n\t\t- Spring Cloud ： Greenwich.RELEASE\n- 计划\n\t- 以博客笔记形式回顾一遍,以代码实现为主\n\t- 更换其中部分技术\n\n- 项目maven多模块，如下图所示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122210944629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 所有子模块都继承父模块`spring cloud`依赖，如下\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.lxt</groupId>\n    <artifactId>springcloud</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>eureka-server</module>\n        <module>service-provider</module>\n        <module>service-provider1</module>\n        <module>service-consumer</module>\n        <module>service-consumer-hystrix</module>\n        <module>hystrix-dashboard-turbine</module>\n        <module>service-consumer-node01</module>\n        <module>service-consumer-node02</module>\n        <module>config-server</module>\n        <module>config-server1</module>\n        <module>config-client</module>\n        <module>zuul</module>\n        <module>consul-provider</module>\n        <module>consul-consumer</module>\n        <module>zipkin-server</module>\n    </modules>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <java.version>1.8</java.version>\n<!--        <spring-cloud.version>Greenwich.RC1</spring-cloud.version>-->\n        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>\n        <zipkin-version>2.11.8</zipkin-version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-server</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-autoconfigure-ui</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n</project>\n```\n\n- 参考\n\t- 《Spring Cloud和Docker微服务架构实战》\n\t- \t http://www.ityouknow.com/spring-cloud.html","source":"_posts/2019-10-01-【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&Spring Cloud Greenwich.RELEASE） - 副本 (2).md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&Spring Cloud Greenwich.RELEASE）\ndate: 2019-10-01 20:30:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 分布式\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n\n---\n\n今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。\n\n<!--more-->\n\n- 之前的源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 版本\n\t\t- jdk1.8\n\t\t- Spring Boot ：2.1.1.RELEASE\n\t\t- Spring Cloud ： Greenwich.RELEASE\n- 计划\n\t- 以博客笔记形式回顾一遍,以代码实现为主\n\t- 更换其中部分技术\n\n- 项目maven多模块，如下图所示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122210944629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 所有子模块都继承父模块`spring cloud`依赖，如下\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.lxt</groupId>\n    <artifactId>springcloud</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>eureka-server</module>\n        <module>service-provider</module>\n        <module>service-provider1</module>\n        <module>service-consumer</module>\n        <module>service-consumer-hystrix</module>\n        <module>hystrix-dashboard-turbine</module>\n        <module>service-consumer-node01</module>\n        <module>service-consumer-node02</module>\n        <module>config-server</module>\n        <module>config-server1</module>\n        <module>config-client</module>\n        <module>zuul</module>\n        <module>consul-provider</module>\n        <module>consul-consumer</module>\n        <module>zipkin-server</module>\n    </modules>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <java.version>1.8</java.version>\n<!--        <spring-cloud.version>Greenwich.RC1</spring-cloud.version>-->\n        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>\n        <zipkin-version>2.11.8</zipkin-version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-server</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-autoconfigure-ui</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n</project>\n```\n\n- 参考\n\t- 《Spring Cloud和Docker微服务架构实战》\n\t- \t http://www.ityouknow.com/spring-cloud.html","slug":"2019-10-01-【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&Spring Cloud Greenwich.RELEASE） - 副本 (2)","published":1,"updated":"2019-11-24T14:55:46.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3d57vz40064s8vkvdky5q51","content":"<p>今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。</p>\n<a id=\"more\"></a>\n<ul>\n<li>之前的源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a><ul>\n<li>版本<ul>\n<li>jdk1.8</li>\n<li>Spring Boot ：2.1.1.RELEASE</li>\n<li>Spring Cloud ： Greenwich.RELEASE</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>计划</p>\n<ul>\n<li>以博客笔记形式回顾一遍,以代码实现为主</li>\n<li>更换其中部分技术</li>\n</ul>\n</li>\n<li><p>项目maven多模块，如下图所示<br><img src=\"https://img-blog.csdnimg.cn/20191122210944629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>所有子模块都继承父模块<code>spring cloud</code>依赖，如下</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;modules&gt;</span><br><span class=\"line\">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class=\"line\">    &lt;/modules&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class=\"line\">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class=\"line\">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;<span class=\"built_in\">test</span>&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;dependencyManagement&gt;</span><br><span class=\"line\">        &lt;dependencies&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">                &lt;<span class=\"built_in\">type</span>&gt;pom&lt;/<span class=\"built_in\">type</span>&gt;</span><br><span class=\"line\">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;/dependencyManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考<ul>\n<li>《Spring Cloud和Docker微服务架构实战》</li>\n<li><a href=\"http://www.ityouknow.com/spring-cloud.html\" target=\"_blank\" rel=\"noopener\">http://www.ityouknow.com/spring-cloud.html</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。</p>","more":"<ul>\n<li>之前的源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a><ul>\n<li>版本<ul>\n<li>jdk1.8</li>\n<li>Spring Boot ：2.1.1.RELEASE</li>\n<li>Spring Cloud ： Greenwich.RELEASE</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>计划</p>\n<ul>\n<li>以博客笔记形式回顾一遍,以代码实现为主</li>\n<li>更换其中部分技术</li>\n</ul>\n</li>\n<li><p>项目maven多模块，如下图所示<br><img src=\"https://img-blog.csdnimg.cn/20191122210944629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>所有子模块都继承父模块<code>spring cloud</code>依赖，如下</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;modules&gt;</span><br><span class=\"line\">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class=\"line\">    &lt;/modules&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class=\"line\">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class=\"line\">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;<span class=\"built_in\">test</span>&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;dependencyManagement&gt;</span><br><span class=\"line\">        &lt;dependencies&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">                &lt;<span class=\"built_in\">type</span>&gt;pom&lt;/<span class=\"built_in\">type</span>&gt;</span><br><span class=\"line\">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;/dependencyManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考<ul>\n<li>《Spring Cloud和Docker微服务架构实战》</li>\n<li><a href=\"http://www.ityouknow.com/spring-cloud.html\" target=\"_blank\" rel=\"noopener\">http://www.ityouknow.com/spring-cloud.html</a></li>\n</ul>\n</li>\n</ul>"},{"title":"【Spring Cloud 笔记和总结】七、使用Zuul构建微服务网关.md","date":"2019-11-10T12:30:12.000Z","copyright":"true。","_content":"\n\n\n- ####  一、简单微服务网关搭建\n\t**maven依赖**\n\t\n\t```bash\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t    <modelVersion>4.0.0</modelVersion>\n\t    <parent>\n\t        <groupId>com.lxt</groupId>\n\t        <artifactId>springcloud</artifactId>\n\t        <version>1.0-SNAPSHOT</version>\n\t    </parent>\n\t    <groupId>com.lxt.gateaway</groupId>\n\t    <artifactId>zuul</artifactId>\n\t    <version>0.0.1-SNAPSHOT</version>\n\t    <name>zuul</name>\n\t    <description>Demo project for Spring Boot</description>\n\t    <dependencies>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\n\t        </dependency>\n\t    </dependencies>\n\t\n\t</project>\n\t\n\t```\n\t<!--more-->\n\t\n\t**配置文件**\n\t\n\t```yml\n\tspring:\n\t  application:\n\t    name: gateway-zuul\n\tserver:\n\t  port: 8006\n\teureka:\n\t  client:\n\t    serviceUrl:\n\t      defaultZone: http://localhost:8000/eureka/   #注册中心eurka地址\n\t```\n\t**启动类添加@EnableZuulProxy**\n\t\n\t```bash\n\tpackage com.lxt.gateaway.zuul;\n\t\n\timport org.springframework.boot.SpringApplication;\n\timport org.springframework.boot.autoconfigure.SpringBootApplication;\n\timport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\n\timport org.springframework.context.annotation.Bean;\n\t\n\t@SpringBootApplication\n\t@EnableZuulProxy\n\tpublic class ZuulApplication {\n\t\n\t    public static void main(String[] args) {\n\t        SpringApplication.run(ZuulApplication.class, args);\n\t    }\n\t}\n\t\n\t\n\t```\n\t**Spring Cloud Zuul默认配置说明**\n\t - 默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**会被转发到serviceId对应的微服务\n\t - eg:http://localhost:8006/spring-cloud-consumer/hello/lxt =>http://spring-cloud-consumer/hello/lxt=>http://localhost:9001/hello/lxt\n\t - 也可手动配置指定\n\t \t- 自定义微服务访问路径\n\t\t\t```bash\n\t\t\tzuul:\n\t\t\t  routes:\n\t\t\t    spring-cloud-consumer-hystrix: /test/**\n\t\t```\n\t\t- 忽略指定微服务\n\t\t\t```bash\n\t\t\tzuul:\n\t\t\t  ignored-services: spring-cloud-consumer-hystrix,spring-cloud-consumer\n\t\t\t```\n\t\t- 同时指定微服务ServiceId和对应路径\n\t\t\t```bash\n\t\t\tzuul:\n\t\t\t  routes:\n\t\t\t    config-client:\n\t\t\t      path: /lxt/**\n\t\t\t      serviceId:  spring-cloud-consumer-hystrix\n\t\t\t```\n\t\t-  等等...\n\t\n\t \n\t\n\t**启动测试**\n\t- 分别启动exureka-server、service-consumer、service-provider和zuul\n\t- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt`\n\t- 返回`hello lxt，this is first messge`，测试成功\n\t\n\t\n\t\n\t####  二、Zuul路由端点\n\t- 由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问，需手动添加配置暴露`routes`路由端点\n\t\n\t```yml\n\tmanagement:\n\t  endpoints:\n\t    web:\n\t      exposure:\n\t        # 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问\n\t        include: routes\n\t```\n\t- 浏览器`http://localhost:8006/actuator/routes`，返回如下\n\t\n\t```bash\n\t// 20191121213009\n\t// http://localhost:8006/actuator/routes\n\t\n\t{\n\t  \"/spring-cloud-consumer/**\": \"spring-cloud-consumer\",\n\t  \"/spring-cloud-provider/**\": \"spring-cloud-provider\"\n\t}\n\t```\n\t####  三、Zuul中的Filter使用\n\t**Zuul中默认实现的Filter**\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191121220713248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- PRE： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。\n\t- ROUTING：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。\n\t- POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。\n\t- ERROR：在其他阶段发生错误时执行该过滤器。 除了默认的过滤器类型，Zuul还允许我们创建自定义的过滤器类型。例如，我们可以定制一种STATIC类型的过滤器，直接在Zuul中生成响应，而不将请求转发到后端的微服务。\n\t\n\t**自定义Filter示例**\n\t\n\t必须包含`token`的参数才可访问，否则直接返回，如下：\n\t```java\n\tpackage com.lxt.gateaway.zuul;\n\t\n\timport com.netflix.zuul.ZuulFilter;\n\timport com.netflix.zuul.context.RequestContext;\n\timport com.netflix.zuul.exception.ZuulException;\n\timport org.apache.commons.lang.StringUtils;\n\timport org.slf4j.Logger;\n\timport org.slf4j.LoggerFactory;\n\t\n\timport javax.servlet.http.HttpServletRequest;\n\t\n\tpublic class TokenFilter extends ZuulFilter {\n\t\n\t    private final Logger logger = LoggerFactory.getLogger(TokenFilter.class);\n\t\n\t    @Override\n\t    public String filterType() {\n\t        return \"pre\";\n\t    }\n\t\n\t    @Override\n\t    public int filterOrder() {\n\t        return 0;\n\t    }\n\t\n\t    @Override\n\t    public boolean shouldFilter() {\n\t        return true;\n\t    }\n\t\n\t    @Override\n\t    public Object run() throws ZuulException {\n\t        RequestContext ctx = RequestContext.getCurrentContext();\n\t        HttpServletRequest request = ctx.getRequest();\n\t\n\t        logger.info(\"--->>> TokenFilter {},{}\", request.getMethod(), request.getRequestURL().toString());\n\t\n\t        String token = request.getParameter(\"token\");// 获取请求的参数\n\t\n\t        if (StringUtils.isNotBlank(token)) {\n\t            ctx.setSendZuulResponse(true); //对请求进行路由\n\t            ctx.setResponseStatusCode(200);\n\t            ctx.set(\"isSuccess\", true);\n\t            return null;\n\t        } else {\n\t            ctx.setSendZuulResponse(false); //不对其进行路由\n\t            ctx.setResponseStatusCode(400);\n\t            ctx.setResponseBody(\"token is empty\");\n\t            ctx.set(\"isSuccess\", false);\n\t            return null;\n\t        }\n\t    }\n\t}\n\t\n\t```\n\t**注册Bean**\n\t\n\t```java\n\t\n\t    @Bean\n\t    public TokenFilter tokenFilter() {\n\t        return new TokenFilter();\n\t    }\n\t```\n\t**运行测试**\n\t- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt`,返回`token is empty`\n\t- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt?token=2`,返回`hello lxt，this is first messge`\n\t####  四、Zuul中的路由熔断和重试\n\t##### 路由熔断\n\t**实现FallbackProvider接口，重写fallbackResponse方法**\n\t\n\t```java\n\tpackage com.lxt.gateaway.zuul;\n\t\n\timport org.slf4j.Logger;\n\timport org.slf4j.LoggerFactory;\n\timport org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;\n\timport org.springframework.http.HttpHeaders;\n\timport org.springframework.http.HttpStatus;\n\timport org.springframework.http.MediaType;\n\timport org.springframework.http.client.ClientHttpResponse;\n\t\n\timport java.io.ByteArrayInputStream;\n\timport java.io.IOException;\n\timport java.io.InputStream;\n\t\n\tpublic class ProducerFallback implements FallbackProvider{\n\t    private final Logger logger = LoggerFactory.getLogger(FallbackProvider.class);\n\t\n\t    //指定要处理的 service。\n\t    @Override\n\t    public String getRoute() {\n\t        return \"spring-cloud-provider\";\n\t    }\n\t\n\t    @Override\n\t    public ClientHttpResponse fallbackResponse(String route, Throwable cause) {\n\t        if (cause != null && cause.getCause() != null) {\n\t            String reason = cause.getCause().getMessage();\n\t            logger.info(\"Excption {}\",reason);\n\t        }\n\t        return fallbackResponse();\n\t    }\n\t\n\t    public ClientHttpResponse fallbackResponse() {\n\t        return new ClientHttpResponse() {\n\t            @Override\n\t            public HttpStatus getStatusCode() throws IOException {\n\t                return HttpStatus.OK;\n\t            }\n\t\n\t            @Override\n\t            public int getRawStatusCode() throws IOException {\n\t                return 200;\n\t            }\n\t\n\t            @Override\n\t            public String getStatusText() throws IOException {\n\t                return \"OK\";\n\t            }\n\t\n\t            @Override\n\t            public void close() {\n\t\n\t            }\n\t\n\t            @Override\n\t            public InputStream getBody() throws IOException {\n\t                return new ByteArrayInputStream(\"The service is unavailable.\".getBytes());\n\t            }\n\t\n\t            @Override\n\t            public HttpHeaders getHeaders() {\n\t                HttpHeaders headers = new HttpHeaders();\n\t                headers.setContentType(MediaType.APPLICATION_JSON);\n\t                return headers;\n\t            }\n\t        };\n\t    }\n\t}\n\t\n\t```\n\t**注册bean**\n\t\n\t```bash\n\t    @Bean\n\t    public ProducerFallback producerFallback() {\n\t        return new ProducerFallback();\n\t    }\n\t```\n\t**运行测试**\n\t- 再重启网关`zuul`,启动务提供者`service-provider1`\n\t- 浏览多次器输入`http://localhost:8006/spring-cloud-provider/foo?foo=lxt&token=2`\n\t- 交替返回`hello lxt，this is first messge`和`hello lxt，this is two messge`\n\t- 关闭第二个服务提供者，继续刷新浏览器\n\t- 交替返回`hello lxt，this is first messge`和`The service is unavailable.`\n\t##### 路由重试\n\t**添加依赖**\n\t\n\t```bash\n\t<dependency>\n\t\t<groupId>org.springframework.retry</groupId>\n\t\t<artifactId>spring-retry</artifactId>\n\t</dependency>\n\t```\n\t\n\t**修改配置文件**\n\t\n\t```bash\n\tzuul:\n\t  retryable: true #是否开启重试功能\n\tribbon:\n\t  MaxAutoRetries: 2 #对当前服务的重试次数\n\t  MaxAutoRetriesNextServer: 0 #切换相同Server的次数\n\t```\n\t**修改service-provider1的hello方法如下**\n\t\n\t```bash\n\t    @RequestMapping(value =\"/hello\", method = RequestMethod.GET)\n\t    public String index(String name) {\n\t        logger.info(\"request two name is \"+name);\n\t        try{\n\t            Thread.sleep(1000000);\n\t        }catch ( Exception e){\n\t            logger.error(\" hello two error\",e);\n\t        }\n\t        return \"hello \"+name+\"，this is two messge\";\n\t    }\n\t```\n\t**运行测试**\n\t- 重启网关`zuul`和`service-provider1`\n\t- 浏览器输入`http://localhost:8006/spring-cloud-provider/foo?foo=lxt&token=2`\n\t- 返回`The service is unavailable.`时，查看控制如下：\n\t\n\t```bash\n\t2019-11-21 22:38:31.049  INFO 11240 --- [nio-9002-exec-3] c.l.s.controller.HelloController         : request two name is lxt\n\t2019-11-21 22:38:32.054  INFO 11240 --- [nio-9002-exec-4] c.l.s.controller.HelloController         : request two name is lxt\n\t2019-11-21 22:38:33.060  INFO 11240 --- [nio-9002-exec-5] c.l.s.controller.HelloController         : request two name is lxt\n\t```\n\t\n\t- 打印了三次，重试了两次。\n\t\n\t\n\t####  五、相关\n\t- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n\t- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 参考\n\t\t- http://www.ityouknow.com/spring-cloud.html\t \n","source":"_posts/2019-11-10-【Spring Cloud 笔记和总结】七、使用Zuul构建微服务网关.md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】七、使用Zuul构建微服务网关.md\ndate: 2019-11-10 20:30:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 分布式\n- Zuul\n- 网关\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n\n---\n\n\n\n- ####  一、简单微服务网关搭建\n\t**maven依赖**\n\t\n\t```bash\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t    <modelVersion>4.0.0</modelVersion>\n\t    <parent>\n\t        <groupId>com.lxt</groupId>\n\t        <artifactId>springcloud</artifactId>\n\t        <version>1.0-SNAPSHOT</version>\n\t    </parent>\n\t    <groupId>com.lxt.gateaway</groupId>\n\t    <artifactId>zuul</artifactId>\n\t    <version>0.0.1-SNAPSHOT</version>\n\t    <name>zuul</name>\n\t    <description>Demo project for Spring Boot</description>\n\t    <dependencies>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\n\t        </dependency>\n\t    </dependencies>\n\t\n\t</project>\n\t\n\t```\n\t<!--more-->\n\t\n\t**配置文件**\n\t\n\t```yml\n\tspring:\n\t  application:\n\t    name: gateway-zuul\n\tserver:\n\t  port: 8006\n\teureka:\n\t  client:\n\t    serviceUrl:\n\t      defaultZone: http://localhost:8000/eureka/   #注册中心eurka地址\n\t```\n\t**启动类添加@EnableZuulProxy**\n\t\n\t```bash\n\tpackage com.lxt.gateaway.zuul;\n\t\n\timport org.springframework.boot.SpringApplication;\n\timport org.springframework.boot.autoconfigure.SpringBootApplication;\n\timport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\n\timport org.springframework.context.annotation.Bean;\n\t\n\t@SpringBootApplication\n\t@EnableZuulProxy\n\tpublic class ZuulApplication {\n\t\n\t    public static void main(String[] args) {\n\t        SpringApplication.run(ZuulApplication.class, args);\n\t    }\n\t}\n\t\n\t\n\t```\n\t**Spring Cloud Zuul默认配置说明**\n\t - 默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**会被转发到serviceId对应的微服务\n\t - eg:http://localhost:8006/spring-cloud-consumer/hello/lxt =>http://spring-cloud-consumer/hello/lxt=>http://localhost:9001/hello/lxt\n\t - 也可手动配置指定\n\t \t- 自定义微服务访问路径\n\t\t\t```bash\n\t\t\tzuul:\n\t\t\t  routes:\n\t\t\t    spring-cloud-consumer-hystrix: /test/**\n\t\t```\n\t\t- 忽略指定微服务\n\t\t\t```bash\n\t\t\tzuul:\n\t\t\t  ignored-services: spring-cloud-consumer-hystrix,spring-cloud-consumer\n\t\t\t```\n\t\t- 同时指定微服务ServiceId和对应路径\n\t\t\t```bash\n\t\t\tzuul:\n\t\t\t  routes:\n\t\t\t    config-client:\n\t\t\t      path: /lxt/**\n\t\t\t      serviceId:  spring-cloud-consumer-hystrix\n\t\t\t```\n\t\t-  等等...\n\t\n\t \n\t\n\t**启动测试**\n\t- 分别启动exureka-server、service-consumer、service-provider和zuul\n\t- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt`\n\t- 返回`hello lxt，this is first messge`，测试成功\n\t\n\t\n\t\n\t####  二、Zuul路由端点\n\t- 由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问，需手动添加配置暴露`routes`路由端点\n\t\n\t```yml\n\tmanagement:\n\t  endpoints:\n\t    web:\n\t      exposure:\n\t        # 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问\n\t        include: routes\n\t```\n\t- 浏览器`http://localhost:8006/actuator/routes`，返回如下\n\t\n\t```bash\n\t// 20191121213009\n\t// http://localhost:8006/actuator/routes\n\t\n\t{\n\t  \"/spring-cloud-consumer/**\": \"spring-cloud-consumer\",\n\t  \"/spring-cloud-provider/**\": \"spring-cloud-provider\"\n\t}\n\t```\n\t####  三、Zuul中的Filter使用\n\t**Zuul中默认实现的Filter**\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191121220713248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- PRE： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。\n\t- ROUTING：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。\n\t- POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。\n\t- ERROR：在其他阶段发生错误时执行该过滤器。 除了默认的过滤器类型，Zuul还允许我们创建自定义的过滤器类型。例如，我们可以定制一种STATIC类型的过滤器，直接在Zuul中生成响应，而不将请求转发到后端的微服务。\n\t\n\t**自定义Filter示例**\n\t\n\t必须包含`token`的参数才可访问，否则直接返回，如下：\n\t```java\n\tpackage com.lxt.gateaway.zuul;\n\t\n\timport com.netflix.zuul.ZuulFilter;\n\timport com.netflix.zuul.context.RequestContext;\n\timport com.netflix.zuul.exception.ZuulException;\n\timport org.apache.commons.lang.StringUtils;\n\timport org.slf4j.Logger;\n\timport org.slf4j.LoggerFactory;\n\t\n\timport javax.servlet.http.HttpServletRequest;\n\t\n\tpublic class TokenFilter extends ZuulFilter {\n\t\n\t    private final Logger logger = LoggerFactory.getLogger(TokenFilter.class);\n\t\n\t    @Override\n\t    public String filterType() {\n\t        return \"pre\";\n\t    }\n\t\n\t    @Override\n\t    public int filterOrder() {\n\t        return 0;\n\t    }\n\t\n\t    @Override\n\t    public boolean shouldFilter() {\n\t        return true;\n\t    }\n\t\n\t    @Override\n\t    public Object run() throws ZuulException {\n\t        RequestContext ctx = RequestContext.getCurrentContext();\n\t        HttpServletRequest request = ctx.getRequest();\n\t\n\t        logger.info(\"--->>> TokenFilter {},{}\", request.getMethod(), request.getRequestURL().toString());\n\t\n\t        String token = request.getParameter(\"token\");// 获取请求的参数\n\t\n\t        if (StringUtils.isNotBlank(token)) {\n\t            ctx.setSendZuulResponse(true); //对请求进行路由\n\t            ctx.setResponseStatusCode(200);\n\t            ctx.set(\"isSuccess\", true);\n\t            return null;\n\t        } else {\n\t            ctx.setSendZuulResponse(false); //不对其进行路由\n\t            ctx.setResponseStatusCode(400);\n\t            ctx.setResponseBody(\"token is empty\");\n\t            ctx.set(\"isSuccess\", false);\n\t            return null;\n\t        }\n\t    }\n\t}\n\t\n\t```\n\t**注册Bean**\n\t\n\t```java\n\t\n\t    @Bean\n\t    public TokenFilter tokenFilter() {\n\t        return new TokenFilter();\n\t    }\n\t```\n\t**运行测试**\n\t- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt`,返回`token is empty`\n\t- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt?token=2`,返回`hello lxt，this is first messge`\n\t####  四、Zuul中的路由熔断和重试\n\t##### 路由熔断\n\t**实现FallbackProvider接口，重写fallbackResponse方法**\n\t\n\t```java\n\tpackage com.lxt.gateaway.zuul;\n\t\n\timport org.slf4j.Logger;\n\timport org.slf4j.LoggerFactory;\n\timport org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;\n\timport org.springframework.http.HttpHeaders;\n\timport org.springframework.http.HttpStatus;\n\timport org.springframework.http.MediaType;\n\timport org.springframework.http.client.ClientHttpResponse;\n\t\n\timport java.io.ByteArrayInputStream;\n\timport java.io.IOException;\n\timport java.io.InputStream;\n\t\n\tpublic class ProducerFallback implements FallbackProvider{\n\t    private final Logger logger = LoggerFactory.getLogger(FallbackProvider.class);\n\t\n\t    //指定要处理的 service。\n\t    @Override\n\t    public String getRoute() {\n\t        return \"spring-cloud-provider\";\n\t    }\n\t\n\t    @Override\n\t    public ClientHttpResponse fallbackResponse(String route, Throwable cause) {\n\t        if (cause != null && cause.getCause() != null) {\n\t            String reason = cause.getCause().getMessage();\n\t            logger.info(\"Excption {}\",reason);\n\t        }\n\t        return fallbackResponse();\n\t    }\n\t\n\t    public ClientHttpResponse fallbackResponse() {\n\t        return new ClientHttpResponse() {\n\t            @Override\n\t            public HttpStatus getStatusCode() throws IOException {\n\t                return HttpStatus.OK;\n\t            }\n\t\n\t            @Override\n\t            public int getRawStatusCode() throws IOException {\n\t                return 200;\n\t            }\n\t\n\t            @Override\n\t            public String getStatusText() throws IOException {\n\t                return \"OK\";\n\t            }\n\t\n\t            @Override\n\t            public void close() {\n\t\n\t            }\n\t\n\t            @Override\n\t            public InputStream getBody() throws IOException {\n\t                return new ByteArrayInputStream(\"The service is unavailable.\".getBytes());\n\t            }\n\t\n\t            @Override\n\t            public HttpHeaders getHeaders() {\n\t                HttpHeaders headers = new HttpHeaders();\n\t                headers.setContentType(MediaType.APPLICATION_JSON);\n\t                return headers;\n\t            }\n\t        };\n\t    }\n\t}\n\t\n\t```\n\t**注册bean**\n\t\n\t```bash\n\t    @Bean\n\t    public ProducerFallback producerFallback() {\n\t        return new ProducerFallback();\n\t    }\n\t```\n\t**运行测试**\n\t- 再重启网关`zuul`,启动务提供者`service-provider1`\n\t- 浏览多次器输入`http://localhost:8006/spring-cloud-provider/foo?foo=lxt&token=2`\n\t- 交替返回`hello lxt，this is first messge`和`hello lxt，this is two messge`\n\t- 关闭第二个服务提供者，继续刷新浏览器\n\t- 交替返回`hello lxt，this is first messge`和`The service is unavailable.`\n\t##### 路由重试\n\t**添加依赖**\n\t\n\t```bash\n\t<dependency>\n\t\t<groupId>org.springframework.retry</groupId>\n\t\t<artifactId>spring-retry</artifactId>\n\t</dependency>\n\t```\n\t\n\t**修改配置文件**\n\t\n\t```bash\n\tzuul:\n\t  retryable: true #是否开启重试功能\n\tribbon:\n\t  MaxAutoRetries: 2 #对当前服务的重试次数\n\t  MaxAutoRetriesNextServer: 0 #切换相同Server的次数\n\t```\n\t**修改service-provider1的hello方法如下**\n\t\n\t```bash\n\t    @RequestMapping(value =\"/hello\", method = RequestMethod.GET)\n\t    public String index(String name) {\n\t        logger.info(\"request two name is \"+name);\n\t        try{\n\t            Thread.sleep(1000000);\n\t        }catch ( Exception e){\n\t            logger.error(\" hello two error\",e);\n\t        }\n\t        return \"hello \"+name+\"，this is two messge\";\n\t    }\n\t```\n\t**运行测试**\n\t- 重启网关`zuul`和`service-provider1`\n\t- 浏览器输入`http://localhost:8006/spring-cloud-provider/foo?foo=lxt&token=2`\n\t- 返回`The service is unavailable.`时，查看控制如下：\n\t\n\t```bash\n\t2019-11-21 22:38:31.049  INFO 11240 --- [nio-9002-exec-3] c.l.s.controller.HelloController         : request two name is lxt\n\t2019-11-21 22:38:32.054  INFO 11240 --- [nio-9002-exec-4] c.l.s.controller.HelloController         : request two name is lxt\n\t2019-11-21 22:38:33.060  INFO 11240 --- [nio-9002-exec-5] c.l.s.controller.HelloController         : request two name is lxt\n\t```\n\t\n\t- 打印了三次，重试了两次。\n\t\n\t\n\t####  五、相关\n\t- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n\t- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 参考\n\t\t- http://www.ityouknow.com/spring-cloud.html\t \n","slug":"2019-11-10-【Spring Cloud 笔记和总结】七、使用Zuul构建微服务网关","published":1,"updated":"2019-11-24T15:16:01.258Z","_id":"ck3d58tf0006ps8vkggtjg0b4","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"一、简单微服务网关搭建\"><a href=\"#一、简单微服务网关搭建\" class=\"headerlink\" title=\"一、简单微服务网关搭建\"></a>一、简单微服务网关搭建</h4><p>  <strong>maven依赖</strong></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt.gateaway&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;zuul&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;zuul&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n  <a id=\"more\"></a>\n<p>  <strong>配置文件</strong></p>\n  <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">gateway-zuul</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8006</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span>   <span class=\"comment\">#注册中心eurka地址</span></span><br></pre></td></tr></table></figure>\n<p>  <strong>启动类添加@EnableZuulProxy</strong></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lxt.gateaway.zuul;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableZuulProxy</span><br><span class=\"line\">public class ZuulApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <strong>Spring Cloud Zuul默认配置说明</strong></p>\n<ul>\n<li>默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：<a href=\"http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**会被转发到serviceId对应的微服务\" target=\"_blank\" rel=\"noopener\">http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**会被转发到serviceId对应的微服务</a></li>\n<li>eg:<a href=\"http://localhost:8006/spring-cloud-consumer/hello/lxt\" target=\"_blank\" rel=\"noopener\">http://localhost:8006/spring-cloud-consumer/hello/lxt</a> =&gt;<a href=\"http://spring-cloud-consumer/hello/lxt=&gt;http://localhost:9001/hello/lxt\" target=\"_blank\" rel=\"noopener\">http://spring-cloud-consumer/hello/lxt=&gt;http://localhost:9001/hello/lxt</a></li>\n<li><p>也可手动配置指定</p>\n<ul>\n<li><p>自定义微服务访问路径</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zuul:</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">    spring-cloud-consumer-hystrix: /<span class=\"built_in\">test</span>/**</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>忽略指定微服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zuul:</span><br><span class=\"line\">  ignored-services: spring-cloud-consumer-hystrix,spring-cloud-consumer</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同时指定微服务ServiceId和对应路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zuul:</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">    config-client:</span><br><span class=\"line\">      path: /lxt/**</span><br><span class=\"line\">      serviceId:  spring-cloud-consumer-hystrix</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>等等…</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>**启动测试**\n- 分别启动exureka-server、service-consumer、service-provider和zuul\n- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt`\n- 返回`hello lxt，this is first messge`，测试成功\n\n\n\n####  二、Zuul路由端点\n- 由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问，需手动添加配置暴露`routes`路由端点\n\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">routes</span></span><br></pre></td></tr></table></figure>\n\n- 浏览器`http://localhost:8006/actuator/routes`，返回如下\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 20191121213009</span><br><span class=\"line\">// http://localhost:8006/actuator/routes</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"/spring-cloud-consumer/**\"</span>: <span class=\"string\">\"spring-cloud-consumer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"/spring-cloud-provider/**\"</span>: <span class=\"string\">\"spring-cloud-provider\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n####  三、Zuul中的Filter使用\n**Zuul中默认实现的Filter**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191121220713248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- PRE： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。\n- ROUTING：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。\n- POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。\n- ERROR：在其他阶段发生错误时执行该过滤器。 除了默认的过滤器类型，Zuul还允许我们创建自定义的过滤器类型。例如，我们可以定制一种STATIC类型的过滤器，直接在Zuul中生成响应，而不将请求转发到后端的微服务。\n\n**自定义Filter示例**\n\n必须包含`token`的参数才可访问，否则直接返回，如下：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxt.gateaway.zuul;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZuulFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(TokenFilter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"pre\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ZuulException </span>&#123;</span><br><span class=\"line\">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class=\"line\">        HttpServletRequest request = ctx.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"---&gt;&gt;&gt; TokenFilter &#123;&#125;,&#123;&#125;\"</span>, request.getMethod(), request.getRequestURL().toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        String token = request.getParameter(<span class=\"string\">\"token\"</span>);<span class=\"comment\">// 获取请求的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(token)) &#123;</span><br><span class=\"line\">            ctx.setSendZuulResponse(<span class=\"keyword\">true</span>); <span class=\"comment\">//对请求进行路由</span></span><br><span class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">200</span>);</span><br><span class=\"line\">            ctx.set(<span class=\"string\">\"isSuccess\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ctx.setSendZuulResponse(<span class=\"keyword\">false</span>); <span class=\"comment\">//不对其进行路由</span></span><br><span class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">400</span>);</span><br><span class=\"line\">            ctx.setResponseBody(<span class=\"string\">\"token is empty\"</span>);</span><br><span class=\"line\">            ctx.set(<span class=\"string\">\"isSuccess\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**注册Bean**\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TokenFilter <span class=\"title\">tokenFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TokenFilter();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**运行测试**\n- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt`,返回`token is empty`\n- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt?token=2`,返回`hello lxt，this is first messge`\n####  四、Zuul中的路由熔断和重试\n##### 路由熔断\n**实现FallbackProvider接口，重写fallbackResponse方法**\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxt.gateaway.zuul;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpHeaders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerFallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">FallbackProvider</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(FallbackProvider.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//指定要处理的 service。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRoute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"spring-cloud-provider\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title\">fallbackResponse</span><span class=\"params\">(String route, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cause != <span class=\"keyword\">null</span> &amp;&amp; cause.getCause() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String reason = cause.getCause().getMessage();</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"Excption &#123;&#125;\"</span>,reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fallbackResponse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title\">fallbackResponse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClientHttpResponse() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> HttpStatus <span class=\"title\">getStatusCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> HttpStatus.OK;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRawStatusCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">200</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStatusText</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"OK\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getBody</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ByteArrayInputStream(<span class=\"string\">\"The service is unavailable.\"</span>.getBytes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> HttpHeaders <span class=\"title\">getHeaders</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">                headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> headers;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**注册bean**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public ProducerFallback <span class=\"function\"><span class=\"title\">producerFallback</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new ProducerFallback();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**运行测试**\n- 再重启网关`zuul`,启动务提供者`service-provider1`\n- 浏览多次器输入`http://localhost:8006/spring-cloud-provider/foo?foo=lxt&amp;token=2`\n- 交替返回`hello lxt，this is first messge`和`hello lxt，this is two messge`\n- 关闭第二个服务提供者，继续刷新浏览器\n- 交替返回`hello lxt，this is first messge`和`The service is unavailable.`\n##### 路由重试\n**添加依赖**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-retry&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n**修改配置文件**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zuul:</span><br><span class=\"line\">  retryable: <span class=\"literal\">true</span> <span class=\"comment\">#是否开启重试功能</span></span><br><span class=\"line\">ribbon:</span><br><span class=\"line\">  MaxAutoRetries: 2 <span class=\"comment\">#对当前服务的重试次数</span></span><br><span class=\"line\">  MaxAutoRetriesNextServer: 0 <span class=\"comment\">#切换相同Server的次数</span></span><br></pre></td></tr></table></figure>\n\n**修改service-provider1的hello方法如下**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value =<span class=\"string\">\"/hello\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">public String index(String name) &#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">\"request two name is \"</span>+name);</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        Thread.sleep(1000000);</span><br><span class=\"line\">    &#125;catch ( Exception e)&#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\" hello two error\"</span>,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"string\">\"hello \"</span>+name+<span class=\"string\">\"，this is two messge\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**运行测试**\n- 重启网关`zuul`和`service-provider1`\n- 浏览器输入`http://localhost:8006/spring-cloud-provider/foo?foo=lxt&amp;token=2`\n- 返回`The service is unavailable.`时，查看控制如下：\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-11-21 22:38:31.049  INFO 11240 --- [nio-9002-exec-3] c.l.s.controller.HelloController         : request two name is lxt</span><br><span class=\"line\">2019-11-21 22:38:32.054  INFO 11240 --- [nio-9002-exec-4] c.l.s.controller.HelloController         : request two name is lxt</span><br><span class=\"line\">2019-11-21 22:38:33.060  INFO 11240 --- [nio-9002-exec-5] c.l.s.controller.HelloController         : request two name is lxt</span><br></pre></td></tr></table></figure>\n\n\n- 打印了三次，重试了两次。\n\n\n####  五、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n- 参考\n    - http://www.ityouknow.com/spring-cloud.html     \n</code></pre>","site":{"data":{}},"excerpt":"<ul>\n<li><h4 id=\"一、简单微服务网关搭建\"><a href=\"#一、简单微服务网关搭建\" class=\"headerlink\" title=\"一、简单微服务网关搭建\"></a>一、简单微服务网关搭建</h4><p>  <strong>maven依赖</strong></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt.gateaway&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;zuul&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;zuul&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>","more":"<p>  <strong>配置文件</strong></p>\n  <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">gateway-zuul</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8006</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span>   <span class=\"comment\">#注册中心eurka地址</span></span><br></pre></td></tr></table></figure>\n<p>  <strong>启动类添加@EnableZuulProxy</strong></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lxt.gateaway.zuul;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableZuulProxy</span><br><span class=\"line\">public class ZuulApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <strong>Spring Cloud Zuul默认配置说明</strong></p>\n<ul>\n<li>默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：<a href=\"http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**会被转发到serviceId对应的微服务\" target=\"_blank\" rel=\"noopener\">http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**会被转发到serviceId对应的微服务</a></li>\n<li>eg:<a href=\"http://localhost:8006/spring-cloud-consumer/hello/lxt\" target=\"_blank\" rel=\"noopener\">http://localhost:8006/spring-cloud-consumer/hello/lxt</a> =&gt;<a href=\"http://spring-cloud-consumer/hello/lxt=&gt;http://localhost:9001/hello/lxt\" target=\"_blank\" rel=\"noopener\">http://spring-cloud-consumer/hello/lxt=&gt;http://localhost:9001/hello/lxt</a></li>\n<li><p>也可手动配置指定</p>\n<ul>\n<li><p>自定义微服务访问路径</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zuul:</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">    spring-cloud-consumer-hystrix: /<span class=\"built_in\">test</span>/**</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>忽略指定微服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zuul:</span><br><span class=\"line\">  ignored-services: spring-cloud-consumer-hystrix,spring-cloud-consumer</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同时指定微服务ServiceId和对应路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zuul:</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">    config-client:</span><br><span class=\"line\">      path: /lxt/**</span><br><span class=\"line\">      serviceId:  spring-cloud-consumer-hystrix</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>等等…</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>**启动测试**\n- 分别启动exureka-server、service-consumer、service-provider和zuul\n- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt`\n- 返回`hello lxt，this is first messge`，测试成功\n\n\n\n####  二、Zuul路由端点\n- 由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问，需手动添加配置暴露`routes`路由端点\n\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">routes</span></span><br></pre></td></tr></table></figure>\n\n- 浏览器`http://localhost:8006/actuator/routes`，返回如下\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 20191121213009</span><br><span class=\"line\">// http://localhost:8006/actuator/routes</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"/spring-cloud-consumer/**\"</span>: <span class=\"string\">\"spring-cloud-consumer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"/spring-cloud-provider/**\"</span>: <span class=\"string\">\"spring-cloud-provider\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n####  三、Zuul中的Filter使用\n**Zuul中默认实现的Filter**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191121220713248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- PRE： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。\n- ROUTING：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。\n- POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。\n- ERROR：在其他阶段发生错误时执行该过滤器。 除了默认的过滤器类型，Zuul还允许我们创建自定义的过滤器类型。例如，我们可以定制一种STATIC类型的过滤器，直接在Zuul中生成响应，而不将请求转发到后端的微服务。\n\n**自定义Filter示例**\n\n必须包含`token`的参数才可访问，否则直接返回，如下：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxt.gateaway.zuul;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZuulFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(TokenFilter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"pre\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ZuulException </span>&#123;</span><br><span class=\"line\">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class=\"line\">        HttpServletRequest request = ctx.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"---&gt;&gt;&gt; TokenFilter &#123;&#125;,&#123;&#125;\"</span>, request.getMethod(), request.getRequestURL().toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        String token = request.getParameter(<span class=\"string\">\"token\"</span>);<span class=\"comment\">// 获取请求的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(token)) &#123;</span><br><span class=\"line\">            ctx.setSendZuulResponse(<span class=\"keyword\">true</span>); <span class=\"comment\">//对请求进行路由</span></span><br><span class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">200</span>);</span><br><span class=\"line\">            ctx.set(<span class=\"string\">\"isSuccess\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ctx.setSendZuulResponse(<span class=\"keyword\">false</span>); <span class=\"comment\">//不对其进行路由</span></span><br><span class=\"line\">            ctx.setResponseStatusCode(<span class=\"number\">400</span>);</span><br><span class=\"line\">            ctx.setResponseBody(<span class=\"string\">\"token is empty\"</span>);</span><br><span class=\"line\">            ctx.set(<span class=\"string\">\"isSuccess\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**注册Bean**\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TokenFilter <span class=\"title\">tokenFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TokenFilter();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**运行测试**\n- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt`,返回`token is empty`\n- 浏览器输入`http://localhost:8006/spring-cloud-consumer/hello/lxt?token=2`,返回`hello lxt，this is first messge`\n####  四、Zuul中的路由熔断和重试\n##### 路由熔断\n**实现FallbackProvider接口，重写fallbackResponse方法**\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxt.gateaway.zuul;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpHeaders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerFallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">FallbackProvider</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(FallbackProvider.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//指定要处理的 service。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRoute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"spring-cloud-provider\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title\">fallbackResponse</span><span class=\"params\">(String route, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cause != <span class=\"keyword\">null</span> &amp;&amp; cause.getCause() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String reason = cause.getCause().getMessage();</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"Excption &#123;&#125;\"</span>,reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fallbackResponse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title\">fallbackResponse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClientHttpResponse() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> HttpStatus <span class=\"title\">getStatusCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> HttpStatus.OK;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRawStatusCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">200</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStatusText</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"OK\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getBody</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ByteArrayInputStream(<span class=\"string\">\"The service is unavailable.\"</span>.getBytes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> HttpHeaders <span class=\"title\">getHeaders</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">                headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> headers;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**注册bean**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public ProducerFallback <span class=\"function\"><span class=\"title\">producerFallback</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new ProducerFallback();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**运行测试**\n- 再重启网关`zuul`,启动务提供者`service-provider1`\n- 浏览多次器输入`http://localhost:8006/spring-cloud-provider/foo?foo=lxt&amp;token=2`\n- 交替返回`hello lxt，this is first messge`和`hello lxt，this is two messge`\n- 关闭第二个服务提供者，继续刷新浏览器\n- 交替返回`hello lxt，this is first messge`和`The service is unavailable.`\n##### 路由重试\n**添加依赖**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-retry&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n**修改配置文件**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zuul:</span><br><span class=\"line\">  retryable: <span class=\"literal\">true</span> <span class=\"comment\">#是否开启重试功能</span></span><br><span class=\"line\">ribbon:</span><br><span class=\"line\">  MaxAutoRetries: 2 <span class=\"comment\">#对当前服务的重试次数</span></span><br><span class=\"line\">  MaxAutoRetriesNextServer: 0 <span class=\"comment\">#切换相同Server的次数</span></span><br></pre></td></tr></table></figure>\n\n**修改service-provider1的hello方法如下**\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value =<span class=\"string\">\"/hello\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">public String index(String name) &#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">\"request two name is \"</span>+name);</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        Thread.sleep(1000000);</span><br><span class=\"line\">    &#125;catch ( Exception e)&#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\" hello two error\"</span>,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"string\">\"hello \"</span>+name+<span class=\"string\">\"，this is two messge\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n**运行测试**\n- 重启网关`zuul`和`service-provider1`\n- 浏览器输入`http://localhost:8006/spring-cloud-provider/foo?foo=lxt&amp;token=2`\n- 返回`The service is unavailable.`时，查看控制如下：\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-11-21 22:38:31.049  INFO 11240 --- [nio-9002-exec-3] c.l.s.controller.HelloController         : request two name is lxt</span><br><span class=\"line\">2019-11-21 22:38:32.054  INFO 11240 --- [nio-9002-exec-4] c.l.s.controller.HelloController         : request two name is lxt</span><br><span class=\"line\">2019-11-21 22:38:33.060  INFO 11240 --- [nio-9002-exec-5] c.l.s.controller.HelloController         : request two name is lxt</span><br></pre></td></tr></table></figure>\n\n\n- 打印了三次，重试了两次。\n\n\n####  五、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n- 参考\n    - http://www.ityouknow.com/spring-cloud.html     \n</code></pre>"},{"title":"【Spring Cloud 笔记和总结】八、使用 Sleuth和Zipkin进行服务跟踪","date":"2019-11-13T12:30:12.000Z","copyright":"true。","_content":"\n####  一、添加服务跟踪微服务项目zipkin-server\n**父pom添加zipkin相关依赖**\n\n<!--more-->\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.lxt</groupId>\n    <artifactId>springcloud</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>eureka-server</module>\n        <module>service-provider</module>\n        <module>service-provider1</module>\n        <module>service-consumer</module>\n        <module>service-consumer-hystrix</module>\n        <module>hystrix-dashboard-turbine</module>\n        <module>service-consumer-node01</module>\n        <module>service-consumer-node02</module>\n        <module>config-server</module>\n        <module>config-server1</module>\n        <module>config-client</module>\n        <module>zuul</module>\n        <module>consul-provider</module>\n        <module>consul-consumer</module>\n        <module>zipkin-server</module>\n    </modules>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <java.version>1.8</java.version>\n<!--        <spring-cloud.version>Greenwich.RC1</spring-cloud.version>-->\n        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>\n        <zipkin-version>2.11.8</zipkin-version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-server</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-autoconfigure-ui</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n</project>\n```\n**本身pom文件依赖**\n\n```bash\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<!--zipkin中包含spring-cloud-starter-sleuth,无需再次引入-->\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.zipkin.java</groupId>\n    <artifactId>zipkin-server</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.zipkin.java</groupId>\n    <artifactId>zipkin-autoconfigure-ui</artifactId>\n</dependency>\n```\n**配置文件**\n\n```bash\nserver:\n  port: 9411\nspring:\n  application:\n    name: zipkin-server\neureka:\n  instance:\n    hostname: localhost\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8000/eureka/\nmanagement:\n  metrics:\n    web:\n      server:\n        auto-time-requests: false\n\n```\n**启动类添加@EnableZipkinServer**\n```bash\npackage com.lxt.zipkin;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport zipkin2.server.internal.EnableZipkinServer;\n\n@SpringBootApplication\n@EnableZipkinServer\npublic class ZipkinServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ZipkinServerApplication.class, args);\n    }\n\n}\n```\n####  二、改造service-consumer、service-provider和zuul\n**分别添加依赖**\n\n```bash\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-zipkin</artifactId>\n        </dependency>\n```\n**配置文件分别添加**\n\n```yml\n  #重点\n  zipkin:\n    #        base-url:当你设置sleuth-cli收集信息后通过http传输到zinkin-server时，需要在这里配置\n    base-url: http://localhost:9411\n    enabled: true\n  sleuth:\n    sampler:\n      #收集追踪信息的比率，如果是0.1则表示只记录10%的追踪数据，如果要全部追踪，设置为1（实际场景不推荐，因为会造成不小的性能消耗）\n      probability: 1.0\n```\n**注意：添加完毕依赖之后，刷新maven。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122230730371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**运行测试**\n- 分别启动注册中心、网关、服务跟踪、服务提供和服务消费者\n- 访问服务跟踪界面`http://localhost:9411`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122231051856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 浏览器访问`http://localhost:8006/spring-cloud-pr/hello/1?token=2`,查看服务跟踪界面\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019112223112770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122231138592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n####  三、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)","source":"_posts/2019-11-13-【Spring Cloud 笔记和总结】八、使用 Sleuth和Zipkin进行服务跟踪 - 副本.md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】八、使用 Sleuth和Zipkin进行服务跟踪\ndate: 2019-11-13 20:30:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 分布式\n- Sleuth\n- Zipkin\n- 服务跟踪\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n---\n\n####  一、添加服务跟踪微服务项目zipkin-server\n**父pom添加zipkin相关依赖**\n\n<!--more-->\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.lxt</groupId>\n    <artifactId>springcloud</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>eureka-server</module>\n        <module>service-provider</module>\n        <module>service-provider1</module>\n        <module>service-consumer</module>\n        <module>service-consumer-hystrix</module>\n        <module>hystrix-dashboard-turbine</module>\n        <module>service-consumer-node01</module>\n        <module>service-consumer-node02</module>\n        <module>config-server</module>\n        <module>config-server1</module>\n        <module>config-client</module>\n        <module>zuul</module>\n        <module>consul-provider</module>\n        <module>consul-consumer</module>\n        <module>zipkin-server</module>\n    </modules>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <java.version>1.8</java.version>\n<!--        <spring-cloud.version>Greenwich.RC1</spring-cloud.version>-->\n        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>\n        <zipkin-version>2.11.8</zipkin-version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-server</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-autoconfigure-ui</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n</project>\n```\n**本身pom文件依赖**\n\n```bash\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<!--zipkin中包含spring-cloud-starter-sleuth,无需再次引入-->\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.zipkin.java</groupId>\n    <artifactId>zipkin-server</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.zipkin.java</groupId>\n    <artifactId>zipkin-autoconfigure-ui</artifactId>\n</dependency>\n```\n**配置文件**\n\n```bash\nserver:\n  port: 9411\nspring:\n  application:\n    name: zipkin-server\neureka:\n  instance:\n    hostname: localhost\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8000/eureka/\nmanagement:\n  metrics:\n    web:\n      server:\n        auto-time-requests: false\n\n```\n**启动类添加@EnableZipkinServer**\n```bash\npackage com.lxt.zipkin;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport zipkin2.server.internal.EnableZipkinServer;\n\n@SpringBootApplication\n@EnableZipkinServer\npublic class ZipkinServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ZipkinServerApplication.class, args);\n    }\n\n}\n```\n####  二、改造service-consumer、service-provider和zuul\n**分别添加依赖**\n\n```bash\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-zipkin</artifactId>\n        </dependency>\n```\n**配置文件分别添加**\n\n```yml\n  #重点\n  zipkin:\n    #        base-url:当你设置sleuth-cli收集信息后通过http传输到zinkin-server时，需要在这里配置\n    base-url: http://localhost:9411\n    enabled: true\n  sleuth:\n    sampler:\n      #收集追踪信息的比率，如果是0.1则表示只记录10%的追踪数据，如果要全部追踪，设置为1（实际场景不推荐，因为会造成不小的性能消耗）\n      probability: 1.0\n```\n**注意：添加完毕依赖之后，刷新maven。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122230730371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**运行测试**\n- 分别启动注册中心、网关、服务跟踪、服务提供和服务消费者\n- 访问服务跟踪界面`http://localhost:9411`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122231051856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 浏览器访问`http://localhost:8006/spring-cloud-pr/hello/1?token=2`,查看服务跟踪界面\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019112223112770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122231138592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n####  三、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)","slug":"2019-11-13-【Spring Cloud 笔记和总结】八、使用 Sleuth和Zipkin进行服务跟踪 - 副本","published":1,"updated":"2019-11-24T15:17:54.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3d5dbbr007ds8vkq0ekpg6o","content":"<h4 id=\"一、添加服务跟踪微服务项目zipkin-server\"><a href=\"#一、添加服务跟踪微服务项目zipkin-server\" class=\"headerlink\" title=\"一、添加服务跟踪微服务项目zipkin-server\"></a>一、添加服务跟踪微服务项目zipkin-server</h4><p><strong>父pom添加zipkin相关依赖</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;modules&gt;</span><br><span class=\"line\">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class=\"line\">    &lt;/modules&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class=\"line\">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class=\"line\">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;<span class=\"built_in\">test</span>&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;dependencyManagement&gt;</span><br><span class=\"line\">        &lt;dependencies&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">                &lt;<span class=\"built_in\">type</span>&gt;pom&lt;/<span class=\"built_in\">type</span>&gt;</span><br><span class=\"line\">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;/dependencyManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>本身pom文件依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--zipkin中包含spring-cloud-starter-sleuth,无需再次引入--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 9411</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: zipkin-server</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    hostname: localhost</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http://localhost:8000/eureka/</span><br><span class=\"line\">management:</span><br><span class=\"line\">  metrics:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        auto-time-requests: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><strong>启动类添加@EnableZipkinServer</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lxt.zipkin;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import zipkin2.server.internal.EnableZipkinServer;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableZipkinServer</span><br><span class=\"line\">public class ZipkinServerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ZipkinServerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"二、改造service-consumer、service-provider和zuul\"><a href=\"#二、改造service-consumer、service-provider和zuul\" class=\"headerlink\" title=\"二、改造service-consumer、service-provider和zuul\"></a>二、改造service-consumer、service-provider和zuul</h4><p><strong>分别添加依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件分别添加</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#重点</span></span><br><span class=\"line\"><span class=\"attr\">zipkin:</span></span><br><span class=\"line\">  <span class=\"comment\">#        base-url:当你设置sleuth-cli收集信息后通过http传输到zinkin-server时，需要在这里配置</span></span><br><span class=\"line\"><span class=\"attr\">  base-url:</span> <span class=\"attr\">http://localhost:9411</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">sleuth:</span></span><br><span class=\"line\"><span class=\"attr\">  sampler:</span></span><br><span class=\"line\">    <span class=\"comment\">#收集追踪信息的比率，如果是0.1则表示只记录10%的追踪数据，如果要全部追踪，设置为1（实际场景不推荐，因为会造成不小的性能消耗）</span></span><br><span class=\"line\"><span class=\"attr\">    probability:</span> <span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：添加完毕依赖之后，刷新maven。</strong><br><img src=\"https://img-blog.csdnimg.cn/20191122230730371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>运行测试</strong></p>\n<ul>\n<li>分别启动注册中心、网关、服务跟踪、服务提供和服务消费者</li>\n<li>访问服务跟踪界面<code>http://localhost:9411</code><br><img src=\"https://img-blog.csdnimg.cn/20191122231051856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>浏览器访问<code>http://localhost:8006/spring-cloud-pr/hello/1?token=2</code>,查看服务跟踪界面<br><img src=\"https://img-blog.csdnimg.cn/2019112223112770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20191122231138592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><h4 id=\"三、相关\"><a href=\"#三、相关\" class=\"headerlink\" title=\"三、相关\"></a>三、相关</h4></li>\n<li>父模块介绍<a href=\"https://blog.csdn.net/qq_25283709/article/category/9462287\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n<li>源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"一、添加服务跟踪微服务项目zipkin-server\"><a href=\"#一、添加服务跟踪微服务项目zipkin-server\" class=\"headerlink\" title=\"一、添加服务跟踪微服务项目zipkin-server\"></a>一、添加服务跟踪微服务项目zipkin-server</h4><p><strong>父pom添加zipkin相关依赖</strong></p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;modules&gt;</span><br><span class=\"line\">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class=\"line\">    &lt;/modules&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class=\"line\">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class=\"line\">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;<span class=\"built_in\">test</span>&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;dependencyManagement&gt;</span><br><span class=\"line\">        &lt;dependencies&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">                &lt;<span class=\"built_in\">type</span>&gt;pom&lt;/<span class=\"built_in\">type</span>&gt;</span><br><span class=\"line\">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;/dependencyManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>本身pom文件依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--zipkin中包含spring-cloud-starter-sleuth,无需再次引入--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 9411</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: zipkin-server</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    hostname: localhost</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http://localhost:8000/eureka/</span><br><span class=\"line\">management:</span><br><span class=\"line\">  metrics:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        auto-time-requests: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><strong>启动类添加@EnableZipkinServer</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lxt.zipkin;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import zipkin2.server.internal.EnableZipkinServer;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableZipkinServer</span><br><span class=\"line\">public class ZipkinServerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ZipkinServerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"二、改造service-consumer、service-provider和zuul\"><a href=\"#二、改造service-consumer、service-provider和zuul\" class=\"headerlink\" title=\"二、改造service-consumer、service-provider和zuul\"></a>二、改造service-consumer、service-provider和zuul</h4><p><strong>分别添加依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件分别添加</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#重点</span></span><br><span class=\"line\"><span class=\"attr\">zipkin:</span></span><br><span class=\"line\">  <span class=\"comment\">#        base-url:当你设置sleuth-cli收集信息后通过http传输到zinkin-server时，需要在这里配置</span></span><br><span class=\"line\"><span class=\"attr\">  base-url:</span> <span class=\"attr\">http://localhost:9411</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">sleuth:</span></span><br><span class=\"line\"><span class=\"attr\">  sampler:</span></span><br><span class=\"line\">    <span class=\"comment\">#收集追踪信息的比率，如果是0.1则表示只记录10%的追踪数据，如果要全部追踪，设置为1（实际场景不推荐，因为会造成不小的性能消耗）</span></span><br><span class=\"line\"><span class=\"attr\">    probability:</span> <span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：添加完毕依赖之后，刷新maven。</strong><br><img src=\"https://img-blog.csdnimg.cn/20191122230730371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>运行测试</strong></p>\n<ul>\n<li>分别启动注册中心、网关、服务跟踪、服务提供和服务消费者</li>\n<li>访问服务跟踪界面<code>http://localhost:9411</code><br><img src=\"https://img-blog.csdnimg.cn/20191122231051856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>浏览器访问<code>http://localhost:8006/spring-cloud-pr/hello/1?token=2</code>,查看服务跟踪界面<br><img src=\"https://img-blog.csdnimg.cn/2019112223112770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20191122231138592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><h4 id=\"三、相关\"><a href=\"#三、相关\" class=\"headerlink\" title=\"三、相关\"></a>三、相关</h4></li>\n<li>父模块介绍<a href=\"https://blog.csdn.net/qq_25283709/article/category/9462287\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n<li>源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n</ul>"},{"title":"一、Spring Boot 核心之自动装配实现","date":"2019-11-24T14:30:12.000Z","copyright":"true。","_content":"\n####  一、简介和目标\n - 简介：在 Spring Boot 场景下，基于约定大于配置的原则，实现 Spring 组件自动装配的目的。\n\n - 目标：完成一个可通过配置和@EnableXXX 来控制的是否装配的Bean\n\n   <!--more-->\n\n####  二、底层装配技术简述\n- Spring 模式注解装配\n- Spring @Enable 模块装配\n\t- 注解驱动方式 eg:\n\t\t```java\n\t\t@Retention(RetentionPolicy.RUNTIME)\n\t\t@Target(ElementType.TYPE) @Documented\n\t\t@Import(DelegatingWebMvcConfiguration.class) \n\t\tpublic @interface EnableWebMvc {\n\t\t\n\t\t}\n\t\t```\n\t\t```java\n\t\t@Configuration \n\t\tpublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\n\t\t \n\t\t }\n\t\t```\n\t- 接口编程方式 eg:\n\t\n\t\t```java\n\t\t@Target(ElementType.TYPE) \n\t\t@Retention(RetentionPolicy.RUNTIME) \n\t\t@Documented \n\t\t@Import(CachingConfigurationSelector.class) \n\t\tpublic @interface EnableCaching { \n\t\t \n\t\t }\n\t\t```\n\n\t\t```java\n\t\tpublic class CachingConfigurationSelector extends AdviceModeImportSelector<EnableCaching> {\n\t\t    public String[] selectImports(AdviceMode adviceMode) {\n\t\t        switch(adviceMode) {\n\t\t        case PROXY:\n\t\t            return this.getProxyImports();\n\t\t        case ASPECTJ:\n\t\t            return this.getAspectJImports();\n\t\t        default:\n\t\t            return null;\n\t\t        }\n\t\t    }\n\t\t }\n\t\t```\n- Spring 条件装配\n\t- 配置方式 - `@Profile`，根据不同环境进行装配\n\t- 编程方式 - `@Conditional`\n\t\t```java\n\t\t@Target({ElementType.TYPE, ElementType.METHOD})\n\t\t@Retention(RetentionPolicy.RUNTIME)\n\t\t@Documented\n\t\t@Conditional({OnClassCondition.class})\n\t\tpublic @interface ConditionalOnClass {\n\t\t    Class<?>[] value() default {};\n\t\t\n\t\t    String[] name() default {};\n\t\t}\n\t\t```\n\n- Spring 工厂加载机制\n\t\n\t- 实现类： SpringFactoriesLoader\n \t- 配置资源： META-INF/spring.factories\n####  三、实现\n#####  1、激活自动装配   @EnableAutoConfiguration\n**项目结构如下**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191124205214381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**添加核心Bean=>HelloWorld,只有一个hello方法用于测试输出结果**\n```bash\n@Slf4j\npublic class HelloWorld {\n    public void hello(){\n        log.info(\"hello world 2019!\");\n    }\n}\n```\n**添加HelloWorldConfiguration用于注册HelloWorld**\n\n```bash\n@Slf4j\npublic class HelloWorldConfiguration {\n    @Bean\n    public HelloWorld hello(){\n        log.info(\"Load HelloWorld\");\n        return new HelloWorld();\n    }\n}\n\n```\n**添加HelloWorldImportSelector实现ImportSelector，通过接口编程方式实现@Enable功能**\n\n```bash\n@Slf4j\npublic class HelloWorldImportSelector implements ImportSelector {\n    @Override\n    public String[] selectImports(AnnotationMetadata annotationMetadata) {\n        log.info(\"annotationMetadata.getAnnotationTypes():{}\",annotationMetadata.getAnnotationTypes());\n        // 此处可写分支条件，根据指定条件选择性注册某些类 或者返回null\n\n        return new String[]{HelloWorldConfiguration.class.getName()};\n    }\n}\n```\n**添加@EnableHelloWorld用于控制是否装配HelloWorld**\n\n```bash\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\n//@Import(HelloWorldConfiguration.class) // 基于注解驱动实现Sprig @Enable模块\n@Import(HelloWorldImportSelector.class) // 基于接口驱动实现Spring @Enable模块\npublic @interface EnableHelloWorld {\n}\n```\n`注:如果直接使用@Import(HelloWorldConfiguration.class)注解方式实现，则不需要HelloWorldImportSelector类，但是注解方式无法添加分支判断，只能指定加载指定类`\n#####  2、实现自动装配配置类  HelloWorldAutoConfiguration\n```bash\n@Configuration // 模式注解，声明是一个bean\n@ConditionalOnSystemProperty(name = \"user.name\", value = \"Administrator\") // 正确的条件装配\n//@ConditionalOnSystemProperty(name = \"user.name\", value = \"lxt\") // 错误的条件装配\n@EnableHelloWorld // Spring @Enable 模块装配\npublic class HelloWorldAutoConfiguration {\n}\n\n```\n- 先根据条件注解@ConditionalOnSystemProperty判断是否满足\n- 满足则执行@EnableHelloWorld，加载HelloWorldImportSelector，注册HelloWorldConfiguration进而注册HelloWorld\n#####  3、配置自动装配实现 META-INF/spring.factories\n**在resources下添加META-INF/spring.factories配置文件，用于启动是通过工厂机制（SpringFactoriesLoader）加载**\n```bash\n# 自动装配\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.lxt.springboot.autoconfigure.configuration.HelloWorldAutoConfiguration\n```\n#####  4、测试\n**添加测试类HelloWorldService**\n\n```bash\n@Component\npublic class HelloWorldService {\n\n    @Autowired\n    private HelloWorld helloWorld;\n\n    @PostConstruct\n    public void init(){\n        helloWorld.hello();\n    }\n\n}\n\n```\n**启动项目，控制台输出如下，测试开启情况成功**\n\n```bash\n2019-11-24 21:25:02.299  INFO 13880 --- [           main] c.l.s.a.a.HelloWorldImportSelector       : annotationMetadata.getAnnotationTypes():[com.lxt.springboot.autoconfigure.condition.ConditionalOnSystemProperty, com.lxt.springboot.autoconfigure.annotation.EnableHelloWorld]\n2019-11-24 21:25:02.710  INFO 13880 --- [           main] c.l.s.a.c.HelloWorldConfiguration        : Load HelloWorld\n2019-11-24 21:25:02.712  INFO 13880 --- [           main] c.l.s.autoconfigure.entity.HelloWorld    : hello world 2019!\n```\n**去掉@EnableHelloWorld 注解或者条件注解修改为ConditionalOnSystemProperty(name = \"user.name\", value = \"lxt\")，分别重启，控制台输出如下，测试关闭情况成功**\n\n```bash\n***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nField helloWorld in com.lxt.springboot.autoconfigure.service.HelloWorldService required a bean of type 'com.lxt.springboot.autoconfigure.entity.HelloWorld' that could not be found.\n\nThe injection point has the following annotations:\n\t- @org.springframework.beans.factory.annotation.Autowired(required=true)\n\n\nAction:\n\nConsider defining a bean of type 'com.lxt.springboot.autoconfigure.entity.HelloWorld' in your configuration.\n```\n\n####  五、源码\n - https://github.com/hdlxt/dive-in-spring-boot","source":"_posts/2019-11-24-  一、Spring Boot 核心之自动装配实现.md","raw":"---\ntitle: 一、Spring Boot 核心之自动装配实现\ndate: 2019-11-24 22:30:12\ntags:\n- Spring Boot\n- 自动装备\n- 核心\ncategories:\n- Spring\n- Spring Boot\ncopyright: true。\n---\n\n####  一、简介和目标\n - 简介：在 Spring Boot 场景下，基于约定大于配置的原则，实现 Spring 组件自动装配的目的。\n\n - 目标：完成一个可通过配置和@EnableXXX 来控制的是否装配的Bean\n\n   <!--more-->\n\n####  二、底层装配技术简述\n- Spring 模式注解装配\n- Spring @Enable 模块装配\n\t- 注解驱动方式 eg:\n\t\t```java\n\t\t@Retention(RetentionPolicy.RUNTIME)\n\t\t@Target(ElementType.TYPE) @Documented\n\t\t@Import(DelegatingWebMvcConfiguration.class) \n\t\tpublic @interface EnableWebMvc {\n\t\t\n\t\t}\n\t\t```\n\t\t```java\n\t\t@Configuration \n\t\tpublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\n\t\t \n\t\t }\n\t\t```\n\t- 接口编程方式 eg:\n\t\n\t\t```java\n\t\t@Target(ElementType.TYPE) \n\t\t@Retention(RetentionPolicy.RUNTIME) \n\t\t@Documented \n\t\t@Import(CachingConfigurationSelector.class) \n\t\tpublic @interface EnableCaching { \n\t\t \n\t\t }\n\t\t```\n\n\t\t```java\n\t\tpublic class CachingConfigurationSelector extends AdviceModeImportSelector<EnableCaching> {\n\t\t    public String[] selectImports(AdviceMode adviceMode) {\n\t\t        switch(adviceMode) {\n\t\t        case PROXY:\n\t\t            return this.getProxyImports();\n\t\t        case ASPECTJ:\n\t\t            return this.getAspectJImports();\n\t\t        default:\n\t\t            return null;\n\t\t        }\n\t\t    }\n\t\t }\n\t\t```\n- Spring 条件装配\n\t- 配置方式 - `@Profile`，根据不同环境进行装配\n\t- 编程方式 - `@Conditional`\n\t\t```java\n\t\t@Target({ElementType.TYPE, ElementType.METHOD})\n\t\t@Retention(RetentionPolicy.RUNTIME)\n\t\t@Documented\n\t\t@Conditional({OnClassCondition.class})\n\t\tpublic @interface ConditionalOnClass {\n\t\t    Class<?>[] value() default {};\n\t\t\n\t\t    String[] name() default {};\n\t\t}\n\t\t```\n\n- Spring 工厂加载机制\n\t\n\t- 实现类： SpringFactoriesLoader\n \t- 配置资源： META-INF/spring.factories\n####  三、实现\n#####  1、激活自动装配   @EnableAutoConfiguration\n**项目结构如下**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191124205214381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**添加核心Bean=>HelloWorld,只有一个hello方法用于测试输出结果**\n```bash\n@Slf4j\npublic class HelloWorld {\n    public void hello(){\n        log.info(\"hello world 2019!\");\n    }\n}\n```\n**添加HelloWorldConfiguration用于注册HelloWorld**\n\n```bash\n@Slf4j\npublic class HelloWorldConfiguration {\n    @Bean\n    public HelloWorld hello(){\n        log.info(\"Load HelloWorld\");\n        return new HelloWorld();\n    }\n}\n\n```\n**添加HelloWorldImportSelector实现ImportSelector，通过接口编程方式实现@Enable功能**\n\n```bash\n@Slf4j\npublic class HelloWorldImportSelector implements ImportSelector {\n    @Override\n    public String[] selectImports(AnnotationMetadata annotationMetadata) {\n        log.info(\"annotationMetadata.getAnnotationTypes():{}\",annotationMetadata.getAnnotationTypes());\n        // 此处可写分支条件，根据指定条件选择性注册某些类 或者返回null\n\n        return new String[]{HelloWorldConfiguration.class.getName()};\n    }\n}\n```\n**添加@EnableHelloWorld用于控制是否装配HelloWorld**\n\n```bash\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\n//@Import(HelloWorldConfiguration.class) // 基于注解驱动实现Sprig @Enable模块\n@Import(HelloWorldImportSelector.class) // 基于接口驱动实现Spring @Enable模块\npublic @interface EnableHelloWorld {\n}\n```\n`注:如果直接使用@Import(HelloWorldConfiguration.class)注解方式实现，则不需要HelloWorldImportSelector类，但是注解方式无法添加分支判断，只能指定加载指定类`\n#####  2、实现自动装配配置类  HelloWorldAutoConfiguration\n```bash\n@Configuration // 模式注解，声明是一个bean\n@ConditionalOnSystemProperty(name = \"user.name\", value = \"Administrator\") // 正确的条件装配\n//@ConditionalOnSystemProperty(name = \"user.name\", value = \"lxt\") // 错误的条件装配\n@EnableHelloWorld // Spring @Enable 模块装配\npublic class HelloWorldAutoConfiguration {\n}\n\n```\n- 先根据条件注解@ConditionalOnSystemProperty判断是否满足\n- 满足则执行@EnableHelloWorld，加载HelloWorldImportSelector，注册HelloWorldConfiguration进而注册HelloWorld\n#####  3、配置自动装配实现 META-INF/spring.factories\n**在resources下添加META-INF/spring.factories配置文件，用于启动是通过工厂机制（SpringFactoriesLoader）加载**\n```bash\n# 自动装配\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.lxt.springboot.autoconfigure.configuration.HelloWorldAutoConfiguration\n```\n#####  4、测试\n**添加测试类HelloWorldService**\n\n```bash\n@Component\npublic class HelloWorldService {\n\n    @Autowired\n    private HelloWorld helloWorld;\n\n    @PostConstruct\n    public void init(){\n        helloWorld.hello();\n    }\n\n}\n\n```\n**启动项目，控制台输出如下，测试开启情况成功**\n\n```bash\n2019-11-24 21:25:02.299  INFO 13880 --- [           main] c.l.s.a.a.HelloWorldImportSelector       : annotationMetadata.getAnnotationTypes():[com.lxt.springboot.autoconfigure.condition.ConditionalOnSystemProperty, com.lxt.springboot.autoconfigure.annotation.EnableHelloWorld]\n2019-11-24 21:25:02.710  INFO 13880 --- [           main] c.l.s.a.c.HelloWorldConfiguration        : Load HelloWorld\n2019-11-24 21:25:02.712  INFO 13880 --- [           main] c.l.s.autoconfigure.entity.HelloWorld    : hello world 2019!\n```\n**去掉@EnableHelloWorld 注解或者条件注解修改为ConditionalOnSystemProperty(name = \"user.name\", value = \"lxt\")，分别重启，控制台输出如下，测试关闭情况成功**\n\n```bash\n***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nField helloWorld in com.lxt.springboot.autoconfigure.service.HelloWorldService required a bean of type 'com.lxt.springboot.autoconfigure.entity.HelloWorld' that could not be found.\n\nThe injection point has the following annotations:\n\t- @org.springframework.beans.factory.annotation.Autowired(required=true)\n\n\nAction:\n\nConsider defining a bean of type 'com.lxt.springboot.autoconfigure.entity.HelloWorld' in your configuration.\n```\n\n####  五、源码\n - https://github.com/hdlxt/dive-in-spring-boot","slug":"2019-11-24-  一、Spring Boot 核心之自动装配实现","published":1,"updated":"2019-11-24T15:20:25.400Z","_id":"ck3d5dr700087s8vkvjktclfs","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一、简介和目标\"><a href=\"#一、简介和目标\" class=\"headerlink\" title=\"一、简介和目标\"></a>一、简介和目标</h4><ul>\n<li><p>简介：在 Spring Boot 场景下，基于约定大于配置的原则，实现 Spring 组件自动装配的目的。</p>\n</li>\n<li><p>目标：完成一个可通过配置和@EnableXXX 来控制的是否装配的Bean</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<h4 id=\"二、底层装配技术简述\"><a href=\"#二、底层装配技术简述\" class=\"headerlink\" title=\"二、底层装配技术简述\"></a>二、底层装配技术简述</h4><ul>\n<li>Spring 模式注解装配</li>\n<li><p>Spring @Enable 模块装配</p>\n<ul>\n<li><p>注解驱动方式 eg:</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE) <span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(DelegatingWebMvcConfiguration.class) </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableWebMvc &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接口编程方式 eg:</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE) </span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME) </span><br><span class=\"line\"><span class=\"meta\">@Documented</span> </span><br><span class=\"line\"><span class=\"meta\">@Import</span>(CachingConfigurationSelector.class) </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableCaching &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CachingConfigurationSelector</span> <span class=\"keyword\">extends</span> <span class=\"title\">AdviceModeImportSelector</span>&lt;<span class=\"title\">EnableCaching</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(adviceMode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> PROXY:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getProxyImports();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> ASPECTJ:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAspectJImports();</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Spring 条件装配</p>\n<ul>\n<li>配置方式 - <code>@Profile</code>，根据不同环境进行装配</li>\n<li>编程方式 - <code>@Conditional</code>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional</span>(&#123;OnClassCondition.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ConditionalOnClass &#123;</span><br><span class=\"line\">    Class&lt;?&gt;[] value() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] name() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Spring 工厂加载机制</p>\n<ul>\n<li>实现类： SpringFactoriesLoader<ul>\n<li>配置资源： META-INF/spring.factories<h4 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h4><h5 id=\"1、激活自动装配-EnableAutoConfiguration\"><a href=\"#1、激活自动装配-EnableAutoConfiguration\" class=\"headerlink\" title=\"1、激活自动装配   @EnableAutoConfiguration\"></a>1、激活自动装配   @EnableAutoConfiguration</h5><strong>项目结构如下</strong><br><img src=\"https://img-blog.csdnimg.cn/20191124205214381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>添加核心Bean=&gt;HelloWorld,只有一个hello方法用于测试输出结果</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">hello</span></span>()&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"hello world 2019!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>添加HelloWorldConfiguration用于注册HelloWorld</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class HelloWorldConfiguration &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public HelloWorld <span class=\"function\"><span class=\"title\">hello</span></span>()&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"Load HelloWorld\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new HelloWorld();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>添加HelloWorldImportSelector实现ImportSelector，通过接口编程方式实现@Enable功能</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class HelloWorldImportSelector implements ImportSelector &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"annotationMetadata.getAnnotationTypes():&#123;&#125;\"</span>,annotationMetadata.getAnnotationTypes());</span><br><span class=\"line\">        // 此处可写分支条件，根据指定条件选择性注册某些类 或者返回null</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">return</span> new String[]&#123;HelloWorldConfiguration.class.getName()&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>添加@EnableHelloWorld用于控制是否装配HelloWorld</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.TYPE)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">//@Import(HelloWorldConfiguration.class) // 基于注解驱动实现Sprig @Enable模块</span><br><span class=\"line\">@Import(HelloWorldImportSelector.class) // 基于接口驱动实现Spring @Enable模块</span><br><span class=\"line\">public @interface EnableHelloWorld &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>注:如果直接使用@Import(HelloWorldConfiguration.class)注解方式实现，则不需要HelloWorldImportSelector类，但是注解方式无法添加分支判断，只能指定加载指定类</code></p>\n<h5 id=\"2、实现自动装配配置类-HelloWorldAutoConfiguration\"><a href=\"#2、实现自动装配配置类-HelloWorldAutoConfiguration\" class=\"headerlink\" title=\"2、实现自动装配配置类  HelloWorldAutoConfiguration\"></a>2、实现自动装配配置类  HelloWorldAutoConfiguration</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration // 模式注解，声明是一个bean</span><br><span class=\"line\">@ConditionalOnSystemProperty(name = <span class=\"string\">\"user.name\"</span>, value = <span class=\"string\">\"Administrator\"</span>) // 正确的条件装配</span><br><span class=\"line\">//@ConditionalOnSystemProperty(name = <span class=\"string\">\"user.name\"</span>, value = <span class=\"string\">\"lxt\"</span>) // 错误的条件装配</span><br><span class=\"line\">@EnableHelloWorld // Spring @Enable 模块装配</span><br><span class=\"line\">public class HelloWorldAutoConfiguration &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>先根据条件注解@ConditionalOnSystemProperty判断是否满足</li>\n<li>满足则执行@EnableHelloWorld，加载HelloWorldImportSelector，注册HelloWorldConfiguration进而注册HelloWorld<h5 id=\"3、配置自动装配实现-META-INF-spring-factories\"><a href=\"#3、配置自动装配实现-META-INF-spring-factories\" class=\"headerlink\" title=\"3、配置自动装配实现 META-INF/spring.factories\"></a>3、配置自动装配实现 META-INF/spring.factories</h5><strong>在resources下添加META-INF/spring.factories配置文件，用于启动是通过工厂机制（SpringFactoriesLoader）加载</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动装配</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">com.lxt.springboot.autoconfigure.configuration.HelloWorldAutoConfiguration</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"4、测试\"><a href=\"#4、测试\" class=\"headerlink\" title=\"4、测试\"></a>4、测试</h5><p><strong>添加测试类HelloWorldService</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class HelloWorldService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private HelloWorld helloWorld;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">init</span></span>()&#123;</span><br><span class=\"line\">        helloWorld.hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>启动项目，控制台输出如下，测试开启情况成功</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-11-24 21:25:02.299  INFO 13880 --- [           main] c.l.s.a.a.HelloWorldImportSelector       : annotationMetadata.getAnnotationTypes():[com.lxt.springboot.autoconfigure.condition.ConditionalOnSystemProperty, com.lxt.springboot.autoconfigure.annotation.EnableHelloWorld]</span><br><span class=\"line\">2019-11-24 21:25:02.710  INFO 13880 --- [           main] c.l.s.a.c.HelloWorldConfiguration        : Load HelloWorld</span><br><span class=\"line\">2019-11-24 21:25:02.712  INFO 13880 --- [           main] c.l.s.autoconfigure.entity.HelloWorld    : hello world 2019!</span><br></pre></td></tr></table></figure>\n<p><strong>去掉@EnableHelloWorld 注解或者条件注解修改为ConditionalOnSystemProperty(name = “user.name”, value = “lxt”)，分别重启，控制台输出如下，测试关闭情况成功</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***************************</span><br><span class=\"line\">APPLICATION FAILED TO START</span><br><span class=\"line\">***************************</span><br><span class=\"line\"></span><br><span class=\"line\">Description:</span><br><span class=\"line\"></span><br><span class=\"line\">Field helloWorld <span class=\"keyword\">in</span> com.lxt.springboot.autoconfigure.service.HelloWorldService required a bean of <span class=\"built_in\">type</span> <span class=\"string\">'com.lxt.springboot.autoconfigure.entity.HelloWorld'</span> that could not be found.</span><br><span class=\"line\"></span><br><span class=\"line\">The injection point has the following annotations:</span><br><span class=\"line\">\t- @org.springframework.beans.factory.annotation.Autowired(required=<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Action:</span><br><span class=\"line\"></span><br><span class=\"line\">Consider defining a bean of <span class=\"built_in\">type</span> <span class=\"string\">'com.lxt.springboot.autoconfigure.entity.HelloWorld'</span> <span class=\"keyword\">in</span> your configuration.</span><br></pre></td></tr></table></figure>\n<h4 id=\"五、源码\"><a href=\"#五、源码\" class=\"headerlink\" title=\"五、源码\"></a>五、源码</h4><ul>\n<li><a href=\"https://github.com/hdlxt/dive-in-spring-boot\" target=\"_blank\" rel=\"noopener\">https://github.com/hdlxt/dive-in-spring-boot</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"一、简介和目标\"><a href=\"#一、简介和目标\" class=\"headerlink\" title=\"一、简介和目标\"></a>一、简介和目标</h4><ul>\n<li><p>简介：在 Spring Boot 场景下，基于约定大于配置的原则，实现 Spring 组件自动装配的目的。</p>\n</li>\n<li><p>目标：完成一个可通过配置和@EnableXXX 来控制的是否装配的Bean</p>","more":"</li>\n</ul>\n<h4 id=\"二、底层装配技术简述\"><a href=\"#二、底层装配技术简述\" class=\"headerlink\" title=\"二、底层装配技术简述\"></a>二、底层装配技术简述</h4><ul>\n<li>Spring 模式注解装配</li>\n<li><p>Spring @Enable 模块装配</p>\n<ul>\n<li><p>注解驱动方式 eg:</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE) <span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(DelegatingWebMvcConfiguration.class) </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableWebMvc &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接口编程方式 eg:</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE) </span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME) </span><br><span class=\"line\"><span class=\"meta\">@Documented</span> </span><br><span class=\"line\"><span class=\"meta\">@Import</span>(CachingConfigurationSelector.class) </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableCaching &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CachingConfigurationSelector</span> <span class=\"keyword\">extends</span> <span class=\"title\">AdviceModeImportSelector</span>&lt;<span class=\"title\">EnableCaching</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(adviceMode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> PROXY:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getProxyImports();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> ASPECTJ:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAspectJImports();</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Spring 条件装配</p>\n<ul>\n<li>配置方式 - <code>@Profile</code>，根据不同环境进行装配</li>\n<li>编程方式 - <code>@Conditional</code>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional</span>(&#123;OnClassCondition.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ConditionalOnClass &#123;</span><br><span class=\"line\">    Class&lt;?&gt;[] value() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] name() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Spring 工厂加载机制</p>\n<ul>\n<li>实现类： SpringFactoriesLoader<ul>\n<li>配置资源： META-INF/spring.factories<h4 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h4><h5 id=\"1、激活自动装配-EnableAutoConfiguration\"><a href=\"#1、激活自动装配-EnableAutoConfiguration\" class=\"headerlink\" title=\"1、激活自动装配   @EnableAutoConfiguration\"></a>1、激活自动装配   @EnableAutoConfiguration</h5><strong>项目结构如下</strong><br><img src=\"https://img-blog.csdnimg.cn/20191124205214381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>添加核心Bean=&gt;HelloWorld,只有一个hello方法用于测试输出结果</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">hello</span></span>()&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"hello world 2019!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>添加HelloWorldConfiguration用于注册HelloWorld</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class HelloWorldConfiguration &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public HelloWorld <span class=\"function\"><span class=\"title\">hello</span></span>()&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"Load HelloWorld\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new HelloWorld();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>添加HelloWorldImportSelector实现ImportSelector，通过接口编程方式实现@Enable功能</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class HelloWorldImportSelector implements ImportSelector &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"annotationMetadata.getAnnotationTypes():&#123;&#125;\"</span>,annotationMetadata.getAnnotationTypes());</span><br><span class=\"line\">        // 此处可写分支条件，根据指定条件选择性注册某些类 或者返回null</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">return</span> new String[]&#123;HelloWorldConfiguration.class.getName()&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>添加@EnableHelloWorld用于控制是否装配HelloWorld</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.TYPE)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">//@Import(HelloWorldConfiguration.class) // 基于注解驱动实现Sprig @Enable模块</span><br><span class=\"line\">@Import(HelloWorldImportSelector.class) // 基于接口驱动实现Spring @Enable模块</span><br><span class=\"line\">public @interface EnableHelloWorld &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>注:如果直接使用@Import(HelloWorldConfiguration.class)注解方式实现，则不需要HelloWorldImportSelector类，但是注解方式无法添加分支判断，只能指定加载指定类</code></p>\n<h5 id=\"2、实现自动装配配置类-HelloWorldAutoConfiguration\"><a href=\"#2、实现自动装配配置类-HelloWorldAutoConfiguration\" class=\"headerlink\" title=\"2、实现自动装配配置类  HelloWorldAutoConfiguration\"></a>2、实现自动装配配置类  HelloWorldAutoConfiguration</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration // 模式注解，声明是一个bean</span><br><span class=\"line\">@ConditionalOnSystemProperty(name = <span class=\"string\">\"user.name\"</span>, value = <span class=\"string\">\"Administrator\"</span>) // 正确的条件装配</span><br><span class=\"line\">//@ConditionalOnSystemProperty(name = <span class=\"string\">\"user.name\"</span>, value = <span class=\"string\">\"lxt\"</span>) // 错误的条件装配</span><br><span class=\"line\">@EnableHelloWorld // Spring @Enable 模块装配</span><br><span class=\"line\">public class HelloWorldAutoConfiguration &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>先根据条件注解@ConditionalOnSystemProperty判断是否满足</li>\n<li>满足则执行@EnableHelloWorld，加载HelloWorldImportSelector，注册HelloWorldConfiguration进而注册HelloWorld<h5 id=\"3、配置自动装配实现-META-INF-spring-factories\"><a href=\"#3、配置自动装配实现-META-INF-spring-factories\" class=\"headerlink\" title=\"3、配置自动装配实现 META-INF/spring.factories\"></a>3、配置自动装配实现 META-INF/spring.factories</h5><strong>在resources下添加META-INF/spring.factories配置文件，用于启动是通过工厂机制（SpringFactoriesLoader）加载</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动装配</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">com.lxt.springboot.autoconfigure.configuration.HelloWorldAutoConfiguration</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"4、测试\"><a href=\"#4、测试\" class=\"headerlink\" title=\"4、测试\"></a>4、测试</h5><p><strong>添加测试类HelloWorldService</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class HelloWorldService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private HelloWorld helloWorld;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">init</span></span>()&#123;</span><br><span class=\"line\">        helloWorld.hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>启动项目，控制台输出如下，测试开启情况成功</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-11-24 21:25:02.299  INFO 13880 --- [           main] c.l.s.a.a.HelloWorldImportSelector       : annotationMetadata.getAnnotationTypes():[com.lxt.springboot.autoconfigure.condition.ConditionalOnSystemProperty, com.lxt.springboot.autoconfigure.annotation.EnableHelloWorld]</span><br><span class=\"line\">2019-11-24 21:25:02.710  INFO 13880 --- [           main] c.l.s.a.c.HelloWorldConfiguration        : Load HelloWorld</span><br><span class=\"line\">2019-11-24 21:25:02.712  INFO 13880 --- [           main] c.l.s.autoconfigure.entity.HelloWorld    : hello world 2019!</span><br></pre></td></tr></table></figure>\n<p><strong>去掉@EnableHelloWorld 注解或者条件注解修改为ConditionalOnSystemProperty(name = “user.name”, value = “lxt”)，分别重启，控制台输出如下，测试关闭情况成功</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***************************</span><br><span class=\"line\">APPLICATION FAILED TO START</span><br><span class=\"line\">***************************</span><br><span class=\"line\"></span><br><span class=\"line\">Description:</span><br><span class=\"line\"></span><br><span class=\"line\">Field helloWorld <span class=\"keyword\">in</span> com.lxt.springboot.autoconfigure.service.HelloWorldService required a bean of <span class=\"built_in\">type</span> <span class=\"string\">'com.lxt.springboot.autoconfigure.entity.HelloWorld'</span> that could not be found.</span><br><span class=\"line\"></span><br><span class=\"line\">The injection point has the following annotations:</span><br><span class=\"line\">\t- @org.springframework.beans.factory.annotation.Autowired(required=<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Action:</span><br><span class=\"line\"></span><br><span class=\"line\">Consider defining a bean of <span class=\"built_in\">type</span> <span class=\"string\">'com.lxt.springboot.autoconfigure.entity.HelloWorld'</span> <span class=\"keyword\">in</span> your configuration.</span><br></pre></td></tr></table></figure>\n<h4 id=\"五、源码\"><a href=\"#五、源码\" class=\"headerlink\" title=\"五、源码\"></a>五、源码</h4><ul>\n<li><a href=\"https://github.com/hdlxt/dive-in-spring-boot\" target=\"_blank\" rel=\"noopener\">https://github.com/hdlxt/dive-in-spring-boot</a></li>\n</ul>"},{"title":"【Spring Cloud 笔记和总结】六、Spring Cloud Config统一配置中心（Git+Spring Cloud Bus+RabbitMQ+Git WebHook）","date":"2019-11-05T12:30:12.000Z","copyright":"true。","_content":"\n\n\n\n\n- ####  一、简介\n\t基于Spring Cloud Config实现统一配置中心，将配置文件存放于Git(GitHub)上，通过Spring Cloud Bus消息总线&RabbitMQ消息中间件进行服务间消息通信。\n\t\n\t**涉及项目**\n\t\n\t- exureka-server\n\t\n\t- config-server\n\t\n\t- config-client\n\t\n\t  <!--more-->\n\t\n\t**整体架构图大致如下，使用GitHub Webhooks 触发配置中心刷新配置**\n\t\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117200225699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\n\t上图来源：`http://blog.didispace.com/springcloud7/`\n\t\n\t####  二、配置中心服务端实现\n\t**依赖**\t \t\n\t```bash\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t    <modelVersion>4.0.0</modelVersion>\n\t    <parent>\n\t        <groupId>com.lxt</groupId>\n\t        <artifactId>springcloud</artifactId>\n\t        <version>1.0-SNAPSHOT</version>\n\t    </parent>\n\t    <groupId>com.lxt</groupId>\n\t    <artifactId>config-server</artifactId>\n\t    <version>0.0.1-SNAPSHOT</version>\n\t    <name>config-server</name>\n\t    <description>Demo project for Spring Boot</description>\n\t    <dependencies>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-config-server</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n\t        </dependency>\n\t        <!--集成Git Webhooks之后，使用/monitor即可实现配置更新，通知其他服务-->\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-config-monitor</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.boot</groupId>\n\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t        </dependency>\n\t    </dependencies>\n\t</project>\n\t\n\t```\n\t**配置文件**\n\t```yml\n\tserver:\n\t  port: 8080\n\tspring:\n\t  application:\n\t    name: spring-cloud-config-server\n\t  cloud:\n\t    config:\n\t      server:\n\t        git:\n\t          uri: https://github.com/hdlxt/springcloud # 配置git仓库的地址\n\t          search-paths: config-repo                     # git仓库地址下的相对地址，可以配置多个，用,分割。\n\t          username:                     # git仓库的账号\n\t          password:           # git仓库的密码\n\t  rabbitmq:\n\t    host: 111.231.xxxx.xx\n\t    port: 5672\n\t    username: guest\n\t    password: guest\n\teureka:\n\t  client:\n\t    serviceUrl:\n\t      defaultZone: http://localhost:8000/eureka/   #注册中心eurka地址\n\tmanagement:\n\t  endpoints:\n\t    web:\n\t      exposure:\n\t       # 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问\n\t        include: bus-refresh\n\t\n\t```\n\t- 主要内容\n\t\t- 添加配置中心文件存放于github\n\t\t- 配置rabbitmq连接信息\n\t\t- 暴露bus-refresh\n\t- github配置文件内容\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117211411126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 仓库中的配置文件会被转换成 Web 接口，访问可以参照以下的规则：\n\t\t - /{application}/{profile}[/{label}]\n\t\t- /{application}-{profile}.yml\n\t\t- /{label}/{application}-{profile}.yml\n\t\t- /{application}-{profile}.properties\n\t\t- /{label}/{application}-{profile}.properties\n\t  - 上面的 URL 会映射 {application}-{profile}.yml 对应的配置文件，其中 {label} 对应 Git 上不同的分支，默认为 master。\n\t\t\n\t\n\t**启动类比较简单,声明是服务、配置中心服务端**\n\t```java\n\t@EnableConfigServer\n\t@EnableDiscoveryClient\n\t@SpringBootApplication\n\tpublic class ConfigServerApplication {\n\t\n\t    public static void main(String[] args) {\n\t        SpringApplication.run(ConfigServerApplication.class, args);\n\t    }\n\t\n\t}\n\t```\n\t到此配置中心服务端完毕。\n\t\n\t####  二、配置中心客户端实现\n\t- 依赖\n\t\t```bash\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t\t    <modelVersion>4.0.0</modelVersion>\n\t\t    <parent>\n\t\t        <groupId>com.lxt</groupId>\n\t\t        <artifactId>springcloud</artifactId>\n\t\t        <version>1.0-SNAPSHOT</version>\n\t\t    </parent>\n\t\t    <groupId>com.lxt</groupId>\n\t\t    <artifactId>config-client</artifactId>\n\t\t    <version>0.0.1-SNAPSHOT</version>\n\t\t    <name>config-client</name>\n\t\t    <description>Demo project for Spring Boot</description>\n\t\t    <dependencies>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-config</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.boot</groupId>\n\t\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n\t\t        </dependency>\n\t\t    </dependencies>\n\t\t</project>\n\t\t\n\t\t```\n\t- 配置文件\n\t\t- 关于` bootstrap.yml`和`application.yml`\n\t\t\t- bootstrap.yml（bootstrap.properties） 用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等\t\n\t\t\t- application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。\n\t\t\t- bootstrap.yml 先于 application.yml 加载\n\t\t- bootstrap.yml\n\t\t\t```yml\n\t\t\tserver:\n\t\t\t  port: 8003\n\t\t\tspring:\n\t\t\t  cloud:\n\t\t\t    config:\n\t\t\t      name: lxt-config\n\t\t\t      profile: dev\n\t\t\t      label: master\n\t\t\t      discovery:\n\t\t\t        #开启Config服务发现支持\n\t\t\t        enabled: true\n\t\t\t        #指定server端的name,也就是server端spring.application.name的值\n\t\t\t        service-id: spring-cloud-config-server\n\t\t\teureka:\n\t\t\t  client:\n\t\t\t    service-url:\n\t\t\t      defaultZone: http://localhost:8000/eureka/\n\t\t\t```\n\t \t- application.yml\n\t\t\t```yml\n\t\t\tspring:\n\t\t\t  application:\n\t\t\t    name: spring-cloud-config-client\n\t\t\t  cloud:\n\t\t\t    bus:\n\t\t\t     trace:\n\t\t\t       # 开启消息跟踪事件\n\t\t\t       enabled: true\n\t\t\t  rabbitmq:\n\t\t\t    host: 111.231.29.249\n\t\t\t    port: 5672\n\t\t\t    username: guest\n\t\t\t    password: guest\n\t\t\tmanagement:\n\t\t\t  endpoints:\n\t\t\t    web:\n\t\t\t      exposure:\n\t\t\t        include: refresh\n\t\t\t\n\t\t```\n\t- 主要代码\n\t\t-  核心\n\t\t\t- @EnableDiscoveryClient\n\t\t\t- @RefreshScope:使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n\t\t- 启动类\n\t\t\t```bash\n\t\t\t\n\t\t\t@EnableDiscoveryClient\n\t\t\t@SpringBootApplication\n\t\t\tpublic class ConfigClientApplication {\n\t\t\t\n\t\t\t    public static void main(String[] args) {\n\t\t\t        SpringApplication.run(ConfigClientApplication.class, args);\n\t\t\t    }\n\t\t\t\n\t\t\t}\n\t\t\t```\n\t\t- 测试\n\t\t\t```bash\n\t\t\t/**\n\t\t\t * @author lxt\n\t\t\t * @Copy Right Information: lxt\n\t\t\t * @Project: spring cloud\n\t\t\t * @CreateDate: 2018/12/16 20:04\n\t\t\t * @history Sr Date Modified By Why & What is modified\n\t\t\t * 1.2018/12/16 lxt & new\n\t\t\t */\n\t\t\t@RestController\n\t\t\t@RefreshScope // 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n\t\t\tpublic class HelloController {\n\t\t\t    @Value(\"${lxt.hello}\")\n\t\t\t    private String hello;\n\t\t\t\n\t\t\t    @RequestMapping(\"/hello\")\n\t\t\t    public String from() {\n\t\t\t        return this.hello;\n\t\t\t    }\n\t\t\t}\n\t\t\t```\n\t####  三、整合\n\t **以安装包或者docker方式安装RabbitMQ，启动**![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213514487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\n\t **配置GitHub Webhooks**\n\t- （可选，云服务器可跳过）内网穿透工具下载[natapp](#https://natapp.cn/)安装和配置（有免费通道），目的可给本机电脑映射一个外网域名，用于配置Webhooks\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111721323258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 配置Webhooks，配置中心服务端需引入`spring-cloud-config-monitor`依赖\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117214212673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t####  四、测试\n\t- 分别启动注册中心、配置中心服务端\n\t- 启动多个客户端\n\t\t- 可通过打jar包形式启动\n\t\t- 也可通过idea添加启动类，指定不同端口启动\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213813171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 修改配置文件，push到github上触发回调`http://t23b4j.natappfree.cc/monitor`,通知配置中心服务端更新配置，服务端以mq形式通过消息总线通知客户端更新配置。\n\t\n\t####  五、相关\n\t- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n\t- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 参考\n\t\t- http://www.ityouknow.com/spring-cloud.html\t \n","source":"_posts/2019-11-15-【Spring Cloud 笔记和总结】六、Spring Cloud Config统一配置中心（Git+Spring Cloud Bus+RabbitMQ+Git WebHook）.md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】六、Spring Cloud Config统一配置中心（Git+Spring Cloud Bus+RabbitMQ+Git WebHook）\ndate: 2019-11-05 20:30:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 分布式\n- 统一配置中心\n- Spring Cloud Bus\n- RabbitMQ\n- Git WebHook\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n\n---\n\n\n\n\n\n- ####  一、简介\n\t基于Spring Cloud Config实现统一配置中心，将配置文件存放于Git(GitHub)上，通过Spring Cloud Bus消息总线&RabbitMQ消息中间件进行服务间消息通信。\n\t\n\t**涉及项目**\n\t\n\t- exureka-server\n\t\n\t- config-server\n\t\n\t- config-client\n\t\n\t  <!--more-->\n\t\n\t**整体架构图大致如下，使用GitHub Webhooks 触发配置中心刷新配置**\n\t\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117200225699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\n\t上图来源：`http://blog.didispace.com/springcloud7/`\n\t\n\t####  二、配置中心服务端实现\n\t**依赖**\t \t\n\t```bash\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t    <modelVersion>4.0.0</modelVersion>\n\t    <parent>\n\t        <groupId>com.lxt</groupId>\n\t        <artifactId>springcloud</artifactId>\n\t        <version>1.0-SNAPSHOT</version>\n\t    </parent>\n\t    <groupId>com.lxt</groupId>\n\t    <artifactId>config-server</artifactId>\n\t    <version>0.0.1-SNAPSHOT</version>\n\t    <name>config-server</name>\n\t    <description>Demo project for Spring Boot</description>\n\t    <dependencies>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-config-server</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n\t        </dependency>\n\t        <!--集成Git Webhooks之后，使用/monitor即可实现配置更新，通知其他服务-->\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-config-monitor</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.boot</groupId>\n\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t        </dependency>\n\t        <dependency>\n\t            <groupId>org.springframework.cloud</groupId>\n\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t        </dependency>\n\t    </dependencies>\n\t</project>\n\t\n\t```\n\t**配置文件**\n\t```yml\n\tserver:\n\t  port: 8080\n\tspring:\n\t  application:\n\t    name: spring-cloud-config-server\n\t  cloud:\n\t    config:\n\t      server:\n\t        git:\n\t          uri: https://github.com/hdlxt/springcloud # 配置git仓库的地址\n\t          search-paths: config-repo                     # git仓库地址下的相对地址，可以配置多个，用,分割。\n\t          username:                     # git仓库的账号\n\t          password:           # git仓库的密码\n\t  rabbitmq:\n\t    host: 111.231.xxxx.xx\n\t    port: 5672\n\t    username: guest\n\t    password: guest\n\teureka:\n\t  client:\n\t    serviceUrl:\n\t      defaultZone: http://localhost:8000/eureka/   #注册中心eurka地址\n\tmanagement:\n\t  endpoints:\n\t    web:\n\t      exposure:\n\t       # 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问\n\t        include: bus-refresh\n\t\n\t```\n\t- 主要内容\n\t\t- 添加配置中心文件存放于github\n\t\t- 配置rabbitmq连接信息\n\t\t- 暴露bus-refresh\n\t- github配置文件内容\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117211411126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 仓库中的配置文件会被转换成 Web 接口，访问可以参照以下的规则：\n\t\t - /{application}/{profile}[/{label}]\n\t\t- /{application}-{profile}.yml\n\t\t- /{label}/{application}-{profile}.yml\n\t\t- /{application}-{profile}.properties\n\t\t- /{label}/{application}-{profile}.properties\n\t  - 上面的 URL 会映射 {application}-{profile}.yml 对应的配置文件，其中 {label} 对应 Git 上不同的分支，默认为 master。\n\t\t\n\t\n\t**启动类比较简单,声明是服务、配置中心服务端**\n\t```java\n\t@EnableConfigServer\n\t@EnableDiscoveryClient\n\t@SpringBootApplication\n\tpublic class ConfigServerApplication {\n\t\n\t    public static void main(String[] args) {\n\t        SpringApplication.run(ConfigServerApplication.class, args);\n\t    }\n\t\n\t}\n\t```\n\t到此配置中心服务端完毕。\n\t\n\t####  二、配置中心客户端实现\n\t- 依赖\n\t\t```bash\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t\t    <modelVersion>4.0.0</modelVersion>\n\t\t    <parent>\n\t\t        <groupId>com.lxt</groupId>\n\t\t        <artifactId>springcloud</artifactId>\n\t\t        <version>1.0-SNAPSHOT</version>\n\t\t    </parent>\n\t\t    <groupId>com.lxt</groupId>\n\t\t    <artifactId>config-client</artifactId>\n\t\t    <version>0.0.1-SNAPSHOT</version>\n\t\t    <name>config-client</name>\n\t\t    <description>Demo project for Spring Boot</description>\n\t\t    <dependencies>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-config</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.boot</groupId>\n\t\t            <artifactId>spring-boot-starter-actuator</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t\t        </dependency>\n\t\t        <dependency>\n\t\t            <groupId>org.springframework.cloud</groupId>\n\t\t            <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n\t\t        </dependency>\n\t\t    </dependencies>\n\t\t</project>\n\t\t\n\t\t```\n\t- 配置文件\n\t\t- 关于` bootstrap.yml`和`application.yml`\n\t\t\t- bootstrap.yml（bootstrap.properties） 用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等\t\n\t\t\t- application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。\n\t\t\t- bootstrap.yml 先于 application.yml 加载\n\t\t- bootstrap.yml\n\t\t\t```yml\n\t\t\tserver:\n\t\t\t  port: 8003\n\t\t\tspring:\n\t\t\t  cloud:\n\t\t\t    config:\n\t\t\t      name: lxt-config\n\t\t\t      profile: dev\n\t\t\t      label: master\n\t\t\t      discovery:\n\t\t\t        #开启Config服务发现支持\n\t\t\t        enabled: true\n\t\t\t        #指定server端的name,也就是server端spring.application.name的值\n\t\t\t        service-id: spring-cloud-config-server\n\t\t\teureka:\n\t\t\t  client:\n\t\t\t    service-url:\n\t\t\t      defaultZone: http://localhost:8000/eureka/\n\t\t\t```\n\t \t- application.yml\n\t\t\t```yml\n\t\t\tspring:\n\t\t\t  application:\n\t\t\t    name: spring-cloud-config-client\n\t\t\t  cloud:\n\t\t\t    bus:\n\t\t\t     trace:\n\t\t\t       # 开启消息跟踪事件\n\t\t\t       enabled: true\n\t\t\t  rabbitmq:\n\t\t\t    host: 111.231.29.249\n\t\t\t    port: 5672\n\t\t\t    username: guest\n\t\t\t    password: guest\n\t\t\tmanagement:\n\t\t\t  endpoints:\n\t\t\t    web:\n\t\t\t      exposure:\n\t\t\t        include: refresh\n\t\t\t\n\t\t```\n\t- 主要代码\n\t\t-  核心\n\t\t\t- @EnableDiscoveryClient\n\t\t\t- @RefreshScope:使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n\t\t- 启动类\n\t\t\t```bash\n\t\t\t\n\t\t\t@EnableDiscoveryClient\n\t\t\t@SpringBootApplication\n\t\t\tpublic class ConfigClientApplication {\n\t\t\t\n\t\t\t    public static void main(String[] args) {\n\t\t\t        SpringApplication.run(ConfigClientApplication.class, args);\n\t\t\t    }\n\t\t\t\n\t\t\t}\n\t\t\t```\n\t\t- 测试\n\t\t\t```bash\n\t\t\t/**\n\t\t\t * @author lxt\n\t\t\t * @Copy Right Information: lxt\n\t\t\t * @Project: spring cloud\n\t\t\t * @CreateDate: 2018/12/16 20:04\n\t\t\t * @history Sr Date Modified By Why & What is modified\n\t\t\t * 1.2018/12/16 lxt & new\n\t\t\t */\n\t\t\t@RestController\n\t\t\t@RefreshScope // 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n\t\t\tpublic class HelloController {\n\t\t\t    @Value(\"${lxt.hello}\")\n\t\t\t    private String hello;\n\t\t\t\n\t\t\t    @RequestMapping(\"/hello\")\n\t\t\t    public String from() {\n\t\t\t        return this.hello;\n\t\t\t    }\n\t\t\t}\n\t\t\t```\n\t####  三、整合\n\t **以安装包或者docker方式安装RabbitMQ，启动**![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213514487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t\n\t **配置GitHub Webhooks**\n\t- （可选，云服务器可跳过）内网穿透工具下载[natapp](#https://natapp.cn/)安装和配置（有免费通道），目的可给本机电脑映射一个外网域名，用于配置Webhooks\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111721323258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 配置Webhooks，配置中心服务端需引入`spring-cloud-config-monitor`依赖\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117214212673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t####  四、测试\n\t- 分别启动注册中心、配置中心服务端\n\t- 启动多个客户端\n\t\t- 可通过打jar包形式启动\n\t\t- 也可通过idea添加启动类，指定不同端口启动\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213813171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\t- 修改配置文件，push到github上触发回调`http://t23b4j.natappfree.cc/monitor`,通知配置中心服务端更新配置，服务端以mq形式通过消息总线通知客户端更新配置。\n\t\n\t####  五、相关\n\t- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n\t- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 参考\n\t\t- http://www.ityouknow.com/spring-cloud.html\t \n","slug":"2019-11-15-【Spring Cloud 笔记和总结】六、Spring Cloud Config统一配置中心（Git+Spring Cloud Bus+RabbitMQ+Git WebHook）","published":1,"updated":"2019-11-24T15:21:17.905Z","_id":"ck3d5gy34008ns8vk4bixp1f3","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h4><p>  基于Spring Cloud Config实现统一配置中心，将配置文件存放于Git(GitHub)上，通过Spring Cloud Bus消息总线&amp;RabbitMQ消息中间件进行服务间消息通信。</p>\n<p>  <strong>涉及项目</strong></p>\n<ul>\n<li><p>exureka-server</p>\n</li>\n<li><p>config-server</p>\n</li>\n<li><p>config-client</p>\n<a id=\"more\"></a>\n<p><strong>整体架构图大致如下，使用GitHub Webhooks 触发配置中心刷新配置</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117200225699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>上图来源：<code>http://blog.didispace.com/springcloud7/</code></p>\n<h4 id=\"二、配置中心服务端实现\"><a href=\"#二、配置中心服务端实现\" class=\"headerlink\" title=\"二、配置中心服务端实现\"></a>二、配置中心服务端实现</h4><p><strong>依赖</strong>         </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;config-server&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;config-server&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!--集成Git Webhooks之后，使用/monitor即可实现配置更新，通知其他服务--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-monitor&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-config-server</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      server:</span></span><br><span class=\"line\"><span class=\"attr\">        git:</span></span><br><span class=\"line\"><span class=\"attr\">          uri:</span> <span class=\"attr\">https://github.com/hdlxt/springcloud</span> <span class=\"comment\"># 配置git仓库的地址</span></span><br><span class=\"line\"><span class=\"attr\">          search-paths:</span> <span class=\"string\">config-repo</span>                     <span class=\"comment\"># git仓库地址下的相对地址，可以配置多个，用,分割。</span></span><br><span class=\"line\"><span class=\"attr\">          username:</span>                     <span class=\"comment\"># git仓库的账号</span></span><br><span class=\"line\"><span class=\"attr\">          password:</span>           <span class=\"comment\"># git仓库的密码</span></span><br><span class=\"line\"><span class=\"attr\">  rabbitmq:</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"number\">111.231</span><span class=\"string\">.xxxx.xx</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\"><span class=\"attr\">    username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span>   <span class=\"comment\">#注册中心eurka地址</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\">       <span class=\"comment\"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">bus-refresh</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主要内容</p>\n<ul>\n<li>添加配置中心文件存放于github</li>\n<li>配置rabbitmq连接信息</li>\n<li>暴露bus-refresh</li>\n</ul>\n</li>\n<li>github配置文件内容    <img src=\"https://img-blog.csdnimg.cn/20191117211411126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>仓库中的配置文件会被转换成 Web 接口，访问可以参照以下的规则：<ul>\n<li>/{application}/{profile}[/{label}]<ul>\n<li>/{application}-{profile}.yml</li>\n<li>/{label}/{application}-{profile}.yml</li>\n<li>/{application}-{profile}.properties</li>\n<li>/{label}/{application}-{profile}.properties</li>\n<li>上面的 URL 会映射 {application}-{profile}.yml 对应的配置文件，其中 {label} 对应 Git 上不同的分支，默认为 master。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>**启动类比较简单,声明是服务、配置中心服务端**\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigServer</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n到此配置中心服务端完毕。\n\n####  二、配置中心客户端实现\n- 依赖\n    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;config-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;config-client&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n- 配置文件\n    - 关于` bootstrap.yml`和`application.yml`\n        - bootstrap.yml（bootstrap.properties） 用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等    \n        - application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。\n        - bootstrap.yml 先于 application.yml 加载\n    - bootstrap.yml\n        <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8003</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">lxt-config</span></span><br><span class=\"line\"><span class=\"attr\">      profile:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">      label:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">      discovery:</span></span><br><span class=\"line\">        <span class=\"comment\">#开启Config服务发现支持</span></span><br><span class=\"line\"><span class=\"attr\">        enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">#指定server端的name,也就是server端spring.application.name的值</span></span><br><span class=\"line\"><span class=\"attr\">        service-id:</span> <span class=\"string\">spring-cloud-config-server</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>\n\n     - application.yml\n        <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-config-client</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    bus:</span></span><br><span class=\"line\"><span class=\"attr\">     trace:</span></span><br><span class=\"line\">       <span class=\"comment\"># 开启消息跟踪事件</span></span><br><span class=\"line\"><span class=\"attr\">       enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  rabbitmq:</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"number\">111.231</span><span class=\"number\">.29</span><span class=\"number\">.249</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\"><span class=\"attr\">    username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">refresh</span></span><br></pre></td></tr></table></figure>\n\n- 主要代码\n    -  核心\n        - @EnableDiscoveryClient\n        - @RefreshScope:使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n    - 启动类\n        <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ConfigClientApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ConfigClientApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n    - 测试\n        <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author lxt</span><br><span class=\"line\"> * @Copy Right Information: lxt</span><br><span class=\"line\"> * @Project: spring cloud</span><br><span class=\"line\"> * @CreateDate: 2018/12/16 20:04</span><br><span class=\"line\"> * @<span class=\"built_in\">history</span> Sr Date Modified By Why &amp; What is modified</span><br><span class=\"line\"> * 1.2018/12/16 lxt &amp; new</span><br><span class=\"line\"> */</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RefreshScope // 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"<span class=\"variable\">$&#123;lxt.hello&#125;</span>\"</span>)</span><br><span class=\"line\">    private String hello;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">from</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.hello;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n####  三、整合\n **以安装包或者docker方式安装RabbitMQ，启动**![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213514487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\n **配置GitHub Webhooks**\n- （可选，云服务器可跳过）内网穿透工具下载[natapp](#https://natapp.cn/)安装和配置（有免费通道），目的可给本机电脑映射一个外网域名，用于配置Webhooks\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111721323258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 配置Webhooks，配置中心服务端需引入`spring-cloud-config-monitor`依赖\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117214212673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n####  四、测试\n- 分别启动注册中心、配置中心服务端\n- 启动多个客户端\n    - 可通过打jar包形式启动\n    - 也可通过idea添加启动类，指定不同端口启动\n    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213813171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 修改配置文件，push到github上触发回调`http://t23b4j.natappfree.cc/monitor`,通知配置中心服务端更新配置，服务端以mq形式通过消息总线通知客户端更新配置。\n\n####  五、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n- 参考\n    - http://www.ityouknow.com/spring-cloud.html     \n</code></pre>","site":{"data":{}},"excerpt":"<ul>\n<li><h4 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h4><p>  基于Spring Cloud Config实现统一配置中心，将配置文件存放于Git(GitHub)上，通过Spring Cloud Bus消息总线&amp;RabbitMQ消息中间件进行服务间消息通信。</p>\n<p>  <strong>涉及项目</strong></p>\n<ul>\n<li><p>exureka-server</p>\n</li>\n<li><p>config-server</p>\n</li>\n<li><p>config-client</p>","more":"<p><strong>整体架构图大致如下，使用GitHub Webhooks 触发配置中心刷新配置</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117200225699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>上图来源：<code>http://blog.didispace.com/springcloud7/</code></p>\n<h4 id=\"二、配置中心服务端实现\"><a href=\"#二、配置中心服务端实现\" class=\"headerlink\" title=\"二、配置中心服务端实现\"></a>二、配置中心服务端实现</h4><p><strong>依赖</strong>         </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;config-server&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;config-server&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!--集成Git Webhooks之后，使用/monitor即可实现配置更新，通知其他服务--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-monitor&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-config-server</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      server:</span></span><br><span class=\"line\"><span class=\"attr\">        git:</span></span><br><span class=\"line\"><span class=\"attr\">          uri:</span> <span class=\"attr\">https://github.com/hdlxt/springcloud</span> <span class=\"comment\"># 配置git仓库的地址</span></span><br><span class=\"line\"><span class=\"attr\">          search-paths:</span> <span class=\"string\">config-repo</span>                     <span class=\"comment\"># git仓库地址下的相对地址，可以配置多个，用,分割。</span></span><br><span class=\"line\"><span class=\"attr\">          username:</span>                     <span class=\"comment\"># git仓库的账号</span></span><br><span class=\"line\"><span class=\"attr\">          password:</span>           <span class=\"comment\"># git仓库的密码</span></span><br><span class=\"line\"><span class=\"attr\">  rabbitmq:</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"number\">111.231</span><span class=\"string\">.xxxx.xx</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\"><span class=\"attr\">    username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span>   <span class=\"comment\">#注册中心eurka地址</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\">       <span class=\"comment\"># 2.x手动开启  这个是用来暴露 endpoints 的。由于 endpoints 中会包含很多敏感信息，除了 health 和 info 两个支持 web 访问外，其他的默认不支持 web 访问</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">bus-refresh</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主要内容</p>\n<ul>\n<li>添加配置中心文件存放于github</li>\n<li>配置rabbitmq连接信息</li>\n<li>暴露bus-refresh</li>\n</ul>\n</li>\n<li>github配置文件内容    <img src=\"https://img-blog.csdnimg.cn/20191117211411126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>仓库中的配置文件会被转换成 Web 接口，访问可以参照以下的规则：<ul>\n<li>/{application}/{profile}[/{label}]<ul>\n<li>/{application}-{profile}.yml</li>\n<li>/{label}/{application}-{profile}.yml</li>\n<li>/{application}-{profile}.properties</li>\n<li>/{label}/{application}-{profile}.properties</li>\n<li>上面的 URL 会映射 {application}-{profile}.yml 对应的配置文件，其中 {label} 对应 Git 上不同的分支，默认为 master。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>**启动类比较简单,声明是服务、配置中心服务端**\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigServer</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n到此配置中心服务端完毕。\n\n####  二、配置中心客户端实现\n- 依赖\n    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;config-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;config-client&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project <span class=\"keyword\">for</span> Spring Boot&lt;/description&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n- 配置文件\n    - 关于` bootstrap.yml`和`application.yml`\n        - bootstrap.yml（bootstrap.properties） 用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等    \n        - application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。\n        - bootstrap.yml 先于 application.yml 加载\n    - bootstrap.yml\n        <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8003</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">lxt-config</span></span><br><span class=\"line\"><span class=\"attr\">      profile:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">      label:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">      discovery:</span></span><br><span class=\"line\">        <span class=\"comment\">#开启Config服务发现支持</span></span><br><span class=\"line\"><span class=\"attr\">        enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">#指定server端的name,也就是server端spring.application.name的值</span></span><br><span class=\"line\"><span class=\"attr\">        service-id:</span> <span class=\"string\">spring-cloud-config-server</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure>\n\n     - application.yml\n        <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">spring-cloud-config-client</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    bus:</span></span><br><span class=\"line\"><span class=\"attr\">     trace:</span></span><br><span class=\"line\">       <span class=\"comment\"># 开启消息跟踪事件</span></span><br><span class=\"line\"><span class=\"attr\">       enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  rabbitmq:</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"number\">111.231</span><span class=\"number\">.29</span><span class=\"number\">.249</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\"><span class=\"attr\">    username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\"><span class=\"attr\">  endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">    web:</span></span><br><span class=\"line\"><span class=\"attr\">      exposure:</span></span><br><span class=\"line\"><span class=\"attr\">        include:</span> <span class=\"string\">refresh</span></span><br></pre></td></tr></table></figure>\n\n- 主要代码\n    -  核心\n        - @EnableDiscoveryClient\n        - @RefreshScope:使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中\n    - 启动类\n        <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ConfigClientApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ConfigClientApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n    - 测试\n        <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author lxt</span><br><span class=\"line\"> * @Copy Right Information: lxt</span><br><span class=\"line\"> * @Project: spring cloud</span><br><span class=\"line\"> * @CreateDate: 2018/12/16 20:04</span><br><span class=\"line\"> * @<span class=\"built_in\">history</span> Sr Date Modified By Why &amp; What is modified</span><br><span class=\"line\"> * 1.2018/12/16 lxt &amp; new</span><br><span class=\"line\"> */</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RefreshScope // 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\">    @Value(<span class=\"string\">\"<span class=\"variable\">$&#123;lxt.hello&#125;</span>\"</span>)</span><br><span class=\"line\">    private String hello;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">from</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> this.hello;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n####  三、整合\n **以安装包或者docker方式安装RabbitMQ，启动**![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213514487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n\n **配置GitHub Webhooks**\n- （可选，云服务器可跳过）内网穿透工具下载[natapp](#https://natapp.cn/)安装和配置（有免费通道），目的可给本机电脑映射一个外网域名，用于配置Webhooks\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019111721323258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 配置Webhooks，配置中心服务端需引入`spring-cloud-config-monitor`依赖\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117214212673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n####  四、测试\n- 分别启动注册中心、配置中心服务端\n- 启动多个客户端\n    - 可通过打jar包形式启动\n    - 也可通过idea添加启动类，指定不同端口启动\n    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191117213813171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 修改配置文件，push到github上触发回调`http://t23b4j.natappfree.cc/monitor`,通知配置中心服务端更新配置，服务端以mq形式通过消息总线通知客户端更新配置。\n\n####  五、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n- 参考\n    - http://www.ityouknow.com/spring-cloud.html     \n</code></pre>"},{"title":"【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&Spring Cloud Greenwich.RELEASE）","date":"2019-10-01T12:30:12.000Z","copyright":"true。","_content":"\n今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。\n\n<!--more-->\n\n- 之前的源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 版本\n\t\t- jdk1.8\n\t\t- Spring Boot ：2.1.1.RELEASE\n\t\t- Spring Cloud ： Greenwich.RELEASE\n- 计划\n\t- 以博客笔记形式回顾一遍,以代码实现为主\n\t- 更换其中部分技术\n\n- 项目maven多模块，如下图所示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122210944629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 所有子模块都继承父模块`spring cloud`依赖，如下\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.lxt</groupId>\n    <artifactId>springcloud</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>eureka-server</module>\n        <module>service-provider</module>\n        <module>service-provider1</module>\n        <module>service-consumer</module>\n        <module>service-consumer-hystrix</module>\n        <module>hystrix-dashboard-turbine</module>\n        <module>service-consumer-node01</module>\n        <module>service-consumer-node02</module>\n        <module>config-server</module>\n        <module>config-server1</module>\n        <module>config-client</module>\n        <module>zuul</module>\n        <module>consul-provider</module>\n        <module>consul-consumer</module>\n        <module>zipkin-server</module>\n    </modules>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <java.version>1.8</java.version>\n<!--        <spring-cloud.version>Greenwich.RC1</spring-cloud.version>-->\n        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>\n        <zipkin-version>2.11.8</zipkin-version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-server</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-autoconfigure-ui</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n</project>\n```\n\n- 参考\n\t- 《Spring Cloud和Docker微服务架构实战》\n\t- \t http://www.ityouknow.com/spring-cloud.html","source":"_posts/2019-11-13-【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&Spring Cloud Greenwich.RELEASE）.md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&Spring Cloud Greenwich.RELEASE）\ndate: 2019-10-01 20:30:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 分布式\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n\n---\n\n今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。\n\n<!--more-->\n\n- 之前的源码地址[`传送门`](https://github.com/hdlxt/springcloud)\n\t- 版本\n\t\t- jdk1.8\n\t\t- Spring Boot ：2.1.1.RELEASE\n\t\t- Spring Cloud ： Greenwich.RELEASE\n- 计划\n\t- 以博客笔记形式回顾一遍,以代码实现为主\n\t- 更换其中部分技术\n\n- 项目maven多模块，如下图所示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122210944629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 所有子模块都继承父模块`spring cloud`依赖，如下\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.lxt</groupId>\n    <artifactId>springcloud</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>eureka-server</module>\n        <module>service-provider</module>\n        <module>service-provider1</module>\n        <module>service-consumer</module>\n        <module>service-consumer-hystrix</module>\n        <module>hystrix-dashboard-turbine</module>\n        <module>service-consumer-node01</module>\n        <module>service-consumer-node02</module>\n        <module>config-server</module>\n        <module>config-server1</module>\n        <module>config-client</module>\n        <module>zuul</module>\n        <module>consul-provider</module>\n        <module>consul-consumer</module>\n        <module>zipkin-server</module>\n    </modules>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <java.version>1.8</java.version>\n<!--        <spring-cloud.version>Greenwich.RC1</spring-cloud.version>-->\n        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>\n        <zipkin-version>2.11.8</zipkin-version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-server</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-autoconfigure-ui</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n</project>\n```\n\n- 参考\n\t- 《Spring Cloud和Docker微服务架构实战》\n\t- \t http://www.ityouknow.com/spring-cloud.html","slug":"2019-11-13-【Spring Cloud 笔记和总结】一、写在开头，内容简述（Spring Boot 2.1.1&Spring Cloud Greenwich.RELEASE）","published":1,"updated":"2019-11-24T15:21:20.253Z","_id":"ck3d5gztt008ys8vkz940ucol","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。</p>\n<a id=\"more\"></a>\n<ul>\n<li>之前的源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a><ul>\n<li>版本<ul>\n<li>jdk1.8</li>\n<li>Spring Boot ：2.1.1.RELEASE</li>\n<li>Spring Cloud ： Greenwich.RELEASE</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>计划</p>\n<ul>\n<li>以博客笔记形式回顾一遍,以代码实现为主</li>\n<li>更换其中部分技术</li>\n</ul>\n</li>\n<li><p>项目maven多模块，如下图所示<br><img src=\"https://img-blog.csdnimg.cn/20191122210944629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>所有子模块都继承父模块<code>spring cloud</code>依赖，如下</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;modules&gt;</span><br><span class=\"line\">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class=\"line\">    &lt;/modules&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class=\"line\">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class=\"line\">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;<span class=\"built_in\">test</span>&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;dependencyManagement&gt;</span><br><span class=\"line\">        &lt;dependencies&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">                &lt;<span class=\"built_in\">type</span>&gt;pom&lt;/<span class=\"built_in\">type</span>&gt;</span><br><span class=\"line\">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;/dependencyManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考<ul>\n<li>《Spring Cloud和Docker微服务架构实战》</li>\n<li><a href=\"http://www.ityouknow.com/spring-cloud.html\" target=\"_blank\" rel=\"noopener\">http://www.ityouknow.com/spring-cloud.html</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>今年年初参考大佬的博客初步学习和敲了一遍Spring Cloud，此系列博客，一方面是回顾之前的学习过程，另一方面要巩固和深入学习微服务相关知识。</p>","more":"<ul>\n<li>之前的源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a><ul>\n<li>版本<ul>\n<li>jdk1.8</li>\n<li>Spring Boot ：2.1.1.RELEASE</li>\n<li>Spring Cloud ： Greenwich.RELEASE</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>计划</p>\n<ul>\n<li>以博客笔记形式回顾一遍,以代码实现为主</li>\n<li>更换其中部分技术</li>\n</ul>\n</li>\n<li><p>项目maven多模块，如下图所示<br><img src=\"https://img-blog.csdnimg.cn/20191122210944629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>所有子模块都继承父模块<code>spring cloud</code>依赖，如下</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;modules&gt;</span><br><span class=\"line\">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class=\"line\">    &lt;/modules&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class=\"line\">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class=\"line\">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;<span class=\"built_in\">test</span>&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;dependencyManagement&gt;</span><br><span class=\"line\">        &lt;dependencies&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">                &lt;<span class=\"built_in\">type</span>&gt;pom&lt;/<span class=\"built_in\">type</span>&gt;</span><br><span class=\"line\">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;/dependencyManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考<ul>\n<li>《Spring Cloud和Docker微服务架构实战》</li>\n<li><a href=\"http://www.ityouknow.com/spring-cloud.html\" target=\"_blank\" rel=\"noopener\">http://www.ityouknow.com/spring-cloud.html</a></li>\n</ul>\n</li>\n</ul>"},{"title":"【Spring Cloud 笔记和总结】八、使用 Sleuth和Zipkin进行服务跟踪","date":"2019-11-13T12:30:12.000Z","copyright":"true。","_content":"\n####  一、添加服务跟踪微服务项目zipkin-server\n**父pom添加zipkin相关依赖**\n\n<!--more-->\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.lxt</groupId>\n    <artifactId>springcloud</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>eureka-server</module>\n        <module>service-provider</module>\n        <module>service-provider1</module>\n        <module>service-consumer</module>\n        <module>service-consumer-hystrix</module>\n        <module>hystrix-dashboard-turbine</module>\n        <module>service-consumer-node01</module>\n        <module>service-consumer-node02</module>\n        <module>config-server</module>\n        <module>config-server1</module>\n        <module>config-client</module>\n        <module>zuul</module>\n        <module>consul-provider</module>\n        <module>consul-consumer</module>\n        <module>zipkin-server</module>\n    </modules>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <java.version>1.8</java.version>\n<!--        <spring-cloud.version>Greenwich.RC1</spring-cloud.version>-->\n        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>\n        <zipkin-version>2.11.8</zipkin-version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-server</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-autoconfigure-ui</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n</project>\n```\n**本身pom文件依赖**\n\n```bash\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<!--zipkin中包含spring-cloud-starter-sleuth,无需再次引入-->\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.zipkin.java</groupId>\n    <artifactId>zipkin-server</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.zipkin.java</groupId>\n    <artifactId>zipkin-autoconfigure-ui</artifactId>\n</dependency>\n```\n**配置文件**\n\n```bash\nserver:\n  port: 9411\nspring:\n  application:\n    name: zipkin-server\neureka:\n  instance:\n    hostname: localhost\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8000/eureka/\nmanagement:\n  metrics:\n    web:\n      server:\n        auto-time-requests: false\n\n```\n**启动类添加@EnableZipkinServer**\n```bash\npackage com.lxt.zipkin;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport zipkin2.server.internal.EnableZipkinServer;\n\n@SpringBootApplication\n@EnableZipkinServer\npublic class ZipkinServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ZipkinServerApplication.class, args);\n    }\n\n}\n```\n####  二、改造service-consumer、service-provider和zuul\n**分别添加依赖**\n\n```bash\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-zipkin</artifactId>\n        </dependency>\n```\n**配置文件分别添加**\n\n```yml\n  #重点\n  zipkin:\n    #        base-url:当你设置sleuth-cli收集信息后通过http传输到zinkin-server时，需要在这里配置\n    base-url: http://localhost:9411\n    enabled: true\n  sleuth:\n    sampler:\n      #收集追踪信息的比率，如果是0.1则表示只记录10%的追踪数据，如果要全部追踪，设置为1（实际场景不推荐，因为会造成不小的性能消耗）\n      probability: 1.0\n```\n**注意：添加完毕依赖之后，刷新maven。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122230730371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**运行测试**\n- 分别启动注册中心、网关、服务跟踪、服务提供和服务消费者\n- 访问服务跟踪界面`http://localhost:9411`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122231051856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 浏览器访问`http://localhost:8006/spring-cloud-pr/hello/1?token=2`,查看服务跟踪界面\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019112223112770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122231138592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n####  三、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)","source":"_posts/2019-11-13-【Spring Cloud 笔记和总结】八、使用 Sleuth和Zipkin进行服务跟踪.md","raw":"---\ntitle: 【Spring Cloud 笔记和总结】八、使用 Sleuth和Zipkin进行服务跟踪\ndate: 2019-11-13 20:30:12\ntags:\n- Spring Boot\n- Spring Cloud \n- 微服务\n- 分布式\n- Sleuth\n- Zipkin\n- 服务跟踪\ncategories:\n- Spring\n- Spring Cloud \ncopyright: true。\n---\n\n####  一、添加服务跟踪微服务项目zipkin-server\n**父pom添加zipkin相关依赖**\n\n<!--more-->\n\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.lxt</groupId>\n    <artifactId>springcloud</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>eureka-server</module>\n        <module>service-provider</module>\n        <module>service-provider1</module>\n        <module>service-consumer</module>\n        <module>service-consumer-hystrix</module>\n        <module>hystrix-dashboard-turbine</module>\n        <module>service-consumer-node01</module>\n        <module>service-consumer-node02</module>\n        <module>config-server</module>\n        <module>config-server1</module>\n        <module>config-client</module>\n        <module>zuul</module>\n        <module>consul-provider</module>\n        <module>consul-consumer</module>\n        <module>zipkin-server</module>\n    </modules>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <java.version>1.8</java.version>\n<!--        <spring-cloud.version>Greenwich.RC1</spring-cloud.version>-->\n        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>\n        <zipkin-version>2.11.8</zipkin-version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-server</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n            <dependency>\n                <groupId>io.zipkin.java</groupId>\n                <artifactId>zipkin-autoconfigure-ui</artifactId>\n                <version>${zipkin-version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n</project>\n```\n**本身pom文件依赖**\n\n```bash\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<!--zipkin中包含spring-cloud-starter-sleuth,无需再次引入-->\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.zipkin.java</groupId>\n    <artifactId>zipkin-server</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.zipkin.java</groupId>\n    <artifactId>zipkin-autoconfigure-ui</artifactId>\n</dependency>\n```\n**配置文件**\n\n```bash\nserver:\n  port: 9411\nspring:\n  application:\n    name: zipkin-server\neureka:\n  instance:\n    hostname: localhost\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8000/eureka/\nmanagement:\n  metrics:\n    web:\n      server:\n        auto-time-requests: false\n\n```\n**启动类添加@EnableZipkinServer**\n```bash\npackage com.lxt.zipkin;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport zipkin2.server.internal.EnableZipkinServer;\n\n@SpringBootApplication\n@EnableZipkinServer\npublic class ZipkinServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ZipkinServerApplication.class, args);\n    }\n\n}\n```\n####  二、改造service-consumer、service-provider和zuul\n**分别添加依赖**\n\n```bash\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-zipkin</artifactId>\n        </dependency>\n```\n**配置文件分别添加**\n\n```yml\n  #重点\n  zipkin:\n    #        base-url:当你设置sleuth-cli收集信息后通过http传输到zinkin-server时，需要在这里配置\n    base-url: http://localhost:9411\n    enabled: true\n  sleuth:\n    sampler:\n      #收集追踪信息的比率，如果是0.1则表示只记录10%的追踪数据，如果要全部追踪，设置为1（实际场景不推荐，因为会造成不小的性能消耗）\n      probability: 1.0\n```\n**注意：添加完毕依赖之后，刷新maven。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122230730371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n**运行测试**\n- 分别启动注册中心、网关、服务跟踪、服务提供和服务消费者\n- 访问服务跟踪界面`http://localhost:9411`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122231051856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n- 浏览器访问`http://localhost:8006/spring-cloud-pr/hello/1?token=2`,查看服务跟踪界面\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019112223112770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191122231138592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70)\n####  三、相关\n- 父模块介绍[`传送门`](https://blog.csdn.net/qq_25283709/article/category/9462287)\n- 源码地址[`传送门`](https://github.com/hdlxt/springcloud)","slug":"2019-11-13-【Spring Cloud 笔记和总结】八、使用 Sleuth和Zipkin进行服务跟踪","published":1,"updated":"2019-11-24T15:21:22.122Z","_id":"ck3d5h1av0095s8vkeia910u3","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一、添加服务跟踪微服务项目zipkin-server\"><a href=\"#一、添加服务跟踪微服务项目zipkin-server\" class=\"headerlink\" title=\"一、添加服务跟踪微服务项目zipkin-server\"></a>一、添加服务跟踪微服务项目zipkin-server</h4><p><strong>父pom添加zipkin相关依赖</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;modules&gt;</span><br><span class=\"line\">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class=\"line\">    &lt;/modules&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class=\"line\">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class=\"line\">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;<span class=\"built_in\">test</span>&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;dependencyManagement&gt;</span><br><span class=\"line\">        &lt;dependencies&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">                &lt;<span class=\"built_in\">type</span>&gt;pom&lt;/<span class=\"built_in\">type</span>&gt;</span><br><span class=\"line\">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;/dependencyManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>本身pom文件依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--zipkin中包含spring-cloud-starter-sleuth,无需再次引入--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 9411</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: zipkin-server</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    hostname: localhost</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http://localhost:8000/eureka/</span><br><span class=\"line\">management:</span><br><span class=\"line\">  metrics:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        auto-time-requests: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><strong>启动类添加@EnableZipkinServer</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lxt.zipkin;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import zipkin2.server.internal.EnableZipkinServer;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableZipkinServer</span><br><span class=\"line\">public class ZipkinServerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ZipkinServerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"二、改造service-consumer、service-provider和zuul\"><a href=\"#二、改造service-consumer、service-provider和zuul\" class=\"headerlink\" title=\"二、改造service-consumer、service-provider和zuul\"></a>二、改造service-consumer、service-provider和zuul</h4><p><strong>分别添加依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件分别添加</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#重点</span></span><br><span class=\"line\"><span class=\"attr\">zipkin:</span></span><br><span class=\"line\">  <span class=\"comment\">#        base-url:当你设置sleuth-cli收集信息后通过http传输到zinkin-server时，需要在这里配置</span></span><br><span class=\"line\"><span class=\"attr\">  base-url:</span> <span class=\"attr\">http://localhost:9411</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">sleuth:</span></span><br><span class=\"line\"><span class=\"attr\">  sampler:</span></span><br><span class=\"line\">    <span class=\"comment\">#收集追踪信息的比率，如果是0.1则表示只记录10%的追踪数据，如果要全部追踪，设置为1（实际场景不推荐，因为会造成不小的性能消耗）</span></span><br><span class=\"line\"><span class=\"attr\">    probability:</span> <span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：添加完毕依赖之后，刷新maven。</strong><br><img src=\"https://img-blog.csdnimg.cn/20191122230730371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>运行测试</strong></p>\n<ul>\n<li>分别启动注册中心、网关、服务跟踪、服务提供和服务消费者</li>\n<li>访问服务跟踪界面<code>http://localhost:9411</code><br><img src=\"https://img-blog.csdnimg.cn/20191122231051856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>浏览器访问<code>http://localhost:8006/spring-cloud-pr/hello/1?token=2</code>,查看服务跟踪界面<br><img src=\"https://img-blog.csdnimg.cn/2019112223112770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20191122231138592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><h4 id=\"三、相关\"><a href=\"#三、相关\" class=\"headerlink\" title=\"三、相关\"></a>三、相关</h4></li>\n<li>父模块介绍<a href=\"https://blog.csdn.net/qq_25283709/article/category/9462287\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n<li>源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"一、添加服务跟踪微服务项目zipkin-server\"><a href=\"#一、添加服务跟踪微服务项目zipkin-server\" class=\"headerlink\" title=\"一、添加服务跟踪微服务项目zipkin-server\"></a>一、添加服务跟踪微服务项目zipkin-server</h4><p><strong>父pom添加zipkin相关依赖</strong></p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lxt&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\">    &lt;modules&gt;</span><br><span class=\"line\">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-provider1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-hystrix&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;hystrix-dashboard-turbine&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node01&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;service-consumer-node02&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-server1&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;config-client&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zuul&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-provider&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;consul-consumer&lt;/module&gt;</span><br><span class=\"line\">        &lt;module&gt;zipkin-server&lt;/module&gt;</span><br><span class=\"line\">    &lt;/modules&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">&lt;!--        &lt;spring-cloud.version&gt;Greenwich.RC1&lt;/spring-cloud.version&gt;--&gt;</span><br><span class=\"line\">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class=\"line\">        &lt;zipkin-version&gt;2.11.8&lt;/zipkin-version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;<span class=\"built_in\">test</span>&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;dependencyManagement&gt;</span><br><span class=\"line\">        &lt;dependencies&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">                &lt;<span class=\"built_in\">type</span>&gt;pom&lt;/<span class=\"built_in\">type</span>&gt;</span><br><span class=\"line\">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;<span class=\"variable\">$&#123;zipkin-version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;/dependencyManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>本身pom文件依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--zipkin中包含spring-cloud-starter-sleuth,无需再次引入--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 9411</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: zipkin-server</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    hostname: localhost</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http://localhost:8000/eureka/</span><br><span class=\"line\">management:</span><br><span class=\"line\">  metrics:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        auto-time-requests: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><strong>启动类添加@EnableZipkinServer</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lxt.zipkin;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import zipkin2.server.internal.EnableZipkinServer;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableZipkinServer</span><br><span class=\"line\">public class ZipkinServerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ZipkinServerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"二、改造service-consumer、service-provider和zuul\"><a href=\"#二、改造service-consumer、service-provider和zuul\" class=\"headerlink\" title=\"二、改造service-consumer、service-provider和zuul\"></a>二、改造service-consumer、service-provider和zuul</h4><p><strong>分别添加依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件分别添加</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#重点</span></span><br><span class=\"line\"><span class=\"attr\">zipkin:</span></span><br><span class=\"line\">  <span class=\"comment\">#        base-url:当你设置sleuth-cli收集信息后通过http传输到zinkin-server时，需要在这里配置</span></span><br><span class=\"line\"><span class=\"attr\">  base-url:</span> <span class=\"attr\">http://localhost:9411</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">sleuth:</span></span><br><span class=\"line\"><span class=\"attr\">  sampler:</span></span><br><span class=\"line\">    <span class=\"comment\">#收集追踪信息的比率，如果是0.1则表示只记录10%的追踪数据，如果要全部追踪，设置为1（实际场景不推荐，因为会造成不小的性能消耗）</span></span><br><span class=\"line\"><span class=\"attr\">    probability:</span> <span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：添加完毕依赖之后，刷新maven。</strong><br><img src=\"https://img-blog.csdnimg.cn/20191122230730371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>运行测试</strong></p>\n<ul>\n<li>分别启动注册中心、网关、服务跟踪、服务提供和服务消费者</li>\n<li>访问服务跟踪界面<code>http://localhost:9411</code><br><img src=\"https://img-blog.csdnimg.cn/20191122231051856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>浏览器访问<code>http://localhost:8006/spring-cloud-pr/hello/1?token=2</code>,查看服务跟踪界面<br><img src=\"https://img-blog.csdnimg.cn/2019112223112770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20191122231138592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1MjgzNzA5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><h4 id=\"三、相关\"><a href=\"#三、相关\" class=\"headerlink\" title=\"三、相关\"></a>三、相关</h4></li>\n<li>父模块介绍<a href=\"https://blog.csdn.net/qq_25283709/article/category/9462287\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n<li>源码地址<a href=\"https://github.com/hdlxt/springcloud\" target=\"_blank\" rel=\"noopener\"><code>传送门</code></a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3d4fgck0000ikvk1nvd81us","category_id":"ck3d4fgdi0004ikvkit8485bi","_id":"ck3d4fgf9000fikvk44z2iyfk"},{"post_id":"ck3d4fgf3000eikvk8kkq066i","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d4fgff000jikvkbzwnhap4"},{"post_id":"ck3d4fgd30002ikvk45q612oy","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d4fgfr000mikvkdhow35z5"},{"post_id":"ck3d4fgdu0006ikvkqcf2s6qd","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d4fgfw000oikvkjeupu2vd"},{"post_id":"ck3d4fgec0008ikvkhxl4a8yn","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d4fgg0000rikvkzf35ktmi"},{"post_id":"ck3d4r6lx003ss8vkmr6lg7cz","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d4r6m3003vs8vkgykdnfdm"},{"post_id":"ck3d4r6lx003ss8vkmr6lg7cz","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d4r6m4003xs8vk3uvzjnlb"},{"post_id":"ck3d4w1370043s8vkzkod6jxu","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d4w13m0046s8vkzkq0yfth"},{"post_id":"ck3d4w1370043s8vkzkod6jxu","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d4w13n0048s8vklsz77by7"},{"post_id":"ck3d4yukn004cs8vkpioytdfu","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d4yukq004fs8vk5jqv04he"},{"post_id":"ck3d4yukn004cs8vkpioytdfu","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d4yukr004hs8vk8ds6ujoi"},{"post_id":"ck3d50yy5004us8vkg3tpdfid","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d50yya004xs8vk9blu183z"},{"post_id":"ck3d50yy5004us8vkg3tpdfid","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d50yyb004zs8vkn3f5mzre"},{"post_id":"ck3d57scu005ms8vk04hrw73m","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d57sd4005ps8vkgokl3mf1"},{"post_id":"ck3d57scu005ms8vk04hrw73m","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d57sd6005rs8vkygsdsagj"},{"post_id":"ck3d57vz40064s8vkvdky5q51","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d57vza0067s8vktwcaylbc"},{"post_id":"ck3d57vz40064s8vkvdky5q51","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d57vzc0069s8vkxoxv14wx"},{"post_id":"ck3d58tf0006ps8vkggtjg0b4","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d58tf3006ss8vko6r1zo24"},{"post_id":"ck3d58tf0006ps8vkggtjg0b4","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d58tf4006us8vkvi37s7x7"},{"post_id":"ck3d5dbbr007ds8vkq0ekpg6o","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d5dbc3007gs8vkl6bxeeeq"},{"post_id":"ck3d5dbbr007ds8vkq0ekpg6o","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d5dbc6007is8vknptzc8l3"},{"post_id":"ck3d5dr700087s8vkvjktclfs","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d5dr72008as8vkgg9e8xac"},{"post_id":"ck3d5dr700087s8vkvjktclfs","category_id":"ck3d5e8x7008hs8vkoy8jzvy4","_id":"ck3d5e8x7008is8vkdjkg8hl9"},{"post_id":"ck3d5gy34008ns8vk4bixp1f3","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d5gy4j008qs8vkejmxfyii"},{"post_id":"ck3d5gy34008ns8vk4bixp1f3","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d5gy4k008ss8vkw152f51h"},{"post_id":"ck3d5gztt008ys8vkz940ucol","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d5gzv10091s8vkb7kdvonz"},{"post_id":"ck3d5gztt008ys8vkz940ucol","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d5gzv20093s8vknuaeiao8"},{"post_id":"ck3d5h1av0095s8vkeia910u3","category_id":"ck3d4fgeu000bikvk5gimcdrq","_id":"ck3d5h1b20098s8vkubg6kymp"},{"post_id":"ck3d5h1av0095s8vkeia910u3","category_id":"ck3d4jx590004s8vkn711m6ym","_id":"ck3d5h1b3009as8vko3h57f5d"}],"PostTag":[{"post_id":"ck3d4fgck0000ikvk1nvd81us","tag_id":"ck3d4fgds0005ikvkwfh5c1t5","_id":"ck3d4fgew000dikvkoytnp391"},{"post_id":"ck3d4fgd30002ikvk45q612oy","tag_id":"ck3d4fgeu000cikvkoqgidnpt","_id":"ck3d4fgff000iikvke358xvde"},{"post_id":"ck3d4fgdu0006ikvkqcf2s6qd","tag_id":"ck3d4fgeu000cikvkoqgidnpt","_id":"ck3d4fgft000nikvk3jw318a9"},{"post_id":"ck3d4fgec0008ikvkhxl4a8yn","tag_id":"ck3d4fgeu000cikvkoqgidnpt","_id":"ck3d4fgfz000qikvk25dpgz4w"},{"post_id":"ck3d4fgf3000eikvk8kkq066i","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d4fgg4000uikvka578xsix"},{"post_id":"ck3d4fgf3000eikvk8kkq066i","tag_id":"ck3d4fgg0000sikvkcmjgua0r","_id":"ck3d4fgg4000vikvko9ztlzlq"},{"post_id":"ck3d4fgf3000eikvk8kkq066i","tag_id":"ck3d4fgg1000tikvkzdg3tch5","_id":"ck3d4fgg5000wikvkzqiha1sp"},{"post_id":"ck3d4r6lx003ss8vkmr6lg7cz","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d4r6m2003ts8vknjp1j6np"},{"post_id":"ck3d4r6lx003ss8vkmr6lg7cz","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d4r6m3003us8vklrynz42z"},{"post_id":"ck3d4r6lx003ss8vkmr6lg7cz","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d4r6m4003ws8vkjs4tb1jm"},{"post_id":"ck3d4r6lx003ss8vkmr6lg7cz","tag_id":"ck3d4k3xd0007s8vk4sl12lc2","_id":"ck3d4r6m5003ys8vkibq23uc9"},{"post_id":"ck3d4r6lx003ss8vkmr6lg7cz","tag_id":"ck3d4tqvi003zs8vkyxcd10to","_id":"ck3d4tqvk0041s8vkrvxnaj7a"},{"post_id":"ck3d4r6lx003ss8vkmr6lg7cz","tag_id":"ck3d4tqvj0040s8vka0koz0gx","_id":"ck3d4tqvk0042s8vkwjifiv5m"},{"post_id":"ck3d4w1370043s8vkzkod6jxu","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d4w13l0044s8vkc6ec0r42"},{"post_id":"ck3d4w1370043s8vkzkod6jxu","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d4w13m0045s8vka3604hq1"},{"post_id":"ck3d4w1370043s8vkzkod6jxu","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d4w13n0047s8vk7w12d0h9"},{"post_id":"ck3d4w1370043s8vkzkod6jxu","tag_id":"ck3d4y1jb004as8vkn66wv2lr","_id":"ck3d4y1jc004bs8vkg60l61gt"},{"post_id":"ck3d4yukn004cs8vkpioytdfu","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d4yukp004ds8vk21x3nyr8"},{"post_id":"ck3d4yukn004cs8vkpioytdfu","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d4yukq004es8vknbpzi612"},{"post_id":"ck3d4yukn004cs8vkpioytdfu","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d4yukr004gs8vk540mg0my"},{"post_id":"ck3d4yukn004cs8vkpioytdfu","tag_id":"ck3d4k3xd0007s8vk4sl12lc2","_id":"ck3d4yukr004is8vkmo66v6rw"},{"post_id":"ck3d4yukn004cs8vkpioytdfu","tag_id":"ck3d50jip004qs8vkxdulclbi","_id":"ck3d50jis004ss8vkgk17a4f5"},{"post_id":"ck3d4yukn004cs8vkpioytdfu","tag_id":"ck3d50jiq004rs8vkg467z076","_id":"ck3d50jit004ts8vknqqej7t1"},{"post_id":"ck3d50yy5004us8vkg3tpdfid","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d50yy9004vs8vk2hv8s0zx"},{"post_id":"ck3d50yy5004us8vkg3tpdfid","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d50yya004ws8vkx73q34js"},{"post_id":"ck3d50yy5004us8vkg3tpdfid","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d50yyb004ys8vk1672pll1"},{"post_id":"ck3d50yy5004us8vkg3tpdfid","tag_id":"ck3d4k3xd0007s8vk4sl12lc2","_id":"ck3d50yyb0050s8vkklbp72fx"},{"post_id":"ck3d50yy5004us8vkg3tpdfid","tag_id":"ck3d52eig0051s8vk9z2o4a9c","_id":"ck3d52eih0052s8vkmmdtd1lk"},{"post_id":"ck3d50yy5004us8vkg3tpdfid","tag_id":"ck3d52hdg0053s8vkwhuxpl2e","_id":"ck3d52hdh0054s8vkwhzf7y0j"},{"post_id":"ck3d50yy5004us8vkg3tpdfid","tag_id":"ck3d52kll0055s8vk400vqw21","_id":"ck3d52klm0056s8vk24lqfivr"},{"post_id":"ck3d57scu005ms8vk04hrw73m","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d57sd2005ns8vk5h4090aj"},{"post_id":"ck3d57scu005ms8vk04hrw73m","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d57sd3005os8vk870482gc"},{"post_id":"ck3d57scu005ms8vk04hrw73m","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d57sd5005qs8vkvbjhyyqz"},{"post_id":"ck3d57scu005ms8vk04hrw73m","tag_id":"ck3d4k3xd0007s8vk4sl12lc2","_id":"ck3d57sd6005ss8vkmylij9qr"},{"post_id":"ck3d57scu005ms8vk04hrw73m","tag_id":"ck3d56e8r005es8vkaf5euehn","_id":"ck3d57sd7005ts8vkscb47gid"},{"post_id":"ck3d57scu005ms8vk04hrw73m","tag_id":"ck3d56rhe005gs8vkfhbq4087","_id":"ck3d57sd8005us8vkzriyb2pa"},{"post_id":"ck3d57scu005ms8vk04hrw73m","tag_id":"ck3d56rhf005hs8vk949ybjij","_id":"ck3d57sd8005vs8vkmwqdio05"},{"post_id":"ck3d57scu005ms8vk04hrw73m","tag_id":"ck3d56vnn005ks8vkswos8eaj","_id":"ck3d57sd8005ws8vkzxoivh18"},{"post_id":"ck3d57vz40064s8vkvdky5q51","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d57vz80065s8vkrz7yglmx"},{"post_id":"ck3d57vz40064s8vkvdky5q51","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d57vz90066s8vkwv52lye0"},{"post_id":"ck3d57vz40064s8vkvdky5q51","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d57vzb0068s8vkv3or32t6"},{"post_id":"ck3d57vz40064s8vkvdky5q51","tag_id":"ck3d4k3xd0007s8vk4sl12lc2","_id":"ck3d57vzd006as8vk1eu6qskx"},{"post_id":"ck3d58tf0006ps8vkggtjg0b4","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d58tf2006qs8vk31ah65v4"},{"post_id":"ck3d58tf0006ps8vkggtjg0b4","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d58tf3006rs8vkoqn4tma3"},{"post_id":"ck3d58tf0006ps8vkggtjg0b4","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d58tf3006ts8vk452913wu"},{"post_id":"ck3d58tf0006ps8vkggtjg0b4","tag_id":"ck3d4k3xd0007s8vk4sl12lc2","_id":"ck3d58tf4006vs8vkmsnoxjs0"},{"post_id":"ck3d58tf0006ps8vkggtjg0b4","tag_id":"ck3d596ci006ws8vkevsefyi2","_id":"ck3d596ck006xs8vk2np4iiqj"},{"post_id":"ck3d58tf0006ps8vkggtjg0b4","tag_id":"ck3d59cqn006ys8vkssgd76a0","_id":"ck3d59cqn006zs8vkao17f8e9"},{"post_id":"ck3d5dbbr007ds8vkq0ekpg6o","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d5dbbx007es8vkvzezv3d5"},{"post_id":"ck3d5dbbr007ds8vkq0ekpg6o","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d5dbc0007fs8vkhhgs84bd"},{"post_id":"ck3d5dbbr007ds8vkq0ekpg6o","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d5dbc6007hs8vkfbqqu2lu"},{"post_id":"ck3d5dbbr007ds8vkq0ekpg6o","tag_id":"ck3d4k3xd0007s8vk4sl12lc2","_id":"ck3d5dbc8007js8vktlebhtz5"},{"post_id":"ck3d5dbbr007ds8vkq0ekpg6o","tag_id":"ck3d5brkd0077s8vk6rxm3y5e","_id":"ck3d5dbc9007ks8vk3vsl69s6"},{"post_id":"ck3d5dbbr007ds8vkq0ekpg6o","tag_id":"ck3d5brke0078s8vkg4uytxpl","_id":"ck3d5dbc9007ls8vkapr36k2s"},{"post_id":"ck3d5dbbr007ds8vkq0ekpg6o","tag_id":"ck3d5brke0079s8vkam21ybua","_id":"ck3d5dbc9007ms8vkxab6cmid"},{"post_id":"ck3d5dr700087s8vkvjktclfs","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d5dr720088s8vk3nen5xkn"},{"post_id":"ck3d5dr700087s8vkvjktclfs","tag_id":"ck3d5em95008js8vkloggn5qo","_id":"ck3d5em97008ls8vk41ohczwi"},{"post_id":"ck3d5dr700087s8vkvjktclfs","tag_id":"ck3d5em96008ks8vkzcjpt7kc","_id":"ck3d5em97008ms8vk1fvgec14"},{"post_id":"ck3d5gy34008ns8vk4bixp1f3","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d5gy4b008os8vkgrphbv10"},{"post_id":"ck3d5gy34008ns8vk4bixp1f3","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d5gy4f008ps8vklimq8aes"},{"post_id":"ck3d5gy34008ns8vk4bixp1f3","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d5gy4j008rs8vkb74ipgdq"},{"post_id":"ck3d5gy34008ns8vk4bixp1f3","tag_id":"ck3d4k3xd0007s8vk4sl12lc2","_id":"ck3d5gy59008ts8vk7m3ybq7d"},{"post_id":"ck3d5gy34008ns8vk4bixp1f3","tag_id":"ck3d56e8r005es8vkaf5euehn","_id":"ck3d5gy5b008us8vka7ab0b5a"},{"post_id":"ck3d5gy34008ns8vk4bixp1f3","tag_id":"ck3d56rhe005gs8vkfhbq4087","_id":"ck3d5gy5c008vs8vk4dhr1kx4"},{"post_id":"ck3d5gy34008ns8vk4bixp1f3","tag_id":"ck3d56rhf005hs8vk949ybjij","_id":"ck3d5gy5c008ws8vk2jl88e9x"},{"post_id":"ck3d5gy34008ns8vk4bixp1f3","tag_id":"ck3d56vnn005ks8vkswos8eaj","_id":"ck3d5gy5e008xs8vkwuhfdjy7"},{"post_id":"ck3d5gztt008ys8vkz940ucol","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d5gzv1008zs8vkfpwx5cdw"},{"post_id":"ck3d5gztt008ys8vkz940ucol","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d5gzv10090s8vk78pgrika"},{"post_id":"ck3d5gztt008ys8vkz940ucol","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d5gzv10092s8vkmwlc0cll"},{"post_id":"ck3d5gztt008ys8vkz940ucol","tag_id":"ck3d4k3xd0007s8vk4sl12lc2","_id":"ck3d5gzv20094s8vkcoxuucse"},{"post_id":"ck3d5h1av0095s8vkeia910u3","tag_id":"ck3d4fgfx000pikvk5ueu20u9","_id":"ck3d5h1b10096s8vkn40qk42b"},{"post_id":"ck3d5h1av0095s8vkeia910u3","tag_id":"ck3d4isne0000s8vkvx24ceyd","_id":"ck3d5h1b20097s8vkdsefpwk4"},{"post_id":"ck3d5h1av0095s8vkeia910u3","tag_id":"ck3d4k3x80006s8vkv411o8nf","_id":"ck3d5h1b30099s8vk1apmwq73"},{"post_id":"ck3d5h1av0095s8vkeia910u3","tag_id":"ck3d4k3xd0007s8vk4sl12lc2","_id":"ck3d5h1b4009bs8vkg8u9x6j3"},{"post_id":"ck3d5h1av0095s8vkeia910u3","tag_id":"ck3d5brkd0077s8vk6rxm3y5e","_id":"ck3d5h1b5009cs8vkqhfc6igs"},{"post_id":"ck3d5h1av0095s8vkeia910u3","tag_id":"ck3d5brke0078s8vkg4uytxpl","_id":"ck3d5h1b6009ds8vk5iewtwdw"},{"post_id":"ck3d5h1av0095s8vkeia910u3","tag_id":"ck3d5brke0079s8vkam21ybua","_id":"ck3d5h1b7009es8vkht5ck877"}],"Tag":[{"name":"MarkDown","_id":"ck3d4fgds0005ikvkwfh5c1t5"},{"name":"Spring Data JPA","_id":"ck3d4fgeu000cikvkoqgidnpt"},{"name":"Spring Boot","_id":"ck3d4fgfx000pikvk5ueu20u9"},{"name":"极验验证","_id":"ck3d4fgg0000sikvkcmjgua0r"},{"name":"滑动验证码","_id":"ck3d4fgg1000tikvkzdg3tch5"},{"name":"Spring Cloud","_id":"ck3d4isne0000s8vkvx24ceyd"},{"name":"微服务","_id":"ck3d4k3x80006s8vkv411o8nf"},{"name":"分布式","_id":"ck3d4k3xd0007s8vk4sl12lc2"},{"name":"注册中心","_id":"ck3d4tqvi003zs8vkyxcd10to"},{"name":"Eureka","_id":"ck3d4tqvj0040s8vka0koz0gx"},{"name":"负载均衡","_id":"ck3d4y1jb004as8vkn66wv2lr"},{"name":"Hystrix","_id":"ck3d50jip004qs8vkxdulclbi"},{"name":"熔断器","_id":"ck3d50jiq004rs8vkg467z076"},{"name":"Hystrix Dashboar","_id":"ck3d52eig0051s8vk9z2o4a9c"},{"name":"Turbine","_id":"ck3d52hdg0053s8vkwhuxpl2e"},{"name":"监控","_id":"ck3d52kll0055s8vk400vqw21"},{"name":"统一配置中心","_id":"ck3d56e8r005es8vkaf5euehn"},{"name":"Spring Cloud Bus","_id":"ck3d56rhe005gs8vkfhbq4087"},{"name":"RabbitMQ","_id":"ck3d56rhf005hs8vk949ybjij"},{"name":"Git WebHook","_id":"ck3d56vnn005ks8vkswos8eaj"},{"name":"Zuul","_id":"ck3d596ci006ws8vkevsefyi2"},{"name":"网关","_id":"ck3d59cqn006ys8vkssgd76a0"},{"name":"Sleuth","_id":"ck3d5brkd0077s8vk6rxm3y5e"},{"name":"Zipkin","_id":"ck3d5brke0078s8vkg4uytxpl"},{"name":"服务跟踪","_id":"ck3d5brke0079s8vkam21ybua"},{"name":"自动装备","_id":"ck3d5em95008js8vkloggn5qo"},{"name":"核心","_id":"ck3d5em96008ks8vkzcjpt7kc"}]}}