{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/20190120/jpa-entity.png","path":"images/20190120/jpa-entity.png","modified":0,"renderable":0},{"_id":"source/images/20190101/title.png","path":"images/20190101/title.png","modified":0,"renderable":0},{"_id":"source/images/20190120/exception.png","path":"images/20190120/exception.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next-1.png","path":"images/favicon-16x16-next-1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next-2.png","path":"images/favicon-32x32-next-2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/20190124/demo.png","path":"images/20190124/demo.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b1b79292dd286296c89c3c9ec1d73924fc761130","modified":1546829974006},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1548159544760},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1548159544760},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1548159544775},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1548159544760},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1548159544775},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1548159544775},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1548159544775},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1548159544775},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1548159544775},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1548159544775},{"_id":"themes/next/README.cn.md","hash":"b764aae78ffa561a9a68fdee4c6f21c3ce260fbb","modified":1548159544775},{"_id":"themes/next/_config.yml","hash":"ff4fb3d7687329aad0c6ef8585b86cbe14b90510","modified":1548159544775},{"_id":"themes/next/README.md","hash":"4e276fb9a3c31f1259df3ea9a4b92f4a8d72714d","modified":1548159544775},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1548159544791},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1548159544791},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1548159544885},{"_id":"source/images/avatar.jpg","hash":"2656eb86cb737ff77ea089df25db7f0ee9c530ce","modified":1548159855607},{"_id":"source/_posts/Java8 Optional学习.md","hash":"21651ac6a61d669bfb52c838f77b5c4300550e5b","modified":1548159544682},{"_id":"source/_posts/MarkDown回顾与熟悉.md","hash":"07c5273b36c85d5f92e1e39221687a44a7f01ffc","modified":1548159544682},{"_id":"source/_posts/Spring Data JPA getOne和findOne区别.md","hash":"9820db8dcafd9eea2646ad2856e4d978d159f201","modified":1548159544682},{"_id":"source/_posts/Spring Data JPA 2.0X版本之后findOne方法被findById方法替换.md","hash":"e2ca3ca07edbdcf2d551ee217f6291f5dd02da9c","modified":1548159544682},{"_id":"source/_posts/Spring Data JPA 1.0x版本中getOne和findOne区别.md","hash":"9820db8dcafd9eea2646ad2856e4d978d159f201","modified":1548159544682},{"_id":"source/_posts/Spring Data JPA实体的生命周期总结.md","hash":"3fbb0129b2f17878bdd92985b01110b373b7fd81","modified":1548435510571},{"_id":"source/about/index.md","hash":"a4fb271360f70c8a295d84aba24f1e08bd6c37b4","modified":1548159544682},{"_id":"source/categories/index.md","hash":"b057a5f539b95664fccd005f37018f8bf5ba8a79","modified":1548159544682},{"_id":"source/tags/index.md","hash":"c28183916c8b76c173abee698a383f28fe3b0927","modified":1548159544682},{"_id":"source/top/index.md","hash":"627fc4e7e78c26dc6dfd66af77cd37202caf83ad","modified":1548159544682},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1548159544775},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1548159544885},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1548159544885},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1548159544775},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1548159544775},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1548159544791},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1546403067509},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1548159544791},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1548159544791},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1548159544791},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1548159544791},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1548159544791},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1548159544791},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1548159544791},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1548159544791},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1548159544791},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1548159544807},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1548159544807},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1548159544807},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c701cd7d9232d4432709ca381fb5c76d81d6ce0c","modified":1548159544807},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1548159544807},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1548159544807},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1548159544885},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1548159544885},{"_id":"themes/next/layout/_layout.swig","hash":"a7e674b425d9a096a33b81cd64e09113c49bd394","modified":1548159544807},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1548159544885},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1548159544885},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1548159544885},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1548159544885},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1548159544885},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1548159545104},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1548159545104},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1548159545104},{"_id":"source/images/20190120/jpa-entity.png","hash":"61c701dc2248466590c242210588ac6f8689fd87","modified":1547971445000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546403067513},{"_id":"source/images/20190101/title.png","hash":"ef40d0399c330bd40f9b4b9bbb458beb41fe8dd9","modified":1546403067505},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1548159544900},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1548159544900},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1548159544900},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1548159544900},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1548159544900},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1548159544900},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1548159544900},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1548159544900},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1548159544900},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1548159544807},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"e711f4fa556ee68234165147f852114d23a97281","modified":1548159544807},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"3ad3067cd5ea2c3d16e2d9aa368b4c810d4f7398","modified":1548159544807},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"c17104b453d81e3937abc92fdf702a5b750633f1","modified":1548159544807},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1548159544807},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1548159544822},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1548159544822},{"_id":"themes/next/layout/_macro/post.swig","hash":"d01ed1c0d0f5264ef0ba99d2ca8dd09f96eb327c","modified":1548159544822},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"fff8c0adf0d83c90d6607e21b32c0b4997782ad8","modified":1548159544822},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1548159544822},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4d9139cebce2e7b70953ad88e962634a80a59cef","modified":1548159544822},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cc5444900a7f134e7c1a6195348fcfe8fee5cad4","modified":1548159544822},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1548159544822},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1548159544822},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1548159544822},{"_id":"themes/next/layout/_partials/head.swig","hash":"109423ba9b4a833be0095cdb33c96026d56a70f1","modified":1548159544822},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1548159544822},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1548159544838},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1548159544838},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1548159544869},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1548159544854},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1548159544869},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1548159544869},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1548159544869},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1548159544869},{"_id":"source/images/20190120/exception.png","hash":"1cec2254e058c0fb8aea595c7e4337e425ad89ba","modified":1547965042000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1548159544885},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1548159544979},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1548159544885},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1548159544994},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1546403067513},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1546403067513},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1548159544994},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1548159544994},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1548159544994},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1548159544994},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1548159544994},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1548159544994},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1548159544994},{"_id":"themes/next/source/images/favicon-16x16-next-1.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1546403067513},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"de35afb9e9f2111527292893b3e94c9acdbe29ef","modified":1546403067513},{"_id":"themes/next/source/images/favicon-32x32-next-2.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1546403067513},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"869c89d5d2de1587b39af80e8cadddfbd030c6f7","modified":1546403067513},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546403067513},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1548159544994},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546403067513},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1548159544994},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1548159544994},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1546403067517},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546403067509},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546403067509},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546403067513},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546403067513},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546403067513},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546403067513},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546403067513},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1548159544822},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1548159544822},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1548159544822},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1548159544822},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1548159544822},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1548159544838},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1548159544838},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1548159544838},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1548159544838},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1548159544838},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1548159544854},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1548159544854},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1548159544854},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1548159544854},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1548159544854},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1548159544854},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1548159544854},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1548159544854},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1548159544854},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1548159544869},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1548159544869},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1548159544869},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1548159544869},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1548159544869},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1548159544869},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1548159544869},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1548159544869},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1548159544869},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1548159544869},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1548159544869},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1548159544869},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1548159544869},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1548159544869},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1548159544869},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1548159544885},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1548159544885},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1548159544885},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1548159544885},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3073744e4c18fb70580007cac43cfb56877cace9","modified":1548159544963},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1548159544963},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1548159544963},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1548159544963},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1548159544979},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1548159544979},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1548159544979},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1548159544994},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1548159544979},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1548159545010},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1548159545010},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1548159545010},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1548159545010},{"_id":"themes/next/source/js/src/love.js","hash":"5b7946f40f3c91a81e8f00392752a32892c02c21","modified":1548159545010},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1548159545010},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1548159545010},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1548159545010},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1548159545010},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1548159545010},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1548159545010},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1546403067517},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1546403067517},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1548159545025},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1548159545072},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1548159545041},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1548159545041},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1548159545057},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1548159545041},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1548159545057},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1548159545057},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1548159545057},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1548159545041},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1548159545057},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1548159545072},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1548159545072},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1548159545072},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1548159545072},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1548159545072},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1548159545072},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1546403067521},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1548159545088},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1548159545088},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1548159545072},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1548159545072},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1546403067521},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1548159545088},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1548159545088},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1548159545088},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1548159545104},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1548159545104},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1548159545104},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1548159545104},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1548159545104},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1548159545072},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1548159544885},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1548159544885},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1548159544932},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1548159544947},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1548159544947},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1548159544947},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1548159544947},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1548159544947},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1548159544947},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1548159544947},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1548159544979},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1548159544979},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1548159544979},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1548159544979},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1548159544979},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1548159544979},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1548159544979},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1548159544979},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1548159544979},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1548159545010},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1548159545010},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1546403067517},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1548159545025},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1546403067517},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1548159545025},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1546403067517},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1546403067517},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1548159545041},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1546403067517},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1546403067517},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1548159545041},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1548159545041},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1546403067521},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1548159545057},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1548159545057},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1548159545057},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1548159545057},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1548159545104},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1548159545104},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1548159545025},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1546403067521},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1546403067521},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1548159545104},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1548159544900},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"dadd0ced362cebcd3dfdbfa46c305bfc078d0ebc","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"1e3d1e70bbb5c51867ae958646c4c62d3ee86e04","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ba0cef8ea88b64455470e46b3676303286d8c813","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1548159544916},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1548159544932},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1548159544947},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1548159544947},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1548159544963},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1548159544979},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1546403067517},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1546403067517},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1546403067517},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1546403067517},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1546403067517},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1548159545041},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1548159545041},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1546403067517},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1548159545041},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1546403067521},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1548159545041},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1546403067521},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1548159545041},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1546403067521},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1548159545025},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1548159545104},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1548159545072},{"_id":"public/atom.xml","hash":"6bdf2834ea25b9b81bd8802ac46d610b468fc030","modified":1551448257217},{"_id":"public/search.xml","hash":"c58b98fc74ed55209d94043493304082e85c660d","modified":1551448258786},{"_id":"public/about/index.html","hash":"a0a975f49ff407022c8f4edbcff4ebb80f343f2e","modified":1551448258810},{"_id":"public/categories/index.html","hash":"146162d7d2a2d7fd6a928871c0c3b4e2260c5727","modified":1551448258786},{"_id":"public/tags/index.html","hash":"e5b52e9bbc644b34c2ad8f524eff569b1a7986f7","modified":1551448258810},{"_id":"public/top/index.html","hash":"73cb4253fa6d5c29d0b52298e6beeb69401180c0","modified":1551448258810},{"_id":"public/2019/01/19/Spring Data JPA实体的生命周期总结/index.html","hash":"e01ba4e0ade36ba5c13beea11c9e24ec6c4fc7a0","modified":1551448258810},{"_id":"public/2019/01/13/Java8 Optional学习/index.html","hash":"343236209374e5c7aa05297d7ee95a18684d1321","modified":1551448258810},{"_id":"public/2019/01/13/Spring Data JPA 2.0X版本之后findOne方法被findById方法替换/index.html","hash":"a41a17d01086ebfd5d369e31fb14ec4240acbc7e","modified":1551448258810},{"_id":"public/2019/01/13/Spring Data JPA getOne和findOne区别/index.html","hash":"0038ba21ce4f8d1b4bd7cccbc0900bd688c03a6c","modified":1551448258810},{"_id":"public/2019/01/13/Spring Data JPA 1.0x版本中getOne和findOne区别/index.html","hash":"a70dce94f34340b76ed03b5f0c511b8274d62e85","modified":1551448258811},{"_id":"public/2018/12/31/MarkDown回顾与熟悉/index.html","hash":"aa63eaa3fd7edb95743e85e80726df0f9ec791ff","modified":1551448258810},{"_id":"public/archives/index.html","hash":"c9babb77eefe7b94fafe9f03ebd640479b678ec9","modified":1551448258810},{"_id":"public/archives/2018/index.html","hash":"2ad0a54df64e354b42966d4e986b746f1ed20ca3","modified":1551448258811},{"_id":"public/archives/2018/12/index.html","hash":"f99b98620e7414685a0f3764b46755a31ecca630","modified":1551448258811},{"_id":"public/archives/2019/index.html","hash":"4622b8718715cf7d5c79ad41c693930d3f3dd80c","modified":1551448258811},{"_id":"public/archives/2019/01/index.html","hash":"044c55894ae589ab477fc1edf3a763fbb2e59b7b","modified":1551448258811},{"_id":"public/categories/java8/index.html","hash":"e54c744b7c3cd886ad29d4cb3e62bd65f4177e16","modified":1551448258811},{"_id":"public/categories/编辑工具/index.html","hash":"4c580fe7feb9a6f31abb12122e021120a77d4c6d","modified":1551448258811},{"_id":"public/categories/Spring/index.html","hash":"7552314b43f4dc1821b4220895b35a178e2d8470","modified":1551448258811},{"_id":"public/index.html","hash":"947e3cd7476cbdf5c81c73f94553e6b860bbb91d","modified":1551448258811},{"_id":"public/tags/java8/index.html","hash":"1a09cbeb32753f2e6cda649a01293e3c33145f04","modified":1551448258811},{"_id":"public/tags/MarkDown/index.html","hash":"3a61603286710affb12320e8b9f4965063dc9a1f","modified":1551448258811},{"_id":"public/tags/Spring-Data-JPA/index.html","hash":"5119d6425ff5d7776029936ec69f9ccdeeb57074","modified":1551448258811},{"_id":"public/images/avatar.jpg","hash":"2656eb86cb737ff77ea089df25db7f0ee9c530ce","modified":1548159890267},{"_id":"public/CNAME","hash":"b1b79292dd286296c89c3c9ec1d73924fc761130","modified":1548159888917},{"_id":"public/images/20190120/jpa-entity.png","hash":"61c701dc2248466590c242210588ac6f8689fd87","modified":1548159888918},{"_id":"public/images/20190101/title.png","hash":"ef40d0399c330bd40f9b4b9bbb458beb41fe8dd9","modified":1548159888917},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1548159888918},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548159888918},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548159888918},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1548159888918},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1548159888918},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1548159888918},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1548159888918},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1548159888918},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1548159888918},{"_id":"public/images/favicon-16x16-next-1.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548159888918},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1548159888918},{"_id":"public/images/favicon-16x16-next.png","hash":"de35afb9e9f2111527292893b3e94c9acdbe29ef","modified":1548159888918},{"_id":"public/images/favicon-32x32-next-2.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548159888918},{"_id":"public/images/favicon-32x32-next.png","hash":"869c89d5d2de1587b39af80e8cadddfbd030c6f7","modified":1548159888918},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548159888918},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548159888918},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1548159888918},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1548159888918},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1548159888919},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548159888919},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1548159888919},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1548159888919},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1548159888919},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1548159888919},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1548159888919},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1548159888919},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1548159888919},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1548159888919},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1548159888919},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1548159888919},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1548159888919},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1548159888919},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1548159888919},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1548159888919},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1548159888919},{"_id":"public/images/20190120/exception.png","hash":"1cec2254e058c0fb8aea595c7e4337e425ad89ba","modified":1548159890270},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548159890272},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548159890273},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1548159890284},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1548159890285},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1548159890284},{"_id":"public/js/src/love.js","hash":"2995507b300c6c9a9472d81c54b7c477d6925094","modified":1548159890285},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1548159890285},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1548159890285},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1548159890285},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1548159890286},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1548159890285},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1548159890286},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1548159890286},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1548159890286},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1548159890286},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1548159890286},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1548159890286},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1548159890286},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1548159890286},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1548159890286},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1548159890286},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1548159890286},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1548159890287},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1548159890287},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1548159890287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1548159890287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1548159890287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1548159890287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1548159890287},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1548159890287},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1548159890287},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1548159890287},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1548159890287},{"_id":"public/css/main.css","hash":"7cc7a372115c6e7baa5d38d0f034ea9220741fea","modified":1548159890287},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548159890287},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548159890374},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548159890287},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1548159890290},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1548159890290},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1548159890290},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1548159890291},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1548159890291},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1548159890291},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1548159890292},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1548159890291},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1548159890293},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1548159890293},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1548159890387},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548159890387},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1548159890408},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1548159890407},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1548159890404},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1548159890405},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1548159890408},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1548159890408},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548159890409},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1548159890444},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1548159890445},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1548159890446},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1548159890446},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1548159890636},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1548159890636},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548159890636},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1548159890653},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1548159890666},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1548159890670},{"_id":"source/images/20190124/demo.png","hash":"5f78b02ffca44940aa22baa10db5270c2ebaa28b","modified":1548429700906},{"_id":"public/images/20190124/demo.png","hash":"5f78b02ffca44940aa22baa10db5270c2ebaa28b","modified":1551448258814}],"Category":[{"name":"java8","_id":"cjr721bph0004jcg2c5tttrly"},{"name":"编辑工具","_id":"cjr721bpk0009jcg2h07trbps"},{"name":"Spring","_id":"cjr721bpm000ejcg2gl8hmwxx"}],"Data":[],"Page":[{"title":"关于","date":"2018-12-30T03:00:28.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-12-30 11:00:28\ncomments: false\n---\n","updated":"2019-01-22T12:19:04.682Z","path":"about/index.html","_id":"cjr721bpf0001jcg2er6q1at7","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-12-30T02:47:23.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-12-30 10:47:23\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-01-22T12:19:04.682Z","path":"categories/index.html","_id":"cjr721bpg0003jcg2zvs849hy","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-12-29T09:42:53.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-12-29 17:42:53\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-01-22T12:19:04.682Z","path":"tags/index.html","_id":"cjr721bt7000wjcg2ou06p7hu","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"comments":0,"_content":"<h1 class=\"post-title\" itemprop=\"name headline\">阅读排行</h1>\n<div id=\"top\"></div>\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n<script>AV.initialize(\"IncCJ9bPSktOja894HwhOFMB-gzGzoHsz\", \"2RFu5U1qeTIbTbWMRttTCWbU\");</script>\n<script type=\"text/javascript\">\n  var time=0\n    var title=\"\"\n      var url=\"\"\n        var query = new AV.Query('Counter');\n\t  query.notEqualTo('id',0);\n\t    query.descending('time');\n\t      query.limit(1000);\n\t        query.find().then(function (todo) {\n\t\t    for (var i=0;i<1000;i++){\n\t\t          var result=todo[i].attributes;\n\t\t\t        time=result.time;\n\t\t\t\t      title=result.title;\n\t\t\t\t            url=result.url;\n\t\t\t\t\t          // var content=\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br>\"+\"<font color='#fff'>\"+\"阅读次数：\"+time+\"</font>\"+\"<br><br>\";\n\t\t\t\t\t\t        var content=\"<p>\"+\"<font color='#1C1C1C'>\"+\"【文章热度:\"+time+\"℃】\"+\"</font>\"+\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"</p>\";\n\t\t\t\t\t\t\t      document.getElementById(\"top\").innerHTML+=content\n\t\t\t\t\t\t\t          }\n\t\t\t\t\t\t\t\t    }, function (error) {\n\t\t\t\t\t\t\t\t        console.log(\"error\");\n\t\t\t\t\t\t\t\t\t  });\n\t\t\t\t\t\t\t\t\t  </script>\n","source":"top/index.md","raw":"---\ncomments: false\n---\n<h1 class=\"post-title\" itemprop=\"name headline\">阅读排行</h1>\n<div id=\"top\"></div>\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n<script>AV.initialize(\"IncCJ9bPSktOja894HwhOFMB-gzGzoHsz\", \"2RFu5U1qeTIbTbWMRttTCWbU\");</script>\n<script type=\"text/javascript\">\n  var time=0\n    var title=\"\"\n      var url=\"\"\n        var query = new AV.Query('Counter');\n\t  query.notEqualTo('id',0);\n\t    query.descending('time');\n\t      query.limit(1000);\n\t        query.find().then(function (todo) {\n\t\t    for (var i=0;i<1000;i++){\n\t\t          var result=todo[i].attributes;\n\t\t\t        time=result.time;\n\t\t\t\t      title=result.title;\n\t\t\t\t            url=result.url;\n\t\t\t\t\t          // var content=\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br>\"+\"<font color='#fff'>\"+\"阅读次数：\"+time+\"</font>\"+\"<br><br>\";\n\t\t\t\t\t\t        var content=\"<p>\"+\"<font color='#1C1C1C'>\"+\"【文章热度:\"+time+\"℃】\"+\"</font>\"+\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"</p>\";\n\t\t\t\t\t\t\t      document.getElementById(\"top\").innerHTML+=content\n\t\t\t\t\t\t\t          }\n\t\t\t\t\t\t\t\t    }, function (error) {\n\t\t\t\t\t\t\t\t        console.log(\"error\");\n\t\t\t\t\t\t\t\t\t  });\n\t\t\t\t\t\t\t\t\t  </script>\n","date":"2019-01-22T12:19:04.682Z","updated":"2019-01-22T12:19:04.682Z","path":"top/index.html","_id":"cjr721bt8000xjcg275yq1xo0","title":"","layout":"page","content":"<p></p><h1 class=\"post-title\" itemprop=\"name headline\">阅读排行</h1><p></p>\n<p><div id=\"top\"></div></p>\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n<script>AV.initialize(\"IncCJ9bPSktOja894HwhOFMB-gzGzoHsz\", \"2RFu5U1qeTIbTbWMRttTCWbU\");</script>\n<script type=\"text/javascript\">\n  var time=0\n    var title=\"\"\n      var url=\"\"\n        var query = new AV.Query('Counter');\n      query.notEqualTo('id',0);\n        query.descending('time');\n          query.limit(1000);\n            query.find().then(function (todo) {\n            for (var i=0;i<1000;i++){\n                  var result=todo[i].attributes;\n                    time=result.time;\n                      title=result.title;\n                            url=result.url;\n                              // var content=\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br>\"+\"<font color='#fff'>\"+\"阅读次数：\"+time+\"</font>\"+\"<br><br>\";\n                                var content=\"<p>\"+\"<font color='#1C1C1C'>\"+\"【文章热度:\"+time+\"℃】\"+\"</font>\"+\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"</p>\";\n                                  document.getElementById(\"top\").innerHTML+=content\n                                      }\n                                    }, function (error) {\n                                        console.log(\"error\");\n                                      });\n                                      </script>\n","site":{"data":{}},"excerpt":"","more":"<p></p><h1 class=\"post-title\" itemprop=\"name headline\">阅读排行</h1><p></p>\n<p><div id=\"top\"></div></p>\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n<script>AV.initialize(\"IncCJ9bPSktOja894HwhOFMB-gzGzoHsz\", \"2RFu5U1qeTIbTbWMRttTCWbU\");</script>\n<script type=\"text/javascript\">\n  var time=0\n    var title=\"\"\n      var url=\"\"\n        var query = new AV.Query('Counter');\n      query.notEqualTo('id',0);\n        query.descending('time');\n          query.limit(1000);\n            query.find().then(function (todo) {\n            for (var i=0;i<1000;i++){\n                  var result=todo[i].attributes;\n                    time=result.time;\n                      title=result.title;\n                            url=result.url;\n                              // var content=\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br>\"+\"<font color='#fff'>\"+\"阅读次数：\"+time+\"</font>\"+\"<br><br>\";\n                                var content=\"<p>\"+\"<font color='#1C1C1C'>\"+\"【文章热度:\"+time+\"℃】\"+\"</font>\"+\"<a href='\"+\"https://hdlxt.github.io\"+url+\"'>\"+title+\"</a>\"+\"</p>\";\n                                  document.getElementById(\"top\").innerHTML+=content\n                                      }\n                                    }, function (error) {\n                                        console.log(\"error\");\n                                      });\n                                      </script>\n"}],"Post":[{"title":"Java8 Optional学习","date":"2019-01-13T14:30:12.000Z","copyright":true,"_content":"Java8 Optional：是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。Optional可以优雅的解决代码中关于null值的判断。\n<!--more-->\n## 目录\n* [**API简单说明**](#1)\n* [**正确姿势示例**](#2)\n* [**个人学习总结**](#3)\n\n\t\n","source":"_posts/Java8 Optional学习.md","raw":"---\ntitle: Java8 Optional学习\ndate: 2019-01-13 22:30:12\ntags:\n- java8\ncategories:\n- java8\ncopyright: true\n---\nJava8 Optional：是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。Optional可以优雅的解决代码中关于null值的判断。\n<!--more-->\n## 目录\n* [**API简单说明**](#1)\n* [**正确姿势示例**](#2)\n* [**个人学习总结**](#3)\n\n\t\n","slug":"Java8 Optional学习","published":1,"updated":"2019-01-22T12:19:04.682Z","_id":"cjr721bpc0000jcg2c0lybdwk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Java8 Optional：是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。Optional可以优雅的解决代码中关于null值的判断。<br><a id=\"more\"></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API简单说明</strong></a></li>\n<li><a href=\"#2\"><strong>正确姿势示例</strong></a></li>\n<li><a href=\"#3\"><strong>个人学习总结</strong></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Java8 Optional：是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。Optional可以优雅的解决代码中关于null值的判断。<br>","more":"</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API简单说明</strong></a></li>\n<li><a href=\"#2\"><strong>正确姿势示例</strong></a></li>\n<li><a href=\"#3\"><strong>个人学习总结</strong></a></li>\n</ul>"},{"title":"MarkDown常用语法回顾与熟悉","date":"2018-12-31T15:30:12.000Z","copyright":true,"_content":"> 这两天利用元旦假期的空闲时间捣鼓了一个初版的博客，目前还有一些小问题待完善，后续有精力再继续完善。这第一篇就用于熟悉MarkDown语法了，为以后奠定基础。\n<!--more -->\n## 目录\n* [**标题**](#1)\n* [**锚点**](#11)\n* [**段落与换行**](#2)\n* [**区块引用**](#3)\n* [**列表**](#4)\n* [**代码**](#5)\n* [**强调**](#6)\n* [**自动链接**](#7)\n* [**表格**](#8)\n* [**分割线**](#9)\n* [**图片**](#10)\n\n---\n\n<h2 id='1'>标题</h2>\n\n在文字前面添加【#】即可创建一至六级标题，详情如下： \n\t# 一级标题\n\t\n\t## 二级标题\n\t\n\t### 三级标题\n\t\n\t#### 四级标题\n\t\n\t##### 五级标题\n\t\n\t###### 六级标题\n效果如下：\n![title](/images/20190101/title.png)  \n<h2 id='11'>锚点</h2>\n\n利用锚点可进行页面内跳转（文章目录即为锚点语法制作），详情如下：\n> `[**标题**](#title)`  【#】后面的`title`对应下面的`id='title'`\n> \n> `<h2 id='title'>标题</h2>`\n\n效果：\n>点击【标题】目录可自动跳转到下面的标题模块\n\n<h2 id='2'>段落与换行</h2>\n\n>**段落**：段落就是连续行上的文本, 一个或多个空行划分不同的段落. (空行的含义就只要是看起来是空行就行了 -- 即使包含了 spaces 或者 等空白符也是空行.) 普通段落不应该使用缩进.  \n>\n>**换行**：只需要在行尾加上两个及以上的空格, 即可自动换行\n\n<h2 id='3'>区块引用</h2>\n\n> \\>区块引用\n\n> \\>>这是嵌套区块引用\n\n效果：\n>区块引用\n> >这是嵌套区块引用\n\n<h2 id='4'>列表</h2>\n\n无序列表可用【`+`】、【`*`】、【`-`】符号表示无序列表(符号和文字之间有一个空格)，如下：\n>-（+\\*） 第一项   \n>-（+\\*） 第二项   \n>- （+\\*）第三项\n\n效果：\n>* 第一项 \n* 第二项 \n* 第三项\n\n无序列表用数字加【`.`】来标识(【`.`】符号和文字之间有一个空格)，如下：\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项  \n\n效果：\n> 1. 第一项 \n> 2. 第二项 \n> 3. 第三项  \n<h2 id='5'>代码</h2>\n\n代码区块:语法   \n\\`\\`\\`语言  \nXXXXXX  \n\\`\\`\\`    \n。如下:  \n普通段落：  \nvoid main()  \n{  \nprint(\"Hello World!\");  \n}\n\njava代码块：\n```java\n\tvoid main()\n\t{\n\tprint(\"Hello World!\");\n\t}\n```\n<h2 id='6'>强调</h2>\n\n在强调内容两侧分别加上【`*`】或者【`_`】，如：\n\n>\\*斜体\\*，\\_斜体\\_\n\\**粗体\\**，\\__粗体\\__\n\n效果：\n>*斜体*，_斜体_  \n**粗体**，__粗体__\n<h2 id='7'>自动链接</h2>\n\n链接有两种形式生成：`行内式`和`参考式`。  \n\n- 行内式:  \n\t>\\[XiaoTong's Blog](https://hdlxt.github.io/)。  \n\t\n\t效果：  \n\t>[XiaoTong's Blog](https://hdlxt.github.io/)。\n\n- 参考式\n\t>\\[XiaoTong's Blog][1]  \n\t>\\[1]:https://hdlxt.github.io/  \n\t\n\t效果：\n > [XiaoTong's Blog][1]。  \n  [1]:https://hdlxt.github.io/\n\n<h2 id='9'>水平分割线</h2>\n\n如果一行中只有三个以上的连字符, 星号, 或者下划线则会在该位置生成一个 `<hr />` 标签. 星号和连字符之间的空格也是允许的. 下面的例子都会生成一条水平线:  \n如：  \n> \\***  \n\\---  \n\\* * *  \n\\- - -  \n\n效果：  \n>***\n>---\n>* * *\n- - -\n<h2 id='10'>图片</h2>\n\n通常, 要用 \"原生\" 的语法在纯文本格式中插入图片是很困难的.\nMarkdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.\n内联图片语法如下:  \n\\![Alt text]\\(/path/to/img.jpg)  \n\\![Alt text]\\(/path/to/img.jpg \"Optional title\")  \n也就是:\n一个感叹号: !;  \n紧跟着一对方括号, 包含了图片的 alt 属性;  \n紧跟着一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.  \n引用图片语法如下:  \n\\!\\[Alt text]\\[id]  \n\"id\" 是图片引用的名称. 图片引用使用链接定义的相同语法:  \n\\[id]: url/to/image  \"Optional title attribute\"  \nMarkdown 没有语法指定图片尺寸; 如果需要指定图片尺寸, 可以使用HTML`<img>` 标签.  \n示例如：  \n>\\![avatar]\\(/images/avatar.jpg)  \n\n效果：\n![avatar](/images/avatar.jpg)  \n\t\n","source":"_posts/MarkDown回顾与熟悉.md","raw":"---\ntitle: MarkDown常用语法回顾与熟悉\ndate: 2018-12-31 23:30:12\ntags:\n- MarkDown\ncategories:\n- 编辑工具\ncopyright: true\n---\n> 这两天利用元旦假期的空闲时间捣鼓了一个初版的博客，目前还有一些小问题待完善，后续有精力再继续完善。这第一篇就用于熟悉MarkDown语法了，为以后奠定基础。\n<!--more -->\n## 目录\n* [**标题**](#1)\n* [**锚点**](#11)\n* [**段落与换行**](#2)\n* [**区块引用**](#3)\n* [**列表**](#4)\n* [**代码**](#5)\n* [**强调**](#6)\n* [**自动链接**](#7)\n* [**表格**](#8)\n* [**分割线**](#9)\n* [**图片**](#10)\n\n---\n\n<h2 id='1'>标题</h2>\n\n在文字前面添加【#】即可创建一至六级标题，详情如下： \n\t# 一级标题\n\t\n\t## 二级标题\n\t\n\t### 三级标题\n\t\n\t#### 四级标题\n\t\n\t##### 五级标题\n\t\n\t###### 六级标题\n效果如下：\n![title](/images/20190101/title.png)  \n<h2 id='11'>锚点</h2>\n\n利用锚点可进行页面内跳转（文章目录即为锚点语法制作），详情如下：\n> `[**标题**](#title)`  【#】后面的`title`对应下面的`id='title'`\n> \n> `<h2 id='title'>标题</h2>`\n\n效果：\n>点击【标题】目录可自动跳转到下面的标题模块\n\n<h2 id='2'>段落与换行</h2>\n\n>**段落**：段落就是连续行上的文本, 一个或多个空行划分不同的段落. (空行的含义就只要是看起来是空行就行了 -- 即使包含了 spaces 或者 等空白符也是空行.) 普通段落不应该使用缩进.  \n>\n>**换行**：只需要在行尾加上两个及以上的空格, 即可自动换行\n\n<h2 id='3'>区块引用</h2>\n\n> \\>区块引用\n\n> \\>>这是嵌套区块引用\n\n效果：\n>区块引用\n> >这是嵌套区块引用\n\n<h2 id='4'>列表</h2>\n\n无序列表可用【`+`】、【`*`】、【`-`】符号表示无序列表(符号和文字之间有一个空格)，如下：\n>-（+\\*） 第一项   \n>-（+\\*） 第二项   \n>- （+\\*）第三项\n\n效果：\n>* 第一项 \n* 第二项 \n* 第三项\n\n无序列表用数字加【`.`】来标识(【`.`】符号和文字之间有一个空格)，如下：\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项  \n\n效果：\n> 1. 第一项 \n> 2. 第二项 \n> 3. 第三项  \n<h2 id='5'>代码</h2>\n\n代码区块:语法   \n\\`\\`\\`语言  \nXXXXXX  \n\\`\\`\\`    \n。如下:  \n普通段落：  \nvoid main()  \n{  \nprint(\"Hello World!\");  \n}\n\njava代码块：\n```java\n\tvoid main()\n\t{\n\tprint(\"Hello World!\");\n\t}\n```\n<h2 id='6'>强调</h2>\n\n在强调内容两侧分别加上【`*`】或者【`_`】，如：\n\n>\\*斜体\\*，\\_斜体\\_\n\\**粗体\\**，\\__粗体\\__\n\n效果：\n>*斜体*，_斜体_  \n**粗体**，__粗体__\n<h2 id='7'>自动链接</h2>\n\n链接有两种形式生成：`行内式`和`参考式`。  \n\n- 行内式:  \n\t>\\[XiaoTong's Blog](https://hdlxt.github.io/)。  \n\t\n\t效果：  \n\t>[XiaoTong's Blog](https://hdlxt.github.io/)。\n\n- 参考式\n\t>\\[XiaoTong's Blog][1]  \n\t>\\[1]:https://hdlxt.github.io/  \n\t\n\t效果：\n > [XiaoTong's Blog][1]。  \n  [1]:https://hdlxt.github.io/\n\n<h2 id='9'>水平分割线</h2>\n\n如果一行中只有三个以上的连字符, 星号, 或者下划线则会在该位置生成一个 `<hr />` 标签. 星号和连字符之间的空格也是允许的. 下面的例子都会生成一条水平线:  \n如：  \n> \\***  \n\\---  \n\\* * *  \n\\- - -  \n\n效果：  \n>***\n>---\n>* * *\n- - -\n<h2 id='10'>图片</h2>\n\n通常, 要用 \"原生\" 的语法在纯文本格式中插入图片是很困难的.\nMarkdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.\n内联图片语法如下:  \n\\![Alt text]\\(/path/to/img.jpg)  \n\\![Alt text]\\(/path/to/img.jpg \"Optional title\")  \n也就是:\n一个感叹号: !;  \n紧跟着一对方括号, 包含了图片的 alt 属性;  \n紧跟着一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.  \n引用图片语法如下:  \n\\!\\[Alt text]\\[id]  \n\"id\" 是图片引用的名称. 图片引用使用链接定义的相同语法:  \n\\[id]: url/to/image  \"Optional title attribute\"  \nMarkdown 没有语法指定图片尺寸; 如果需要指定图片尺寸, 可以使用HTML`<img>` 标签.  \n示例如：  \n>\\![avatar]\\(/images/avatar.jpg)  \n\n效果：\n![avatar](/images/avatar.jpg)  \n\t\n","slug":"MarkDown回顾与熟悉","published":1,"updated":"2019-01-22T12:19:04.682Z","_id":"cjr721bpf0002jcg204h6uvpb","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>这两天利用元旦假期的空闲时间捣鼓了一个初版的博客，目前还有一些小问题待完善，后续有精力再继续完善。这第一篇就用于熟悉MarkDown语法了，为以后奠定基础。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>标题</strong></a></li>\n<li><a href=\"#11\"><strong>锚点</strong></a></li>\n<li><a href=\"#2\"><strong>段落与换行</strong></a></li>\n<li><a href=\"#3\"><strong>区块引用</strong></a></li>\n<li><a href=\"#4\"><strong>列表</strong></a></li>\n<li><a href=\"#5\"><strong>代码</strong></a></li>\n<li><a href=\"#6\"><strong>强调</strong></a></li>\n<li><a href=\"#7\"><strong>自动链接</strong></a></li>\n<li><a href=\"#8\"><strong>表格</strong></a></li>\n<li><a href=\"#9\"><strong>分割线</strong></a></li>\n<li><a href=\"#10\"><strong>图片</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">标题</h2>\n\n<p>在文字前面添加【#】即可创建一至六级标题，详情如下： </p>\n<pre><code># 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n</code></pre><p>效果如下：<br><img src=\"/images/20190101/title.png\" alt=\"title\">  </p>\n<h2 id=\"11\">锚点</h2>\n\n<p>利用锚点可进行页面内跳转（文章目录即为锚点语法制作），详情如下：</p>\n<blockquote>\n<p><code>[**标题**](#title)</code>  【#】后面的<code>title</code>对应下面的<code>id=&#39;title&#39;</code></p>\n<p><code>&lt;h2 id=&#39;title&#39;&gt;标题&lt;/h2&gt;</code></p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>点击【标题】目录可自动跳转到下面的标题模块</p>\n</blockquote>\n<h2 id=\"2\">段落与换行</h2>\n\n<blockquote>\n<p><strong>段落</strong>：段落就是连续行上的文本, 一个或多个空行划分不同的段落. (空行的含义就只要是看起来是空行就行了 – 即使包含了 spaces 或者 等空白符也是空行.) 普通段落不应该使用缩进.  </p>\n<p><strong>换行</strong>：只需要在行尾加上两个及以上的空格, 即可自动换行</p>\n</blockquote>\n<h2 id=\"3\">区块引用</h2>\n\n<blockquote>\n<p>>区块引用</p>\n</blockquote>\n<blockquote>\n<p>>&gt;这是嵌套区块引用</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>区块引用</p>\n<blockquote>\n<p>这是嵌套区块引用</p>\n</blockquote>\n</blockquote>\n<h2 id=\"4\">列表</h2>\n\n<p>无序列表可用【<code>+</code>】、【<code>*</code>】、【<code>-</code>】符号表示无序列表(符号和文字之间有一个空格)，如下：</p>\n<blockquote>\n<p>-（+*） 第一项<br>-（+*） 第二项   </p>\n<ul>\n<li>（+*）第三项</li>\n</ul>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ul>\n<li>第一项 </li>\n<li>第二项 </li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<p>无序列表用数字加【<code>.</code>】来标识(【<code>.</code>】符号和文字之间有一个空格)，如下：</p>\n<blockquote>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项  </li>\n</ol>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ol>\n<li>第一项 </li>\n<li>第二项 </li>\n<li>第三项  </li>\n</ol>\n</blockquote>\n<h2 id=\"5\">代码</h2>\n\n<p>代码区块:语法<br>```语言<br>XXXXXX<br>```<br>。如下:<br>普通段落：<br>void main()<br>{<br>print(“Hello World!”);<br>}</p>\n<p>java代码块：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">print(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6\">强调</h2>\n\n<p>在强调内容两侧分别加上【<code>*</code>】或者【<code>_</code>】，如：</p>\n<blockquote>\n<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><em>斜体</em>，_斜体_<br><strong>粗体</strong>，<strong>粗体</strong></p>\n</blockquote>\n<h2 id=\"7\">自动链接</h2>\n\n<p>链接有两种形式生成：<code>行内式</code>和<code>参考式</code>。  </p>\n<ul>\n<li><p>行内式:  </p>\n<blockquote>\n<p>[XiaoTong’s Blog](<a href=\"https://hdlxt.github.io/)。\" target=\"_blank\" rel=\"noopener\">https://hdlxt.github.io/)。</a>  </p>\n</blockquote>\n<p>  效果：  </p>\n<blockquote>\n<p><a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">XiaoTong’s Blog</a>。</p>\n</blockquote>\n</li>\n<li><p>参考式</p>\n<blockquote>\n<p>[XiaoTong’s Blog]<a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">1</a><br>[1]:<a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">https://hdlxt.github.io/</a>  </p>\n</blockquote>\n<p>  效果：</p>\n<blockquote>\n<p><a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">XiaoTong’s Blog</a>。  </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"9\">水平分割线</h2>\n\n<p>如果一行中只有三个以上的连字符, 星号, 或者下划线则会在该位置生成一个 <code>&lt;hr /&gt;</code> 标签. 星号和连字符之间的空格也是允许的. 下面的例子都会生成一条水平线:<br>如：  </p>\n<blockquote>\n<p>**<em><br>-–<br>\\</em> <em> </em><br>- - -  </p>\n</blockquote>\n<p>效果：  </p>\n<blockquote>\n<hr>\n<hr>\n<hr>\n</blockquote>\n<hr>\n<h2 id=\"10\">图片</h2>\n\n<p>通常, 要用 “原生” 的语法在纯文本格式中插入图片是很困难的.<br>Markdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.<br>内联图片语法如下:<br>![Alt text](/path/to/img.jpg)<br>![Alt text](/path/to/img.jpg “Optional title”)<br>也就是:<br>一个感叹号: !;<br>紧跟着一对方括号, 包含了图片的 alt 属性;<br>紧跟着一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.<br>引用图片语法如下:<br>![Alt text][id]<br>“id” 是图片引用的名称. 图片引用使用链接定义的相同语法:<br>[id]: url/to/image  “Optional title attribute”<br>Markdown 没有语法指定图片尺寸; 如果需要指定图片尺寸, 可以使用HTML<code>&lt;img&gt;</code> 标签.<br>示例如：  </p>\n<blockquote>\n<p>![avatar](/images/avatar.jpg)  </p>\n</blockquote>\n<p>效果：<br><img src=\"/images/avatar.jpg\" alt=\"avatar\">  </p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这两天利用元旦假期的空闲时间捣鼓了一个初版的博客，目前还有一些小问题待完善，后续有精力再继续完善。这第一篇就用于熟悉MarkDown语法了，为以后奠定基础。<br>","more":"</p>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>标题</strong></a></li>\n<li><a href=\"#11\"><strong>锚点</strong></a></li>\n<li><a href=\"#2\"><strong>段落与换行</strong></a></li>\n<li><a href=\"#3\"><strong>区块引用</strong></a></li>\n<li><a href=\"#4\"><strong>列表</strong></a></li>\n<li><a href=\"#5\"><strong>代码</strong></a></li>\n<li><a href=\"#6\"><strong>强调</strong></a></li>\n<li><a href=\"#7\"><strong>自动链接</strong></a></li>\n<li><a href=\"#8\"><strong>表格</strong></a></li>\n<li><a href=\"#9\"><strong>分割线</strong></a></li>\n<li><a href=\"#10\"><strong>图片</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">标题</h2>\n\n<p>在文字前面添加【#】即可创建一至六级标题，详情如下： </p>\n<pre><code># 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n</code></pre><p>效果如下：<br><img src=\"/images/20190101/title.png\" alt=\"title\">  </p>\n<h2 id=\"11\">锚点</h2>\n\n<p>利用锚点可进行页面内跳转（文章目录即为锚点语法制作），详情如下：</p>\n<blockquote>\n<p><code>[**标题**](#title)</code>  【#】后面的<code>title</code>对应下面的<code>id=&#39;title&#39;</code></p>\n<p><code>&lt;h2 id=&#39;title&#39;&gt;标题&lt;/h2&gt;</code></p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>点击【标题】目录可自动跳转到下面的标题模块</p>\n</blockquote>\n<h2 id=\"2\">段落与换行</h2>\n\n<blockquote>\n<p><strong>段落</strong>：段落就是连续行上的文本, 一个或多个空行划分不同的段落. (空行的含义就只要是看起来是空行就行了 – 即使包含了 spaces 或者 等空白符也是空行.) 普通段落不应该使用缩进.  </p>\n<p><strong>换行</strong>：只需要在行尾加上两个及以上的空格, 即可自动换行</p>\n</blockquote>\n<h2 id=\"3\">区块引用</h2>\n\n<blockquote>\n<p>>区块引用</p>\n</blockquote>\n<blockquote>\n<p>>&gt;这是嵌套区块引用</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>区块引用</p>\n<blockquote>\n<p>这是嵌套区块引用</p>\n</blockquote>\n</blockquote>\n<h2 id=\"4\">列表</h2>\n\n<p>无序列表可用【<code>+</code>】、【<code>*</code>】、【<code>-</code>】符号表示无序列表(符号和文字之间有一个空格)，如下：</p>\n<blockquote>\n<p>-（+*） 第一项<br>-（+*） 第二项   </p>\n<ul>\n<li>（+*）第三项</li>\n</ul>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ul>\n<li>第一项 </li>\n<li>第二项 </li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<p>无序列表用数字加【<code>.</code>】来标识(【<code>.</code>】符号和文字之间有一个空格)，如下：</p>\n<blockquote>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项  </li>\n</ol>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ol>\n<li>第一项 </li>\n<li>第二项 </li>\n<li>第三项  </li>\n</ol>\n</blockquote>\n<h2 id=\"5\">代码</h2>\n\n<p>代码区块:语法<br>```语言<br>XXXXXX<br>```<br>。如下:<br>普通段落：<br>void main()<br>{<br>print(“Hello World!”);<br>}</p>\n<p>java代码块：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">print(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6\">强调</h2>\n\n<p>在强调内容两侧分别加上【<code>*</code>】或者【<code>_</code>】，如：</p>\n<blockquote>\n<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><em>斜体</em>，_斜体_<br><strong>粗体</strong>，<strong>粗体</strong></p>\n</blockquote>\n<h2 id=\"7\">自动链接</h2>\n\n<p>链接有两种形式生成：<code>行内式</code>和<code>参考式</code>。  </p>\n<ul>\n<li><p>行内式:  </p>\n<blockquote>\n<p>[XiaoTong’s Blog](<a href=\"https://hdlxt.github.io/)。\" target=\"_blank\" rel=\"noopener\">https://hdlxt.github.io/)。</a>  </p>\n</blockquote>\n<p>  效果：  </p>\n<blockquote>\n<p><a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">XiaoTong’s Blog</a>。</p>\n</blockquote>\n</li>\n<li><p>参考式</p>\n<blockquote>\n<p>[XiaoTong’s Blog]<a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">1</a><br>[1]:<a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">https://hdlxt.github.io/</a>  </p>\n</blockquote>\n<p>  效果：</p>\n<blockquote>\n<p><a href=\"https://hdlxt.github.io/\" target=\"_blank\" rel=\"noopener\">XiaoTong’s Blog</a>。  </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"9\">水平分割线</h2>\n\n<p>如果一行中只有三个以上的连字符, 星号, 或者下划线则会在该位置生成一个 <code>&lt;hr /&gt;</code> 标签. 星号和连字符之间的空格也是允许的. 下面的例子都会生成一条水平线:<br>如：  </p>\n<blockquote>\n<p>**<em><br>-–<br>\\</em> <em> </em><br>- - -  </p>\n</blockquote>\n<p>效果：  </p>\n<blockquote>\n<hr>\n<hr>\n<hr>\n</blockquote>\n<hr>\n<h2 id=\"10\">图片</h2>\n\n<p>通常, 要用 “原生” 的语法在纯文本格式中插入图片是很困难的.<br>Markdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.<br>内联图片语法如下:<br>![Alt text](/path/to/img.jpg)<br>![Alt text](/path/to/img.jpg “Optional title”)<br>也就是:<br>一个感叹号: !;<br>紧跟着一对方括号, 包含了图片的 alt 属性;<br>紧跟着一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.<br>引用图片语法如下:<br>![Alt text][id]<br>“id” 是图片引用的名称. 图片引用使用链接定义的相同语法:<br>[id]: url/to/image  “Optional title attribute”<br>Markdown 没有语法指定图片尺寸; 如果需要指定图片尺寸, 可以使用HTML<code>&lt;img&gt;</code> 标签.<br>示例如：  </p>\n<blockquote>\n<p>![avatar](/images/avatar.jpg)  </p>\n</blockquote>\n<p>效果：<br><img src=\"/images/avatar.jpg\" alt=\"avatar\">  </p>"},{"title":"Spring Data JPA 1.0x版本中getOne和findOne区别","date":"2019-01-13T03:30:12.000Z","copyright":true,"_content":"上个项目初期，项目成员不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。\n<!--more-->\n## 目录\n* [**API说明**](#1)\n* [**使用说明**](#2)\n\n---\n<h2 id='1'>API说明</h2>\n\n```java\n/**\n * Retrieves an entity by its id.\n * \n * @param id must not be {@literal null}.\n * @return the entity with the given id or {@literal null} if none found\n * 返回具有给定ID的实体，如果找不到，则返回@literal null\n * @throws IllegalArgumentException if {@code id} is {@literal null}\n */\nT findOne(ID id);\n/**\n * Returns a reference to the entity with the given identifier.\n * \n * @param id must not be {@literal null}.\n * @return a reference to the entity with the given identifier.\n * 返回对具有给定标识符的实体的引用。(延迟加载)\n * @see EntityManager#getReference(Class, Object)\n */\nT getOne(ID id);\n```\n\n<h2 id='2'>使用说明</h2>\n\nfindOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同\n\n- findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（[Spring Data JPA 2.0X版本之后findOne方法被findById方法替换](http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/)）\n\n- getOne方法为延迟加载\n\n  - 执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用`xxx==null`来判断是否有返回结果。\n\n  - 当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出`EntityNotFoundException`异常，如下：\n\n    ![exception](/images/20190120/exception.png)\n\n\n","source":"_posts/Spring Data JPA getOne和findOne区别.md","raw":"---\ntitle: Spring Data JPA 1.0x版本中getOne和findOne区别\ndate: 2019-01-13 11:30:12\ntags:\n- Spring Data JPA\ncategories:\n- Spring\ncopyright: true\n---\n上个项目初期，项目成员不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。\n<!--more-->\n## 目录\n* [**API说明**](#1)\n* [**使用说明**](#2)\n\n---\n<h2 id='1'>API说明</h2>\n\n```java\n/**\n * Retrieves an entity by its id.\n * \n * @param id must not be {@literal null}.\n * @return the entity with the given id or {@literal null} if none found\n * 返回具有给定ID的实体，如果找不到，则返回@literal null\n * @throws IllegalArgumentException if {@code id} is {@literal null}\n */\nT findOne(ID id);\n/**\n * Returns a reference to the entity with the given identifier.\n * \n * @param id must not be {@literal null}.\n * @return a reference to the entity with the given identifier.\n * 返回对具有给定标识符的实体的引用。(延迟加载)\n * @see EntityManager#getReference(Class, Object)\n */\nT getOne(ID id);\n```\n\n<h2 id='2'>使用说明</h2>\n\nfindOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同\n\n- findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（[Spring Data JPA 2.0X版本之后findOne方法被findById方法替换](http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/)）\n\n- getOne方法为延迟加载\n\n  - 执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用`xxx==null`来判断是否有返回结果。\n\n  - 当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出`EntityNotFoundException`异常，如下：\n\n    ![exception](/images/20190120/exception.png)\n\n\n","slug":"Spring Data JPA getOne和findOne区别","published":1,"updated":"2019-01-22T12:19:04.682Z","_id":"cjr721bpi0006jcg28cfp9qrz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上个项目初期，项目成员不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。<br><a id=\"more\"></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API说明</strong></a></li>\n<li><a href=\"#2\"><strong>使用说明</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">API说明</h2>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Retrieves an entity by its id.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the entity with the given id or &#123;<span class=\"doctag\">@literal</span> null&#125; if none found</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回具有给定ID的实体，如果找不到，则返回<span class=\"doctag\">@literal</span> null</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if &#123;<span class=\"doctag\">@code</span> id&#125; is &#123;<span class=\"doctag\">@literal</span> null&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">findOne</span><span class=\"params\">(ID id)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回对具有给定标识符的实体的引用。(延迟加载)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> EntityManager#getReference(Class, Object)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">getOne</span><span class=\"params\">(ID id)</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2\">使用说明</h2>\n\n<p>findOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同</p>\n<ul>\n<li><p>findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（<a href=\"http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/\" target=\"_blank\" rel=\"noopener\">Spring Data JPA 2.0X版本之后findOne方法被findById方法替换</a>）</p>\n</li>\n<li><p>getOne方法为延迟加载</p>\n<ul>\n<li><p>执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用<code>xxx==null</code>来判断是否有返回结果。</p>\n</li>\n<li><p>当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出<code>EntityNotFoundException</code>异常，如下：</p>\n<p><img src=\"/images/20190120/exception.png\" alt=\"exception\"></p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上个项目初期，项目成员不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。<br>","more":"</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API说明</strong></a></li>\n<li><a href=\"#2\"><strong>使用说明</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">API说明</h2>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Retrieves an entity by its id.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the entity with the given id or &#123;<span class=\"doctag\">@literal</span> null&#125; if none found</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回具有给定ID的实体，如果找不到，则返回<span class=\"doctag\">@literal</span> null</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if &#123;<span class=\"doctag\">@code</span> id&#125; is &#123;<span class=\"doctag\">@literal</span> null&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">findOne</span><span class=\"params\">(ID id)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回对具有给定标识符的实体的引用。(延迟加载)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> EntityManager#getReference(Class, Object)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">getOne</span><span class=\"params\">(ID id)</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2\">使用说明</h2>\n\n<p>findOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同</p>\n<ul>\n<li><p>findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（<a href=\"http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/\" target=\"_blank\" rel=\"noopener\">Spring Data JPA 2.0X版本之后findOne方法被findById方法替换</a>）</p>\n</li>\n<li><p>getOne方法为延迟加载</p>\n<ul>\n<li><p>执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用<code>xxx==null</code>来判断是否有返回结果。</p>\n</li>\n<li><p>当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出<code>EntityNotFoundException</code>异常，如下：</p>\n<p><img src=\"/images/20190120/exception.png\" alt=\"exception\"></p>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"Spring Data JPA 2.0X版本之后findOne方法被findById方法替换","date":"2019-01-13T09:30:12.000Z","copyright":true,"_content":"在使用Spring Boot2.0整合Spring Data JPA时，发现继承`JpaRepository`接口之后无findOne方法，经查阅资料之后，发现已被新的API`findById`方法替换，新的API结合了java8的语法`Optional`（一个专门用于避免空指针NPE而开发的类），使用起来更为方便。\n<!--more-->\n## 目录\n* [**API说明**](#1)\n* [**使用示例**](#2)\n* [**参考链接**](#3)\n\n\n---\n<h2 id='1'>API说明</h2>\n\n新的API接口如下，去掉了findOne方法，添加了返回值为`Optional<T>`的`findById`方法,调用`findById`方法之后，返回`Optional`的实例，调用`Optional`的`get()`方法即可获取到实体。\n```java\npackage org.springframework.data.repository;\n@NoRepositoryBean\npublic interface CrudRepository<T, ID> extends Repository<T, ID> {\n    <S extends T> S save(S var1);\n\n    <S extends T> Iterable<S> saveAll(Iterable<S> var1);\n \t//新的根据主键获取实体的方法\n    Optional<T> findById(ID var1);\n\n    boolean existsById(ID var1);\n\n    Iterable<T> findAll();\n\n    Iterable<T> findAllById(Iterable<ID> var1);\n\n    long count();\n\n    void deleteById(ID var1);\n\n    void delete(T var1);\n\n    void deleteAll(Iterable<? extends T> var1);\n\n    void deleteAll();\n}\n\n\n\npackage java.util;\npublic final class Optional<T> {\n\t....\n\n   /**\n     * If a value is present in this {@code Optional}, returns the value,\n     * otherwise throws {@code NoSuchElementException}.\n     * 如果此@code可选中存在值，则返回该值，否则抛出@code nosuchelementexception。\n     * @return the non-null value held by this {@code Optional}\n     * @throws NoSuchElementException if there is no value present\n     *\n     * @see Optional#isPresent()\n     */\n    public T get() {\n        if (value == null) {\n            throw new NoSuchElementException(\"No value present\");\n        }\n        return value;\n    }\n\n\t....\n}\n```\n\n<h2 id='2'>使用示例</h2>\n\n根据上面的`Optional`的`get()`方法API注释说明可知，直接调用`get()`方法可能会跑出异常，以下为简单参考示例：\n```java\n\t//不建议姿势\n\ttry {\n\t    User user1 = userDao.findById(1L).get();\n\t}catch (Exception e){\n\t    //实体不存在，捕获异常\n\t}\n\t\n\t//相对费劲姿势\n\tOptional<User> user2 = userDao.findById(1L);\n\tif(user2.isPresent()){\n\t    //实体存在\n\t}else{\n\t    //实体不存在\n\t}\n\n\t//建议姿势，存在返回实体，不存在不抛异常，返回null\n\tUser user3 = userDao.findById(1L).orElse(null);\n```\n\n<h2 id='3'>参考链接</h2>\n\n- https://blog.csdn.net/u012211603/article/details/79828277\n\n\t\n","source":"_posts/Spring Data JPA 2.0X版本之后findOne方法被findById方法替换.md","raw":"---\ntitle: Spring Data JPA 2.0X版本之后findOne方法被findById方法替换\ndate: 2019-01-13 17:30:12\ntags:\n- Spring Data JPA\ncategories:\n- Spring\ncopyright: true\n---\n在使用Spring Boot2.0整合Spring Data JPA时，发现继承`JpaRepository`接口之后无findOne方法，经查阅资料之后，发现已被新的API`findById`方法替换，新的API结合了java8的语法`Optional`（一个专门用于避免空指针NPE而开发的类），使用起来更为方便。\n<!--more-->\n## 目录\n* [**API说明**](#1)\n* [**使用示例**](#2)\n* [**参考链接**](#3)\n\n\n---\n<h2 id='1'>API说明</h2>\n\n新的API接口如下，去掉了findOne方法，添加了返回值为`Optional<T>`的`findById`方法,调用`findById`方法之后，返回`Optional`的实例，调用`Optional`的`get()`方法即可获取到实体。\n```java\npackage org.springframework.data.repository;\n@NoRepositoryBean\npublic interface CrudRepository<T, ID> extends Repository<T, ID> {\n    <S extends T> S save(S var1);\n\n    <S extends T> Iterable<S> saveAll(Iterable<S> var1);\n \t//新的根据主键获取实体的方法\n    Optional<T> findById(ID var1);\n\n    boolean existsById(ID var1);\n\n    Iterable<T> findAll();\n\n    Iterable<T> findAllById(Iterable<ID> var1);\n\n    long count();\n\n    void deleteById(ID var1);\n\n    void delete(T var1);\n\n    void deleteAll(Iterable<? extends T> var1);\n\n    void deleteAll();\n}\n\n\n\npackage java.util;\npublic final class Optional<T> {\n\t....\n\n   /**\n     * If a value is present in this {@code Optional}, returns the value,\n     * otherwise throws {@code NoSuchElementException}.\n     * 如果此@code可选中存在值，则返回该值，否则抛出@code nosuchelementexception。\n     * @return the non-null value held by this {@code Optional}\n     * @throws NoSuchElementException if there is no value present\n     *\n     * @see Optional#isPresent()\n     */\n    public T get() {\n        if (value == null) {\n            throw new NoSuchElementException(\"No value present\");\n        }\n        return value;\n    }\n\n\t....\n}\n```\n\n<h2 id='2'>使用示例</h2>\n\n根据上面的`Optional`的`get()`方法API注释说明可知，直接调用`get()`方法可能会跑出异常，以下为简单参考示例：\n```java\n\t//不建议姿势\n\ttry {\n\t    User user1 = userDao.findById(1L).get();\n\t}catch (Exception e){\n\t    //实体不存在，捕获异常\n\t}\n\t\n\t//相对费劲姿势\n\tOptional<User> user2 = userDao.findById(1L);\n\tif(user2.isPresent()){\n\t    //实体存在\n\t}else{\n\t    //实体不存在\n\t}\n\n\t//建议姿势，存在返回实体，不存在不抛异常，返回null\n\tUser user3 = userDao.findById(1L).orElse(null);\n```\n\n<h2 id='3'>参考链接</h2>\n\n- https://blog.csdn.net/u012211603/article/details/79828277\n\n\t\n","slug":"Spring Data JPA 2.0X版本之后findOne方法被findById方法替换","published":1,"updated":"2019-01-22T12:19:04.682Z","_id":"cjr721bpj0007jcg2ldvm1ipq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在使用Spring Boot2.0整合Spring Data JPA时，发现继承<code>JpaRepository</code>接口之后无findOne方法，经查阅资料之后，发现已被新的API<code>findById</code>方法替换，新的API结合了java8的语法<code>Optional</code>（一个专门用于避免空指针NPE而开发的类），使用起来更为方便。<br><a id=\"more\"></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API说明</strong></a></li>\n<li><a href=\"#2\"><strong>使用示例</strong></a></li>\n<li><a href=\"#3\"><strong>参考链接</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">API说明</h2>\n\n<p>新的API接口如下，去掉了findOne方法，添加了返回值为<code>Optional&lt;T&gt;</code>的<code>findById</code>方法,调用<code>findById</code>方法之后，返回<code>Optional</code>的实例，调用<code>Optional</code>的<code>get()</code>方法即可获取到实体。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.data.repository;</span><br><span class=\"line\"><span class=\"meta\">@NoRepositoryBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Repository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; </span>&#123;</span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">S <span class=\"title\">save</span><span class=\"params\">(S var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">Iterable&lt;S&gt; <span class=\"title\">saveAll</span><span class=\"params\">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class=\"line\"> \t<span class=\"comment\">//新的根据主键获取实体的方法</span></span><br><span class=\"line\">    <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">findById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">existsById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAllById</span><span class=\"params\">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(T var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">(Iterable&lt;? extends T&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If a value is present in this &#123;<span class=\"doctag\">@code</span> Optional&#125;, returns the value,</span></span><br><span class=\"line\"><span class=\"comment\">     * otherwise throws &#123;<span class=\"doctag\">@code</span> NoSuchElementException&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果此<span class=\"doctag\">@code</span>可选中存在值，则返回该值，否则抛出<span class=\"doctag\">@code</span> nosuchelementexception。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the non-null value held by this &#123;<span class=\"doctag\">@code</span> Optional&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NoSuchElementException if there is no value present</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Optional#isPresent()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">\"No value present\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2\">使用示例</h2>\n\n<p>根据上面的<code>Optional</code>的<code>get()</code>方法API注释说明可知，直接调用<code>get()</code>方法可能会跑出异常，以下为简单参考示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不建议姿势</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    User user1 = userDao.findById(<span class=\"number\">1L</span>).get();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体不存在，捕获异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相对费劲姿势</span></span><br><span class=\"line\">Optional&lt;User&gt; user2 = userDao.findById(<span class=\"number\">1L</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(user2.isPresent())&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体存在</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体不存在</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建议姿势，存在返回实体，不存在不抛异常，返回null</span></span><br><span class=\"line\">User user3 = userDao.findById(<span class=\"number\">1L</span>).orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3\">参考链接</h2>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/u012211603/article/details/79828277\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012211603/article/details/79828277</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在使用Spring Boot2.0整合Spring Data JPA时，发现继承<code>JpaRepository</code>接口之后无findOne方法，经查阅资料之后，发现已被新的API<code>findById</code>方法替换，新的API结合了java8的语法<code>Optional</code>（一个专门用于避免空指针NPE而开发的类），使用起来更为方便。<br>","more":"</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API说明</strong></a></li>\n<li><a href=\"#2\"><strong>使用示例</strong></a></li>\n<li><a href=\"#3\"><strong>参考链接</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">API说明</h2>\n\n<p>新的API接口如下，去掉了findOne方法，添加了返回值为<code>Optional&lt;T&gt;</code>的<code>findById</code>方法,调用<code>findById</code>方法之后，返回<code>Optional</code>的实例，调用<code>Optional</code>的<code>get()</code>方法即可获取到实体。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.data.repository;</span><br><span class=\"line\"><span class=\"meta\">@NoRepositoryBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Repository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; </span>&#123;</span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">S <span class=\"title\">save</span><span class=\"params\">(S var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">Iterable&lt;S&gt; <span class=\"title\">saveAll</span><span class=\"params\">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class=\"line\"> \t<span class=\"comment\">//新的根据主键获取实体的方法</span></span><br><span class=\"line\">    <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">findById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">existsById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAllById</span><span class=\"params\">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(T var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">(Iterable&lt;? extends T&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If a value is present in this &#123;<span class=\"doctag\">@code</span> Optional&#125;, returns the value,</span></span><br><span class=\"line\"><span class=\"comment\">     * otherwise throws &#123;<span class=\"doctag\">@code</span> NoSuchElementException&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果此<span class=\"doctag\">@code</span>可选中存在值，则返回该值，否则抛出<span class=\"doctag\">@code</span> nosuchelementexception。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the non-null value held by this &#123;<span class=\"doctag\">@code</span> Optional&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NoSuchElementException if there is no value present</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Optional#isPresent()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">\"No value present\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2\">使用示例</h2>\n\n<p>根据上面的<code>Optional</code>的<code>get()</code>方法API注释说明可知，直接调用<code>get()</code>方法可能会跑出异常，以下为简单参考示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不建议姿势</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    User user1 = userDao.findById(<span class=\"number\">1L</span>).get();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体不存在，捕获异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相对费劲姿势</span></span><br><span class=\"line\">Optional&lt;User&gt; user2 = userDao.findById(<span class=\"number\">1L</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(user2.isPresent())&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体存在</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实体不存在</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建议姿势，存在返回实体，不存在不抛异常，返回null</span></span><br><span class=\"line\">User user3 = userDao.findById(<span class=\"number\">1L</span>).orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3\">参考链接</h2>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/u012211603/article/details/79828277\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012211603/article/details/79828277</a></li>\n</ul>"},{"title":"Spring Data JPA实体的生命周期总结","date":"2019-01-19T01:30:12.000Z","copyright":true,"_content":"Spring Data JPA是对JPA规范的再次封装和抽象，底层使用HIbernate JPA实现，Hibernate实体有三种状态，而Spring Data JPA实体生命周期也有类似的瞬时、托管、删除、游离四种状态，本文记录对实体四种状态的理解和验证过程。\n<!--more-->\n\n## 目录\n\n- [**四种状态**](#1)\n\n- [**API示例**](#2)\n\n  - [**persist**](#2.1)\n  - [**remove**](#2.2)\n  - [**merge**](#2.3)\n  - [**refresh**](#2.4)\n\n- [**参考链接**](#3)\n\n  \n\n---\n\n<h2 id='1'>四种状态</h2>\n\n首先以一张图，简单介绍写实体生命周期中四种状态之间的转换关系：\n\n![jpa-entity](/images/20190120/jpa-entity.png)\n\n**瞬时（New）：**瞬时对象，刚New出来的对象，无id，还未和持久化上下文（Persistence Context）建立关联。\n\n**托管（Managed）：**托管对象，有id，已和持久化上下文（Persistence Context）建立关联，对象属性的所有改动均会影响到数据库中对应记录。\n\n - 瞬时对象调用em.persist（）方法之后，对象由瞬时状态转换为托管状态\n - 通过find、get、query等方法，查询出来的对象为托管状态\n - 游离状态的对象调用em.merge方法，对象由游离状态转换为托管状态\n\n**游离（Datached）：**游离对象，有id值，但没有和持久化上下文（Persistence Context）建立关联。\n\n- 托管状态对象提交事务之后，对象状态由托管状态转换为游离状态\n- 托管状态对象调用em.clear()方法之后，对象状态由托管状态转换为游离状态\n- New出来的对象，id赋值之后，也为游离状态\n\n**删除（Removed）：**执行删除方法（em.remove()）但未提交事务的对象，有id值，没有和持久化上下文（Persistence Context）建立关联，即将从数据库中删除。\n\n<h2 id='2'>API示例</h2>\n\n> 针对JPA规范的四个方法，写了一个简单的Demo，进行了一一的验证，以下进行验证过程说明，完整代码传送门：https://github.com/hdlxt/SpringDataJpaDemo.git\n\n整体结构如下：\n\n![com.example.demo.controller](/images/20190124/demo.png)\n\n<h3 id='2.1'>persist</h3>\n\n**不同状态下执行em.persist()方法产生结果：**\n\n- 瞬时态：转化为托管态\n- 托管态：不发生改变，但执行instert语句\n- 删除态：转化为托管态\n- 游离态：**抛异常**\n\n**验证删除态和游离态持久化如下**:\n\n**1.持久化删除态**\n\n- 代码\n\n```java\n    /**\n      * 持久化删除态的对象\n      *@param id\n      * @return\n      */\n    @RequestMapping(\"/persistRemove/{id}\")\n    public String persistRemove(@PathVariable(\"id\")Long id){\n        try {\n            User user = userDao.findById(id);\n            userDao.persistRemove(user);\n        }catch (Exception e){\n            logger.error(\"持久化一个删除态的对象!\",e);\n            return REPONSE_ERR;\n        }\n        return REPONSE_SUCCESS;\n    }\n--------------------------------------------------------\n    /**\n     * 持久化删除态的对象\n     *\n     * @param user\n     */\n    @Override\n    public void persistRemove(User user) {\n        remove(user);\n        persist(user);\n        user.setName(\"persist remove success!\");\n    }   \n```\n\n\n\n- 步骤\n  - http://localhost:8080/user/persisNew/lxt/001，插入一条数据\n  - http://localhost:8080/user/list，检查插入结果，并获取`id`\n  - http://localhost:8080/user/persistRemove/{id} ,返回`SUCCESS！`\n  - http://localhost:8080/user/list  查看结果\n- 结果：结果数据并未删除，而且`name`由`lxt`变为`persist remove success!`\n\n**2.持久化游离态**\n\n- 代码\n\n  ```java\n     /**\n       * 持久化游离态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/persisDetached/{id}\")\n      public String persisDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.clear();\n              userDao.persist(user);\n          }catch (Exception e){\n              logger.error(\"持久化一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/persisDetached/{id} 返回`ERROR！`\n\n- 结果：抛异常\n\n  ```java\n  2019-01-26 00:00:34.090 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 持久化一个游离态的对象!\n  org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.example.demo.entity.User; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.example.demo.entity.User\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:317) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  \t....\n  ```\n\n<h3 id='2.2'>remove</h3>\n\n**不同状态下执行em.remove()方法产生结果：**\n\n- 瞬时态：对状态无影响，后台打印日志\n- 托管态：转化为托管态\n- 删除态：无影响，什么都不发生\n- 游离态：抛异常`Removing a detached instance com.example.demo.entity.User...`\n\n**验证过程如下：**\n\n**1.瞬时态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除new出来的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeNew\")\n      public String removeNew(){\n          try {\n              User user = new User().setName(\"lxt\").setNumber(\"007\");\n              userDao.remove(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个new的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/removeNew\n\n- 结果：返回`SUCCESS!`后台输出日志\n\n  ```java\n  2019-01-26 00:17:32.811  INFO 10136 --- [nio-8080-exec-5] o.h.e.i.DefaultDeleteEventListener       : HHH000114: Handling transient entity in delete processing\n  ```\n\n  \n\n**2.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除 删除态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeRemove/{id}\")\n      public String removeRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.removeRemove(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  -----------------------------------------------------\n     /**\n       * 删除 删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void removeRemove(User user) {\n          remove(user);\n          remove(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/removeRemove/{id} \n\n- 结果：返回`SUCCESS！`，后台输出一个查询sql和一个删除sql，证明第二个删除没有影响\n\n  ```java\n  Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?\n  Hibernate: delete from t_user where id=?\n  ```\n\n  \n\n**3.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除游离态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeDetached/{id}\")\n      public String removeDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.removeDetached(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  -------------------------------------------------------------\n     /**\n       * 删除游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void removeDetached(User user) {\n          clear();\n          remove(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/persisDetached/{id} \n\n- 结果：返回`ERROR!`抛异常\n\n  ```\n  2019-01-26 00:14:11.071 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 删除(remove)一个游离态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Removing a detached instance com.example.demo.entity.User#5; nested exception is java.lang.IllegalArgumentException: Removing a detached instance com.example.demo.entity.User#5\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n<h3 id='2.3'>merge</h3>\n\n**不同状态下执行em.merge()方法产生结果：**\n\n- 瞬时态：提交到数据库，返回一个新的托管态的对象\n- 托管态：根据原对象返回一个新的托管态的对象\n- 删除态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]...`\n- 游离态：提交到数据库，进行更新或插入，返回一个新的托管态的对象\n\n**合并（merge）删除态和游离态验证过程如下：**\n\n**1.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 持久化删除态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/mergeRemove/{id}\")\n      public String mergeRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.mergeRemove(user);\n          }catch (Exception e){\n              logger.error(\"合并(merge)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  --------------------------------------------------------------------\n      /**\n       * 合并删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void mergeRemove(User user) {\n          remove(user);\n          merge(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/mergeRemove/{id}\n\n- 结果：返回`ERROR`抛异常！\n\n  ```java\n  2019-01-26 00:23:01.187  INFO 10136 --- [nio-8080-exec-3] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory\n  Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?\n  2019-01-26 00:23:01.322 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 合并(merge)一个删除态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]; nested exception is java.lang.IllegalArgumentException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n**2.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 持久化游离态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/mergeDetached/{id}\")\n      public String mergeDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.mergeDetached(user);\n          }catch (Exception e){\n              logger.error(\"合并(merge)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ---------------------------------------------------------------\n     /**\n       * 合并游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void mergeDetached(User user) {\n          clear();\n          User newUser = merge(user);\n          newUser.setName(\"newUser merge detached success!\");\n          user.setName(\"user merge detached success!\");\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`\n  - http://localhost:8080/user/list，查看\n\n- 结果:对应实体的`name`值变为`newUser merge detached success!`，证明返回新的对象为托管态对象\n\n**2.游离态**\n\n<h3 id='2.4'>refresh</h3>\n\n> 方法可以保证当前的实例与数据库中的实例的内容一致，**注意：是反向同步，将数据库中的数据同步到实体中**\n\n**不同状态下执行em.refresh()方法产生结果：**\n\n- 瞬时态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n- 托管态： 将数据库中的数据同步到实体中，返回一个托管态的对象。\n- 删除态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n- 游离态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n\n**总结：**只有被托管的对象才可以被refresh。\n\n**1.瞬时态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新new出来的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshNew\")\n      public String refreshNew(){\n          try {\n              User user = new User().setName(\"lxt\").setNumber(\"007\");\n              userDao.refresh(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个new的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/refreshNew\n\n- 结果：返回`ERROR!`抛异常\n\n  ```java\n  2019-01-26 00:38:18.037 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 刷新(refresh)一个new的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n**2.托管态：**\n\n- 代码\n\n  ```java\n     /**\n       * 刷新托管态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshManaged/{id}\")\n      public String refreshManaged(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshManaged(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个托管态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ------------------------------------------------------------------\n       /**\n       * 刷新托管态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshManaged(User user) {\n          user.setName(\"refresh before!\");\n          refresh(user);\n          logger.info(\"user:\"+user);\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`\n  - http://localhost:8080/user/list\n\n- 结果:数据库中数据并无变化，日志打印为数据库中查询出的值，并未打印`refresh before!`\n\n**3.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新删除态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshRemove/{id}\")\n      public String refreshRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshRemove(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ----------------------------------------------------------------------   \n     /**\n       * 刷新删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshRemove(User user) {\n         remove(user);\n         user.setName(\"refresh remove before！\");\n         refresh(user);\n          user.setName(\"refresh remove after！\");\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshRemove/{id}\n\n- 结果：返回`ERROR!`抛异常\n\n  ```java\n  2019-01-26 00:40:57.713 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 刷新(refresh)一个删除态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n**4.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新游离态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshDetached/{id}\")\n      public String refreshDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshDetached(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ----------------------------------------------------------------------\n     /**\n       * 刷新游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshDetached(User user) {\n          clear();\n          refresh(user);\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshDetached/{id},`\n\n- 结果:返回`ERROR！`抛异常！\n\n  ```java\n  2019-01-26 00:42:09.598 ERROR 10136 --- [nio-8080-exec-7] c.e.demo.controller.UserController       : 刷新(refresh)一个游离态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n<h2 id='3'>参考链接</h2>\n\n- [JPA EntityManager的四个主要方法 ——persist,merge,refresh和remove](https://blog.csdn.net/javavenus/article/details/6289616)\n- [JPA 实体生命周期理解和总结](https://blog.csdn.net/yingxiake/article/details/50968059)\n\n\n\n","source":"_posts/Spring Data JPA实体的生命周期总结.md","raw":"---\ntitle: Spring Data JPA实体的生命周期总结\ndate: 2019-01-19 9:30:12\ntags:\n- Spring Data JPA\ncategories:\n- Spring\ncopyright: true\n---\nSpring Data JPA是对JPA规范的再次封装和抽象，底层使用HIbernate JPA实现，Hibernate实体有三种状态，而Spring Data JPA实体生命周期也有类似的瞬时、托管、删除、游离四种状态，本文记录对实体四种状态的理解和验证过程。\n<!--more-->\n\n## 目录\n\n- [**四种状态**](#1)\n\n- [**API示例**](#2)\n\n  - [**persist**](#2.1)\n  - [**remove**](#2.2)\n  - [**merge**](#2.3)\n  - [**refresh**](#2.4)\n\n- [**参考链接**](#3)\n\n  \n\n---\n\n<h2 id='1'>四种状态</h2>\n\n首先以一张图，简单介绍写实体生命周期中四种状态之间的转换关系：\n\n![jpa-entity](/images/20190120/jpa-entity.png)\n\n**瞬时（New）：**瞬时对象，刚New出来的对象，无id，还未和持久化上下文（Persistence Context）建立关联。\n\n**托管（Managed）：**托管对象，有id，已和持久化上下文（Persistence Context）建立关联，对象属性的所有改动均会影响到数据库中对应记录。\n\n - 瞬时对象调用em.persist（）方法之后，对象由瞬时状态转换为托管状态\n - 通过find、get、query等方法，查询出来的对象为托管状态\n - 游离状态的对象调用em.merge方法，对象由游离状态转换为托管状态\n\n**游离（Datached）：**游离对象，有id值，但没有和持久化上下文（Persistence Context）建立关联。\n\n- 托管状态对象提交事务之后，对象状态由托管状态转换为游离状态\n- 托管状态对象调用em.clear()方法之后，对象状态由托管状态转换为游离状态\n- New出来的对象，id赋值之后，也为游离状态\n\n**删除（Removed）：**执行删除方法（em.remove()）但未提交事务的对象，有id值，没有和持久化上下文（Persistence Context）建立关联，即将从数据库中删除。\n\n<h2 id='2'>API示例</h2>\n\n> 针对JPA规范的四个方法，写了一个简单的Demo，进行了一一的验证，以下进行验证过程说明，完整代码传送门：https://github.com/hdlxt/SpringDataJpaDemo.git\n\n整体结构如下：\n\n![com.example.demo.controller](/images/20190124/demo.png)\n\n<h3 id='2.1'>persist</h3>\n\n**不同状态下执行em.persist()方法产生结果：**\n\n- 瞬时态：转化为托管态\n- 托管态：不发生改变，但执行instert语句\n- 删除态：转化为托管态\n- 游离态：**抛异常**\n\n**验证删除态和游离态持久化如下**:\n\n**1.持久化删除态**\n\n- 代码\n\n```java\n    /**\n      * 持久化删除态的对象\n      *@param id\n      * @return\n      */\n    @RequestMapping(\"/persistRemove/{id}\")\n    public String persistRemove(@PathVariable(\"id\")Long id){\n        try {\n            User user = userDao.findById(id);\n            userDao.persistRemove(user);\n        }catch (Exception e){\n            logger.error(\"持久化一个删除态的对象!\",e);\n            return REPONSE_ERR;\n        }\n        return REPONSE_SUCCESS;\n    }\n--------------------------------------------------------\n    /**\n     * 持久化删除态的对象\n     *\n     * @param user\n     */\n    @Override\n    public void persistRemove(User user) {\n        remove(user);\n        persist(user);\n        user.setName(\"persist remove success!\");\n    }   \n```\n\n\n\n- 步骤\n  - http://localhost:8080/user/persisNew/lxt/001，插入一条数据\n  - http://localhost:8080/user/list，检查插入结果，并获取`id`\n  - http://localhost:8080/user/persistRemove/{id} ,返回`SUCCESS！`\n  - http://localhost:8080/user/list  查看结果\n- 结果：结果数据并未删除，而且`name`由`lxt`变为`persist remove success!`\n\n**2.持久化游离态**\n\n- 代码\n\n  ```java\n     /**\n       * 持久化游离态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/persisDetached/{id}\")\n      public String persisDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.clear();\n              userDao.persist(user);\n          }catch (Exception e){\n              logger.error(\"持久化一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/persisDetached/{id} 返回`ERROR！`\n\n- 结果：抛异常\n\n  ```java\n  2019-01-26 00:00:34.090 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 持久化一个游离态的对象!\n  org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.example.demo.entity.User; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.example.demo.entity.User\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:317) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  \t....\n  ```\n\n<h3 id='2.2'>remove</h3>\n\n**不同状态下执行em.remove()方法产生结果：**\n\n- 瞬时态：对状态无影响，后台打印日志\n- 托管态：转化为托管态\n- 删除态：无影响，什么都不发生\n- 游离态：抛异常`Removing a detached instance com.example.demo.entity.User...`\n\n**验证过程如下：**\n\n**1.瞬时态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除new出来的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeNew\")\n      public String removeNew(){\n          try {\n              User user = new User().setName(\"lxt\").setNumber(\"007\");\n              userDao.remove(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个new的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/removeNew\n\n- 结果：返回`SUCCESS!`后台输出日志\n\n  ```java\n  2019-01-26 00:17:32.811  INFO 10136 --- [nio-8080-exec-5] o.h.e.i.DefaultDeleteEventListener       : HHH000114: Handling transient entity in delete processing\n  ```\n\n  \n\n**2.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除 删除态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeRemove/{id}\")\n      public String removeRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.removeRemove(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  -----------------------------------------------------\n     /**\n       * 删除 删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void removeRemove(User user) {\n          remove(user);\n          remove(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/removeRemove/{id} \n\n- 结果：返回`SUCCESS！`，后台输出一个查询sql和一个删除sql，证明第二个删除没有影响\n\n  ```java\n  Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?\n  Hibernate: delete from t_user where id=?\n  ```\n\n  \n\n**3.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 删除游离态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/removeDetached/{id}\")\n      public String removeDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.removeDetached(user);\n          }catch (Exception e){\n              logger.error(\"删除(remove)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  -------------------------------------------------------------\n     /**\n       * 删除游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void removeDetached(User user) {\n          clear();\n          remove(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/persisDetached/{id} \n\n- 结果：返回`ERROR!`抛异常\n\n  ```\n  2019-01-26 00:14:11.071 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 删除(remove)一个游离态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Removing a detached instance com.example.demo.entity.User#5; nested exception is java.lang.IllegalArgumentException: Removing a detached instance com.example.demo.entity.User#5\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n<h3 id='2.3'>merge</h3>\n\n**不同状态下执行em.merge()方法产生结果：**\n\n- 瞬时态：提交到数据库，返回一个新的托管态的对象\n- 托管态：根据原对象返回一个新的托管态的对象\n- 删除态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]...`\n- 游离态：提交到数据库，进行更新或插入，返回一个新的托管态的对象\n\n**合并（merge）删除态和游离态验证过程如下：**\n\n**1.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 持久化删除态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/mergeRemove/{id}\")\n      public String mergeRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.mergeRemove(user);\n          }catch (Exception e){\n              logger.error(\"合并(merge)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  --------------------------------------------------------------------\n      /**\n       * 合并删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void mergeRemove(User user) {\n          remove(user);\n          merge(user);\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/mergeRemove/{id}\n\n- 结果：返回`ERROR`抛异常！\n\n  ```java\n  2019-01-26 00:23:01.187  INFO 10136 --- [nio-8080-exec-3] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory\n  Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?\n  2019-01-26 00:23:01.322 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 合并(merge)一个删除态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]; nested exception is java.lang.IllegalArgumentException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#<null>]\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n**2.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 持久化游离态的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/mergeDetached/{id}\")\n      public String mergeDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.mergeDetached(user);\n          }catch (Exception e){\n              logger.error(\"合并(merge)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ---------------------------------------------------------------\n     /**\n       * 合并游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void mergeDetached(User user) {\n          clear();\n          User newUser = merge(user);\n          newUser.setName(\"newUser merge detached success!\");\n          user.setName(\"user merge detached success!\");\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`\n  - http://localhost:8080/user/list，查看\n\n- 结果:对应实体的`name`值变为`newUser merge detached success!`，证明返回新的对象为托管态对象\n\n**2.游离态**\n\n<h3 id='2.4'>refresh</h3>\n\n> 方法可以保证当前的实例与数据库中的实例的内容一致，**注意：是反向同步，将数据库中的数据同步到实体中**\n\n**不同状态下执行em.refresh()方法产生结果：**\n\n- 瞬时态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n- 托管态： 将数据库中的数据同步到实体中，返回一个托管态的对象。\n- 删除态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n- 游离态：抛异常`org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; `\n\n**总结：**只有被托管的对象才可以被refresh。\n\n**1.瞬时态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新new出来的对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshNew\")\n      public String refreshNew(){\n          try {\n              User user = new User().setName(\"lxt\").setNumber(\"007\");\n              userDao.refresh(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个new的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ```\n\n  \n\n- 步骤\n\n  - http://localhost:8080/user/refreshNew\n\n- 结果：返回`ERROR!`抛异常\n\n  ```java\n  2019-01-26 00:38:18.037 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 刷新(refresh)一个new的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n**2.托管态：**\n\n- 代码\n\n  ```java\n     /**\n       * 刷新托管态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshManaged/{id}\")\n      public String refreshManaged(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshManaged(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个托管态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ------------------------------------------------------------------\n       /**\n       * 刷新托管态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshManaged(User user) {\n          user.setName(\"refresh before!\");\n          refresh(user);\n          logger.info(\"user:\"+user);\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`\n  - http://localhost:8080/user/list\n\n- 结果:数据库中数据并无变化，日志打印为数据库中查询出的值，并未打印`refresh before!`\n\n**3.删除态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新删除态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshRemove/{id}\")\n      public String refreshRemove(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshRemove(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个删除态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ----------------------------------------------------------------------   \n     /**\n       * 刷新删除态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshRemove(User user) {\n         remove(user);\n         user.setName(\"refresh remove before！\");\n         refresh(user);\n          user.setName(\"refresh remove after！\");\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshRemove/{id}\n\n- 结果：返回`ERROR!`抛异常\n\n  ```java\n  2019-01-26 00:40:57.713 ERROR 10136 --- [nio-8080-exec-3] c.e.demo.controller.UserController       : 刷新(refresh)一个删除态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n**4.游离态**\n\n- 代码\n\n  ```java\n      /**\n       * 刷新游离态对象\n       *@param id\n       * @return\n       */\n      @RequestMapping(\"/refreshDetached/{id}\")\n      public String refreshDetached(@PathVariable(\"id\")Long id){\n          try {\n              User user = userDao.findById(id);\n              userDao.refreshDetached(user);\n          }catch (Exception e){\n              logger.error(\"刷新(refresh)一个游离态的对象!\",e);\n              return REPONSE_ERR;\n          }\n          return REPONSE_SUCCESS;\n      }\n  ----------------------------------------------------------------------\n     /**\n       * 刷新游离态的对象\n       *\n       * @param user\n       */\n      @Override\n      public void refreshDetached(User user) {\n          clear();\n          refresh(user);\n      }\n  ```\n\n- 步骤\n\n  - http://localhost:8080/user/list，获取`id`\n  - http://localhost:8080/user/refreshDetached/{id},`\n\n- 结果:返回`ERROR！`抛异常！\n\n  ```java\n  2019-01-26 00:42:09.598 ERROR 10136 --- [nio-8080-exec-7] c.e.demo.controller.UserController       : 刷新(refresh)一个游离态的对象!\n  \n  org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed\n  \tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\n  \t\n  ```\n\n  \n\n<h2 id='3'>参考链接</h2>\n\n- [JPA EntityManager的四个主要方法 ——persist,merge,refresh和remove](https://blog.csdn.net/javavenus/article/details/6289616)\n- [JPA 实体生命周期理解和总结](https://blog.csdn.net/yingxiake/article/details/50968059)\n\n\n\n","slug":"Spring Data JPA实体的生命周期总结","published":1,"updated":"2019-01-25T16:58:30.571Z","_id":"cjr721bpk0008jcg2kxrl2lcy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Spring Data JPA是对JPA规范的再次封装和抽象，底层使用HIbernate JPA实现，Hibernate实体有三种状态，而Spring Data JPA实体生命周期也有类似的瞬时、托管、删除、游离四种状态，本文记录对实体四种状态的理解和验证过程。<br><a id=\"more\"></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#1\"><strong>四种状态</strong></a></p>\n</li>\n<li><p><a href=\"#2\"><strong>API示例</strong></a></p>\n<ul>\n<li><a href=\"#2.1\"><strong>persist</strong></a></li>\n<li><a href=\"#2.2\"><strong>remove</strong></a></li>\n<li><a href=\"#2.3\"><strong>merge</strong></a></li>\n<li><a href=\"#2.4\"><strong>refresh</strong></a></li>\n</ul>\n</li>\n<li><p><a href=\"#3\"><strong>参考链接</strong></a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"1\">四种状态</h2>\n\n<p>首先以一张图，简单介绍写实体生命周期中四种状态之间的转换关系：</p>\n<p><img src=\"/images/20190120/jpa-entity.png\" alt=\"jpa-entity\"></p>\n<p><strong>瞬时（New）：</strong>瞬时对象，刚New出来的对象，无id，还未和持久化上下文（Persistence Context）建立关联。</p>\n<p><strong>托管（Managed）：</strong>托管对象，有id，已和持久化上下文（Persistence Context）建立关联，对象属性的所有改动均会影响到数据库中对应记录。</p>\n<ul>\n<li>瞬时对象调用em.persist（）方法之后，对象由瞬时状态转换为托管状态</li>\n<li>通过find、get、query等方法，查询出来的对象为托管状态</li>\n<li>游离状态的对象调用em.merge方法，对象由游离状态转换为托管状态</li>\n</ul>\n<p><strong>游离（Datached）：</strong>游离对象，有id值，但没有和持久化上下文（Persistence Context）建立关联。</p>\n<ul>\n<li>托管状态对象提交事务之后，对象状态由托管状态转换为游离状态</li>\n<li>托管状态对象调用em.clear()方法之后，对象状态由托管状态转换为游离状态</li>\n<li>New出来的对象，id赋值之后，也为游离状态</li>\n</ul>\n<p><strong>删除（Removed）：</strong>执行删除方法（em.remove()）但未提交事务的对象，有id值，没有和持久化上下文（Persistence Context）建立关联，即将从数据库中删除。</p>\n<h2 id=\"2\">API示例</h2>\n\n<blockquote>\n<p>针对JPA规范的四个方法，写了一个简单的Demo，进行了一一的验证，以下进行验证过程说明，完整代码传送门：<a href=\"https://github.com/hdlxt/SpringDataJpaDemo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/hdlxt/SpringDataJpaDemo.git</a></p>\n</blockquote>\n<p>整体结构如下：</p>\n<p><img src=\"/images/20190124/demo.png\" alt=\"com.example.demo.controller\"></p>\n<h3 id=\"2.1\">persist</h3>\n\n<p><strong>不同状态下执行em.persist()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：转化为托管态</li>\n<li>托管态：不发生改变，但执行instert语句</li>\n<li>删除态：转化为托管态</li>\n<li>游离态：<strong>抛异常</strong></li>\n</ul>\n<p><strong>验证删除态和游离态持久化如下</strong>:</p>\n<p><strong>1.持久化删除态</strong></p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">      *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/persistRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">persistRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.persistRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"持久化一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">persistRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        persist(user);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"persist remove success!\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>步骤<ul>\n<li><a href=\"http://localhost:8080/user/persisNew/lxt/001，插入一条数据\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisNew/lxt/001，插入一条数据</a></li>\n<li><a href=\"http://localhost:8080/user/list，检查插入结果，并获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，检查插入结果，并获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persistRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persistRemove/{id}</a> ,返回<code>SUCCESS！</code></li>\n<li><a href=\"http://localhost:8080/user/list\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list</a>  查看结果</li>\n</ul>\n</li>\n<li>结果：结果数据并未删除，而且<code>name</code>由<code>lxt</code>变为<code>persist remove success!</code></li>\n</ul>\n<p><strong>2.持久化游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 持久化游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">  *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/persisDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">persisDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         User user = userDao.findById(id);</span><br><span class=\"line\">         userDao.clear();</span><br><span class=\"line\">         userDao.persist(user);</span><br><span class=\"line\">     &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">         logger.error(<span class=\"string\">\"持久化一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persisDetached/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisDetached/{id}</a> 返回<code>ERROR！</code></li>\n</ul>\n</li>\n<li><p>结果：抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">34.090</span> ERROR <span class=\"number\">5228</span> --- [io-<span class=\"number\">8080</span>-exec-<span class=\"number\">10</span>] c.e.demo.controller.UserController       : 持久化一个游离态的对象!</span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.example.demo.entity.User; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.example.demo.entity.User</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:<span class=\"number\">317</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">253</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:<span class=\"number\">242</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t....</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2.2\">remove</h3>\n\n<p><strong>不同状态下执行em.remove()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：对状态无影响，后台打印日志</li>\n<li>托管态：转化为托管态</li>\n<li>删除态：无影响，什么都不发生</li>\n<li>游离态：抛异常<code>Removing a detached instance com.example.demo.entity.User...</code></li>\n</ul>\n<p><strong>验证过程如下：</strong></p>\n<p><strong>1.瞬时态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除new出来的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeNew\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeNew</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User().setName(<span class=\"string\">\"lxt\"</span>).setNumber(<span class=\"string\">\"007\"</span>);</span><br><span class=\"line\">        userDao.remove(user);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\"删除(remove)一个new的对象!\"</span>,e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/removeNew\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/removeNew</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>SUCCESS!</code>后台输出日志</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">17</span>:<span class=\"number\">32.811</span>  INFO <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">5</span>] o.h.e.i.DefaultDeleteEventListener       : HHH000114: Handling <span class=\"keyword\">transient</span> entity in delete processing</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除 删除态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.removeRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"删除(remove)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">-----------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除 删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/removeRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/removeRemove/{id}</a> </li>\n</ul>\n</li>\n<li><p>结果：返回<code>SUCCESS！</code>，后台输出一个查询sql和一个删除sql，证明第二个删除没有影响</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?</span><br><span class=\"line\">Hibernate: delete from t_user where id=?</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>3.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除游离态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.removeDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"删除(remove)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">-------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persisDetached/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisDetached/{id}</a> </li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-01-26 00:14:11.071 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 删除(remove)一个游离态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Removing a detached instance com.example.demo.entity.User#5; nested exception is java.lang.IllegalArgumentException: Removing a detached instance com.example.demo.entity.User#5</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2.3\">merge</h3>\n\n<p><strong>不同状态下执行em.merge()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：提交到数据库，返回一个新的托管态的对象</li>\n<li>托管态：根据原对象返回一个新的托管态的对象</li>\n<li>删除态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]...</code></li>\n<li>游离态：提交到数据库，进行更新或插入，返回一个新的托管态的对象</li>\n</ul>\n<p><strong>合并（merge）删除态和游离态验证过程如下：</strong></p>\n<p><strong>1.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/mergeRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">mergeRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.mergeRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"合并(merge)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        merge(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/mergeRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/mergeRemove/{id}</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR</code>抛异常！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">23</span>:<span class=\"number\">01.187</span>  INFO <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory</span><br><span class=\"line\">Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?</span><br><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">23</span>:<span class=\"number\">01.322</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 合并(merge)一个删除态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]; nested exception is java.lang.IllegalArgumentException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/mergeDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">mergeDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.mergeDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"合并(merge)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        User newUser = merge(user);</span><br><span class=\"line\">        newUser.setName(<span class=\"string\">\"newUser merge detached success!\"</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"user merge detached success!\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`</a></li>\n<li><a href=\"http://localhost:8080/user/list，查看\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，查看</a></li>\n</ul>\n</li>\n<li><p>结果:对应实体的<code>name</code>值变为<code>newUser merge detached success!</code>，证明返回新的对象为托管态对象</p>\n</li>\n</ul>\n<p><strong>2.游离态</strong></p>\n<h3 id=\"2.4\">refresh</h3>\n\n<blockquote>\n<p>方法可以保证当前的实例与数据库中的实例的内容一致，<strong>注意：是反向同步，将数据库中的数据同步到实体中</strong></p>\n</blockquote>\n<p><strong>不同状态下执行em.refresh()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n<li>托管态： 将数据库中的数据同步到实体中，返回一个托管态的对象。</li>\n<li>删除态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n<li>游离态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n</ul>\n<p><strong>总结：</strong>只有被托管的对象才可以被refresh。</p>\n<p><strong>1.瞬时态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 刷新new出来的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshNew\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshNew</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User().setName(<span class=\"string\">\"lxt\"</span>).setNumber(<span class=\"string\">\"007\"</span>);</span><br><span class=\"line\">        userDao.refresh(user);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\"刷新(refresh)一个new的对象!\"</span>,e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/refreshNew\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshNew</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">38</span>:<span class=\"number\">18.037</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个<span class=\"keyword\">new</span>的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.托管态：</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新托管态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshManaged/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshManaged</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshManaged(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个托管态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">------------------------------------------------------------------</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新托管态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshManaged</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"refresh before!\"</span>);</span><br><span class=\"line\">        refresh(user);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"user:\"</span>+user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`</a></li>\n<li><a href=\"http://localhost:8080/user/list\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list</a></li>\n</ul>\n</li>\n<li><p>结果:数据库中数据并无变化，日志打印为数据库中查询出的值，并未打印<code>refresh before!</code></p>\n</li>\n</ul>\n<p><strong>3.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新删除态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">----------------------------------------------------------------------   </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">       remove(user);</span><br><span class=\"line\">       user.setName(<span class=\"string\">\"refresh remove before！\"</span>);</span><br><span class=\"line\">       refresh(user);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"refresh remove after！\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshRemove/{id}</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">40</span>:<span class=\"number\">57.713</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个删除态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>4.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新游离态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">----------------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        refresh(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshDetached/{id},`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshDetached/{id},`</a></li>\n</ul>\n</li>\n<li><p>结果:返回<code>ERROR！</code>抛异常！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">42</span>:<span class=\"number\">09.598</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">7</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个游离态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3\">参考链接</h2>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/javavenus/article/details/6289616\" target=\"_blank\" rel=\"noopener\">JPA EntityManager的四个主要方法 ——persist,merge,refresh和remove</a></li>\n<li><a href=\"https://blog.csdn.net/yingxiake/article/details/50968059\" target=\"_blank\" rel=\"noopener\">JPA 实体生命周期理解和总结</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Spring Data JPA是对JPA规范的再次封装和抽象，底层使用HIbernate JPA实现，Hibernate实体有三种状态，而Spring Data JPA实体生命周期也有类似的瞬时、托管、删除、游离四种状态，本文记录对实体四种状态的理解和验证过程。<br>","more":"</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#1\"><strong>四种状态</strong></a></p>\n</li>\n<li><p><a href=\"#2\"><strong>API示例</strong></a></p>\n<ul>\n<li><a href=\"#2.1\"><strong>persist</strong></a></li>\n<li><a href=\"#2.2\"><strong>remove</strong></a></li>\n<li><a href=\"#2.3\"><strong>merge</strong></a></li>\n<li><a href=\"#2.4\"><strong>refresh</strong></a></li>\n</ul>\n</li>\n<li><p><a href=\"#3\"><strong>参考链接</strong></a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"1\">四种状态</h2>\n\n<p>首先以一张图，简单介绍写实体生命周期中四种状态之间的转换关系：</p>\n<p><img src=\"/images/20190120/jpa-entity.png\" alt=\"jpa-entity\"></p>\n<p><strong>瞬时（New）：</strong>瞬时对象，刚New出来的对象，无id，还未和持久化上下文（Persistence Context）建立关联。</p>\n<p><strong>托管（Managed）：</strong>托管对象，有id，已和持久化上下文（Persistence Context）建立关联，对象属性的所有改动均会影响到数据库中对应记录。</p>\n<ul>\n<li>瞬时对象调用em.persist（）方法之后，对象由瞬时状态转换为托管状态</li>\n<li>通过find、get、query等方法，查询出来的对象为托管状态</li>\n<li>游离状态的对象调用em.merge方法，对象由游离状态转换为托管状态</li>\n</ul>\n<p><strong>游离（Datached）：</strong>游离对象，有id值，但没有和持久化上下文（Persistence Context）建立关联。</p>\n<ul>\n<li>托管状态对象提交事务之后，对象状态由托管状态转换为游离状态</li>\n<li>托管状态对象调用em.clear()方法之后，对象状态由托管状态转换为游离状态</li>\n<li>New出来的对象，id赋值之后，也为游离状态</li>\n</ul>\n<p><strong>删除（Removed）：</strong>执行删除方法（em.remove()）但未提交事务的对象，有id值，没有和持久化上下文（Persistence Context）建立关联，即将从数据库中删除。</p>\n<h2 id=\"2\">API示例</h2>\n\n<blockquote>\n<p>针对JPA规范的四个方法，写了一个简单的Demo，进行了一一的验证，以下进行验证过程说明，完整代码传送门：<a href=\"https://github.com/hdlxt/SpringDataJpaDemo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/hdlxt/SpringDataJpaDemo.git</a></p>\n</blockquote>\n<p>整体结构如下：</p>\n<p><img src=\"/images/20190124/demo.png\" alt=\"com.example.demo.controller\"></p>\n<h3 id=\"2.1\">persist</h3>\n\n<p><strong>不同状态下执行em.persist()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：转化为托管态</li>\n<li>托管态：不发生改变，但执行instert语句</li>\n<li>删除态：转化为托管态</li>\n<li>游离态：<strong>抛异常</strong></li>\n</ul>\n<p><strong>验证删除态和游离态持久化如下</strong>:</p>\n<p><strong>1.持久化删除态</strong></p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">      *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/persistRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">persistRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.persistRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"持久化一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">persistRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        persist(user);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"persist remove success!\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>步骤<ul>\n<li><a href=\"http://localhost:8080/user/persisNew/lxt/001，插入一条数据\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisNew/lxt/001，插入一条数据</a></li>\n<li><a href=\"http://localhost:8080/user/list，检查插入结果，并获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，检查插入结果，并获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persistRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persistRemove/{id}</a> ,返回<code>SUCCESS！</code></li>\n<li><a href=\"http://localhost:8080/user/list\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list</a>  查看结果</li>\n</ul>\n</li>\n<li>结果：结果数据并未删除，而且<code>name</code>由<code>lxt</code>变为<code>persist remove success!</code></li>\n</ul>\n<p><strong>2.持久化游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 持久化游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">  *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/persisDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">persisDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         User user = userDao.findById(id);</span><br><span class=\"line\">         userDao.clear();</span><br><span class=\"line\">         userDao.persist(user);</span><br><span class=\"line\">     &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">         logger.error(<span class=\"string\">\"持久化一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persisDetached/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisDetached/{id}</a> 返回<code>ERROR！</code></li>\n</ul>\n</li>\n<li><p>结果：抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">34.090</span> ERROR <span class=\"number\">5228</span> --- [io-<span class=\"number\">8080</span>-exec-<span class=\"number\">10</span>] c.e.demo.controller.UserController       : 持久化一个游离态的对象!</span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: detached entity passed to persist: com.example.demo.entity.User; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.example.demo.entity.User</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:<span class=\"number\">317</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">253</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:<span class=\"number\">242</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t....</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2.2\">remove</h3>\n\n<p><strong>不同状态下执行em.remove()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：对状态无影响，后台打印日志</li>\n<li>托管态：转化为托管态</li>\n<li>删除态：无影响，什么都不发生</li>\n<li>游离态：抛异常<code>Removing a detached instance com.example.demo.entity.User...</code></li>\n</ul>\n<p><strong>验证过程如下：</strong></p>\n<p><strong>1.瞬时态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除new出来的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeNew\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeNew</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User().setName(<span class=\"string\">\"lxt\"</span>).setNumber(<span class=\"string\">\"007\"</span>);</span><br><span class=\"line\">        userDao.remove(user);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\"删除(remove)一个new的对象!\"</span>,e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/removeNew\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/removeNew</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>SUCCESS!</code>后台输出日志</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">17</span>:<span class=\"number\">32.811</span>  INFO <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">5</span>] o.h.e.i.DefaultDeleteEventListener       : HHH000114: Handling <span class=\"keyword\">transient</span> entity in delete processing</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除 删除态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.removeRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"删除(remove)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">-----------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除 删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/removeRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/removeRemove/{id}</a> </li>\n</ul>\n</li>\n<li><p>结果：返回<code>SUCCESS！</code>，后台输出一个查询sql和一个删除sql，证明第二个删除没有影响</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?</span><br><span class=\"line\">Hibernate: delete from t_user where id=?</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>3.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除游离态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/removeDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.removeDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"删除(remove)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">-------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/persisDetached/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/persisDetached/{id}</a> </li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-01-26 00:14:11.071 ERROR 5228 --- [io-8080-exec-10] c.e.demo.controller.UserController       : 删除(remove)一个游离态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Removing a detached instance com.example.demo.entity.User#5; nested exception is java.lang.IllegalArgumentException: Removing a detached instance com.example.demo.entity.User#5</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:373) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2.3\">merge</h3>\n\n<p><strong>不同状态下执行em.merge()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：提交到数据库，返回一个新的托管态的对象</li>\n<li>托管态：根据原对象返回一个新的托管态的对象</li>\n<li>删除态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]...</code></li>\n<li>游离态：提交到数据库，进行更新或插入，返回一个新的托管态的对象</li>\n</ul>\n<p><strong>合并（merge）删除态和游离态验证过程如下：</strong></p>\n<p><strong>1.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/mergeRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">mergeRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.mergeRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"合并(merge)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        remove(user);</span><br><span class=\"line\">        merge(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/mergeRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/mergeRemove/{id}</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR</code>抛异常！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">23</span>:<span class=\"number\">01.187</span>  INFO <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory</span><br><span class=\"line\">Hibernate: select user0_.id as id1_0_, user0_.name as name2_0_, user0_.number as number3_0_ from t_user user0_ where user0_.id=?</span><br><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">23</span>:<span class=\"number\">01.322</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 合并(merge)一个删除态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]; nested exception is java.lang.IllegalArgumentException: org.hibernate.ObjectDeletedException: deleted instance passed to merge: [com.example.demo.entity.User#&lt;null&gt;]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 持久化游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/mergeDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">mergeDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.mergeDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"合并(merge)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        User newUser = merge(user);</span><br><span class=\"line\">        newUser.setName(<span class=\"string\">\"newUser merge detached success!\"</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"user merge detached success!\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/mergeDetached/5，返回`SUCCESS!`</a></li>\n<li><a href=\"http://localhost:8080/user/list，查看\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，查看</a></li>\n</ul>\n</li>\n<li><p>结果:对应实体的<code>name</code>值变为<code>newUser merge detached success!</code>，证明返回新的对象为托管态对象</p>\n</li>\n</ul>\n<p><strong>2.游离态</strong></p>\n<h3 id=\"2.4\">refresh</h3>\n\n<blockquote>\n<p>方法可以保证当前的实例与数据库中的实例的内容一致，<strong>注意：是反向同步，将数据库中的数据同步到实体中</strong></p>\n</blockquote>\n<p><strong>不同状态下执行em.refresh()方法产生结果：</strong></p>\n<ul>\n<li>瞬时态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n<li>托管态： 将数据库中的数据同步到实体中，返回一个托管态的对象。</li>\n<li>删除态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n<li>游离态：抛异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed;</code></li>\n</ul>\n<p><strong>总结：</strong>只有被托管的对象才可以被refresh。</p>\n<p><strong>1.瞬时态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 刷新new出来的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshNew\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshNew</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User().setName(<span class=\"string\">\"lxt\"</span>).setNumber(<span class=\"string\">\"007\"</span>);</span><br><span class=\"line\">        userDao.refresh(user);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\"刷新(refresh)一个new的对象!\"</span>,e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/refreshNew\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshNew</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">38</span>:<span class=\"number\">18.037</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个<span class=\"keyword\">new</span>的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2.托管态：</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新托管态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshManaged/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshManaged</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshManaged(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个托管态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">------------------------------------------------------------------</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新托管态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshManaged</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"refresh before!\"</span>);</span><br><span class=\"line\">        refresh(user);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"user:\"</span>+user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshManaged/{id},返回`SUCCESS`</a></li>\n<li><a href=\"http://localhost:8080/user/list\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list</a></li>\n</ul>\n</li>\n<li><p>结果:数据库中数据并无变化，日志打印为数据库中查询出的值，并未打印<code>refresh before!</code></p>\n</li>\n</ul>\n<p><strong>3.删除态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新删除态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshRemove/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshRemove</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshRemove(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个删除态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">----------------------------------------------------------------------   </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新删除态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshRemove</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">       remove(user);</span><br><span class=\"line\">       user.setName(<span class=\"string\">\"refresh remove before！\"</span>);</span><br><span class=\"line\">       refresh(user);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"refresh remove after！\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshRemove/{id}\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshRemove/{id}</a></li>\n</ul>\n</li>\n<li><p>结果：返回<code>ERROR!</code>抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">40</span>:<span class=\"number\">57.713</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">3</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个删除态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>4.游离态</strong></p>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新游离态对象</span></span><br><span class=\"line\"><span class=\"comment\">     *<span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/refreshDetached/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">refreshDetached</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Long id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User user = userDao.findById(id);</span><br><span class=\"line\">            userDao.refreshDetached(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"刷新(refresh)一个游离态的对象!\"</span>,e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> REPONSE_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> REPONSE_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">----------------------------------------------------------------------</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新游离态的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshDetached</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        refresh(user);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><a href=\"http://localhost:8080/user/list，获取`id`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/list，获取`id`</a></li>\n<li><a href=\"http://localhost:8080/user/refreshDetached/{id},`\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/user/refreshDetached/{id},`</a></li>\n</ul>\n</li>\n<li><p>结果:返回<code>ERROR！</code>抛异常！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">26</span> <span class=\"number\">00</span>:<span class=\"number\">42</span>:<span class=\"number\">09.598</span> ERROR <span class=\"number\">10136</span> --- [nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">7</span>] c.e.demo.controller.UserController       : 刷新(refresh)一个游离态的对象!</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Entity not managed; nested exception is java.lang.IllegalArgumentException: Entity not managed</span><br><span class=\"line\">\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:<span class=\"number\">373</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:<span class=\"number\">255</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:<span class=\"number\">527</span>) ~[spring-orm-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br><span class=\"line\">\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:<span class=\"number\">61</span>) ~[spring-tx-<span class=\"number\">5.1</span>.4.RELEASE.jar:<span class=\"number\">5.1</span>.4.RELEASE]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3\">参考链接</h2>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/javavenus/article/details/6289616\" target=\"_blank\" rel=\"noopener\">JPA EntityManager的四个主要方法 ——persist,merge,refresh和remove</a></li>\n<li><a href=\"https://blog.csdn.net/yingxiake/article/details/50968059\" target=\"_blank\" rel=\"noopener\">JPA 实体生命周期理解和总结</a></li>\n</ul>"},{"title":"Spring Data JPA 1.0x版本中getOne和findOne区别","date":"2019-01-13T03:30:12.000Z","copyright":true,"_content":"上个项目初期，项目成员不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。\n<!--more-->\n## 目录\n* [**API说明**](#1)\n* [**使用说明**](#2)\n\n---\n<h2 id='1'>API说明</h2>\n\n```java\n/**\n * Retrieves an entity by its id.\n * \n * @param id must not be {@literal null}.\n * @return the entity with the given id or {@literal null} if none found\n * 返回具有给定ID的实体，如果找不到，则返回@literal null\n * @throws IllegalArgumentException if {@code id} is {@literal null}\n */\nT findOne(ID id);\n/**\n * Returns a reference to the entity with the given identifier.\n * \n * @param id must not be {@literal null}.\n * @return a reference to the entity with the given identifier.\n * 返回对具有给定标识符的实体的引用。(延迟加载)\n * @see EntityManager#getReference(Class, Object)\n */\nT getOne(ID id);\n```\n\n<h2 id='2'>使用说明</h2>\n\nfindOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同\n\n- findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（[Spring Data JPA 2.0X版本之后findOne方法被findById方法替换](http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/)）\n\n- getOne方法为延迟加载\n\n  - 执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用`xxx==null`来判断是否有返回结果。\n\n  - 当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出`EntityNotFoundException`异常，如下：\n\n    ![exception](/images/20190120/exception.png)\n\n\n","source":"_posts/Spring Data JPA 1.0x版本中getOne和findOne区别.md","raw":"---\ntitle: Spring Data JPA 1.0x版本中getOne和findOne区别\ndate: 2019-01-13 11:30:12\ntags:\n- Spring Data JPA\ncategories:\n- Spring\ncopyright: true\n---\n上个项目初期，项目成员不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。\n<!--more-->\n## 目录\n* [**API说明**](#1)\n* [**使用说明**](#2)\n\n---\n<h2 id='1'>API说明</h2>\n\n```java\n/**\n * Retrieves an entity by its id.\n * \n * @param id must not be {@literal null}.\n * @return the entity with the given id or {@literal null} if none found\n * 返回具有给定ID的实体，如果找不到，则返回@literal null\n * @throws IllegalArgumentException if {@code id} is {@literal null}\n */\nT findOne(ID id);\n/**\n * Returns a reference to the entity with the given identifier.\n * \n * @param id must not be {@literal null}.\n * @return a reference to the entity with the given identifier.\n * 返回对具有给定标识符的实体的引用。(延迟加载)\n * @see EntityManager#getReference(Class, Object)\n */\nT getOne(ID id);\n```\n\n<h2 id='2'>使用说明</h2>\n\nfindOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同\n\n- findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（[Spring Data JPA 2.0X版本之后findOne方法被findById方法替换](http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/)）\n\n- getOne方法为延迟加载\n\n  - 执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用`xxx==null`来判断是否有返回结果。\n\n  - 当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出`EntityNotFoundException`异常，如下：\n\n    ![exception](/images/20190120/exception.png)\n\n\n","slug":"Spring Data JPA 1.0x版本中getOne和findOne区别","published":1,"updated":"2019-01-22T12:19:04.682Z","_id":"cjr721bpl000cjcg2q2pd0uqi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上个项目初期，项目成员不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。<br><a id=\"more\"></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API说明</strong></a></li>\n<li><a href=\"#2\"><strong>使用说明</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">API说明</h2>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Retrieves an entity by its id.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the entity with the given id or &#123;<span class=\"doctag\">@literal</span> null&#125; if none found</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回具有给定ID的实体，如果找不到，则返回<span class=\"doctag\">@literal</span> null</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if &#123;<span class=\"doctag\">@code</span> id&#125; is &#123;<span class=\"doctag\">@literal</span> null&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">findOne</span><span class=\"params\">(ID id)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回对具有给定标识符的实体的引用。(延迟加载)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> EntityManager#getReference(Class, Object)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">getOne</span><span class=\"params\">(ID id)</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2\">使用说明</h2>\n\n<p>findOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同</p>\n<ul>\n<li><p>findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（<a href=\"http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/\" target=\"_blank\" rel=\"noopener\">Spring Data JPA 2.0X版本之后findOne方法被findById方法替换</a>）</p>\n</li>\n<li><p>getOne方法为延迟加载</p>\n<ul>\n<li><p>执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用<code>xxx==null</code>来判断是否有返回结果。</p>\n</li>\n<li><p>当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出<code>EntityNotFoundException</code>异常，如下：</p>\n<p><img src=\"/images/20190120/exception.png\" alt=\"exception\"></p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上个项目初期，项目成员不熟悉Spring Data JPA框架，在根据主键获取实体时，findOne和getOne混用，留下了不少坑，做个记录，简要说明下区别。<br>","more":"</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\"><strong>API说明</strong></a></li>\n<li><a href=\"#2\"><strong>使用说明</strong></a></li>\n</ul>\n<hr>\n<h2 id=\"1\">API说明</h2>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Retrieves an entity by its id.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the entity with the given id or &#123;<span class=\"doctag\">@literal</span> null&#125; if none found</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回具有给定ID的实体，如果找不到，则返回<span class=\"doctag\">@literal</span> null</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if &#123;<span class=\"doctag\">@code</span> id&#125; is &#123;<span class=\"doctag\">@literal</span> null&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">findOne</span><span class=\"params\">(ID id)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id must not be &#123;<span class=\"doctag\">@literal</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a reference to the entity with the given identifier.</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回对具有给定标识符的实体的引用。(延迟加载)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> EntityManager#getReference(Class, Object)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">getOne</span><span class=\"params\">(ID id)</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2\">使用说明</h2>\n\n<p>findOne和getOne重点即为翻译部分内容对比，两者加载策略和返回内容不同</p>\n<ul>\n<li><p>findOne方法为即时加载，执行该方法之后，立即执行查询的sql语句，返回结果，有对应实体则返回实体对象，如果没有实体对象，则返回null。（<a href=\"http://xiaotong.site/2019/01/13/Spring%20Data%20JPA%202.0X%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8EfindOne%E6%96%B9%E6%B3%95%E8%A2%ABfindById%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2/\" target=\"_blank\" rel=\"noopener\">Spring Data JPA 2.0X版本之后findOne方法被findById方法替换</a>）</p>\n</li>\n<li><p>getOne方法为延迟加载</p>\n<ul>\n<li><p>执行该方法之后，并不会执行对应的查询sql语句，而是返回一个带有id的代理对象，无论数据库中是否有该主键对应的实体，都不会返回null，即不可用<code>xxx==null</code>来判断是否有返回结果。</p>\n</li>\n<li><p>当获取该代理对象的其他属性时，会执行执行查询sql，如果数据库中有对应的实体，则返回实体对象；如果数据中无实体对象，则抛出<code>EntityNotFoundException</code>异常，如下：</p>\n<p><img src=\"/images/20190120/exception.png\" alt=\"exception\"></p>\n</li>\n</ul>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjr721bpc0000jcg2c0lybdwk","category_id":"cjr721bph0004jcg2c5tttrly","_id":"cjr721bpm000djcg2unyq5xcl"},{"post_id":"cjr721bpf0002jcg204h6uvpb","category_id":"cjr721bpk0009jcg2h07trbps","_id":"cjr721bpn000hjcg2l00qn41j"},{"post_id":"cjr721bpi0006jcg28cfp9qrz","category_id":"cjr721bpm000ejcg2gl8hmwxx","_id":"cjr721bpp000mjcg2a5x8xid2"},{"post_id":"cjr721bpj0007jcg2ldvm1ipq","category_id":"cjr721bpm000ejcg2gl8hmwxx","_id":"cjr721bpr000qjcg25y6m1sf6"},{"post_id":"cjr721bpk0008jcg2kxrl2lcy","category_id":"cjr721bpm000ejcg2gl8hmwxx","_id":"cjr721bpr000tjcg2lgrvi99i"},{"post_id":"cjr721bpl000cjcg2q2pd0uqi","category_id":"cjr721bpm000ejcg2gl8hmwxx","_id":"cjr721bps000vjcg2rmjfc2wc"}],"PostTag":[{"post_id":"cjr721bpc0000jcg2c0lybdwk","tag_id":"cjr721bpi0005jcg2337c9i8k","_id":"cjr721bpl000bjcg2wxr49nlm"},{"post_id":"cjr721bpf0002jcg204h6uvpb","tag_id":"cjr721bpk000ajcg2tfb3ww7o","_id":"cjr721bpm000gjcg2ccabq89w"},{"post_id":"cjr721bpi0006jcg28cfp9qrz","tag_id":"cjr721bpm000fjcg254ij4uo7","_id":"cjr721bpp000kjcg2ca4poz75"},{"post_id":"cjr721bpj0007jcg2ldvm1ipq","tag_id":"cjr721bpm000fjcg254ij4uo7","_id":"cjr721bpq000ojcg2lupj6t5r"},{"post_id":"cjr721bpk0008jcg2kxrl2lcy","tag_id":"cjr721bpm000fjcg254ij4uo7","_id":"cjr721bpr000sjcg2421jm74u"},{"post_id":"cjr721bpl000cjcg2q2pd0uqi","tag_id":"cjr721bpm000fjcg254ij4uo7","_id":"cjr721bps000ujcg2uina2qvi"}],"Tag":[{"name":"java8","_id":"cjr721bpi0005jcg2337c9i8k"},{"name":"MarkDown","_id":"cjr721bpk000ajcg2tfb3ww7o"},{"name":"Spring Data JPA","_id":"cjr721bpm000fjcg254ij4uo7"}]}}