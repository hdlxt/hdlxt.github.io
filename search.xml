<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring Boot 核心之自动装配实现]]></title>
    <url>%2F2020%2F06%2F01%2F2020-06-01%20Spring%20Boot%20%E6%A0%B8%E5%BF%83%E4%B9%8B%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[一、简介和目标 简介：在 Spring Boot 场景下，基于约定大于配置的原则，实现 Spring 组件自动装配的目的。 目标：完成一个可通过配置和@EnableXXX 来控制的是否装配的Bean 二、底层装配技术简述 Spring 模式注解装配 Spring @Enable 模块装配 注解驱动方式 eg: 123456@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.TYPE) @Documented@Import(DelegatingWebMvcConfiguration.class) public @interface EnableWebMvc &#123;&#125; 1234@Configuration public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport &#123; &#125; 接口编程方式 eg: 1234567@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Import(CachingConfigurationSelector.class) public @interface EnableCaching &#123; &#125; 123456789101112public class CachingConfigurationSelector extends AdviceModeImportSelector&lt;EnableCaching&gt; &#123; public String[] selectImports(AdviceMode adviceMode) &#123; switch(adviceMode) &#123; case PROXY: return this.getProxyImports(); case ASPECTJ: return this.getAspectJImports(); default: return null; &#125; &#125; &#125; Spring 条件装配 配置方式 - @Profile，根据不同环境进行装配 编程方式 - @Conditional 123456789@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Conditional(&#123;OnClassCondition.class&#125;)public @interface ConditionalOnClass &#123; Class&lt;?&gt;[] value() default &#123;&#125;; String[] name() default &#123;&#125;;&#125; Spring 工厂加载机制 实现类： SpringFactoriesLoader 配置资源： META-INF/spring.factories三、实现1、激活自动装配 @EnableAutoConfiguration项目结构如下添加核心Bean=&gt;HelloWorld,只有一个hello方法用于测试输出结果123456@Slf4jpublic class HelloWorld &#123; public void hello()&#123; log.info("hello world 2019!"); &#125;&#125; 添加HelloWorldConfiguration用于注册HelloWorld 12345678@Slf4jpublic class HelloWorldConfiguration &#123; @Bean public HelloWorld hello()&#123; log.info("Load HelloWorld"); return new HelloWorld(); &#125;&#125; 添加HelloWorldImportSelector实现ImportSelector，通过接口编程方式实现@Enable功能 12345678910@Slf4jpublic class HelloWorldImportSelector implements ImportSelector &#123; @Override public String[] selectImports(AnnotationMetadata annotationMetadata) &#123; log.info("annotationMetadata.getAnnotationTypes():&#123;&#125;",annotationMetadata.getAnnotationTypes()); // 此处可写分支条件，根据指定条件选择性注册某些类 或者返回null return new String[]&#123;HelloWorldConfiguration.class.getName()&#125;; &#125;&#125; 添加@EnableHelloWorld用于控制是否装配HelloWorld 1234567@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.TYPE)@Documented//@Import(HelloWorldConfiguration.class) // 基于注解驱动实现Sprig @Enable模块@Import(HelloWorldImportSelector.class) // 基于接口驱动实现Spring @Enable模块public @interface EnableHelloWorld &#123;&#125; 注:如果直接使用@Import(HelloWorldConfiguration.class)注解方式实现，则不需要HelloWorldImportSelector类，但是注解方式无法添加分支判断，只能指定加载指定类 2、实现自动装配配置类 HelloWorldAutoConfiguration123456@Configuration // 模式注解，声明是一个bean@ConditionalOnSystemProperty(name = "user.name", value = "Administrator") // 正确的条件装配//@ConditionalOnSystemProperty(name = "user.name", value = "lxt") // 错误的条件装配@EnableHelloWorld // Spring @Enable 模块装配public class HelloWorldAutoConfiguration &#123;&#125; 先根据条件注解@ConditionalOnSystemProperty判断是否满足 满足则执行@EnableHelloWorld，加载HelloWorldImportSelector，注册HelloWorldConfiguration进而注册HelloWorld3、配置自动装配实现 META-INF/spring.factories在resources下添加META-INF/spring.factories配置文件，用于启动是通过工厂机制（SpringFactoriesLoader）加载123# 自动装配org.springframework.boot.autoconfigure.EnableAutoConfiguration=\com.lxt.springboot.autoconfigure.configuration.HelloWorldAutoConfiguration 4、测试添加测试类HelloWorldService 123456789101112@Componentpublic class HelloWorldService &#123; @Autowired private HelloWorld helloWorld; @PostConstruct public void init()&#123; helloWorld.hello(); &#125;&#125; 启动项目，控制台输出如下，测试开启情况成功 1232019-11-24 21:25:02.299 INFO 13880 --- [ main] c.l.s.a.a.HelloWorldImportSelector : annotationMetadata.getAnnotationTypes():[com.lxt.springboot.autoconfigure.condition.ConditionalOnSystemProperty, com.lxt.springboot.autoconfigure.annotation.EnableHelloWorld]2019-11-24 21:25:02.710 INFO 13880 --- [ main] c.l.s.a.c.HelloWorldConfiguration : Load HelloWorld2019-11-24 21:25:02.712 INFO 13880 --- [ main] c.l.s.autoconfigure.entity.HelloWorld : hello world 2019! 去掉@EnableHelloWorld 注解或者条件注解修改为ConditionalOnSystemProperty(name = “user.name”, value = “lxt”)，分别重启，控制台输出如下，测试关闭情况成功 123456789101112131415***************************APPLICATION FAILED TO START***************************Description:Field helloWorld in com.lxt.springboot.autoconfigure.service.HelloWorldService required a bean of type 'com.lxt.springboot.autoconfigure.entity.HelloWorld' that could not be found.The injection point has the following annotations: - @org.springframework.beans.factory.annotation.Autowired(required=true)Action:Consider defining a bean of type 'com.lxt.springboot.autoconfigure.entity.HelloWorld' in your configuration. 五、源码 https://github.com/hdlxt/dive-in-spring-boot]]></content>
      <categories>
        <category>Spring</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>自动装备</tag>
        <tag>核心</tag>
      </tags>
  </entry>
</search>
